
DSDPLC_BASE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00802000  000023ac  00002440  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027f  00802080  00802080  000024c0  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024be  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006f8  00000000  00000000  000024f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000e592  00000000  00000000  00002be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000261b  00000000  00000000  0001117a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000987a  00000000  00000000  00013795  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001210  00000000  00000000  0001d010  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002ff58  00000000  00000000  0001e220  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006716  00000000  00000000  0004e178  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000630  00000000  00000000  00054890  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000ba70  00000000  00000000  00054ec0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
       6:	00 00       	nop
       8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
       a:	00 00       	nop
       c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
       e:	00 00       	nop
      10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
      12:	00 00       	nop
      14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
      16:	00 00       	nop
      18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
      1e:	00 00       	nop
      20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
      22:	00 00       	nop
      24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
      26:	00 00       	nop
      28:	5c c7       	rjmp	.+3768   	; 0xee2 <__vector_10>
      2a:	00 00       	nop
      2c:	73 c7       	rjmp	.+3814   	; 0xf14 <__vector_11>
      2e:	00 00       	nop
      30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
      32:	00 00       	nop
      34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
      36:	00 00       	nop
      38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
      3e:	00 00       	nop
      40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
      42:	00 00       	nop
      44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
      46:	00 00       	nop
      48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
      52:	00 00       	nop
      54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
      56:	00 00       	nop
      58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
      62:	00 00       	nop
      64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
      66:	00 00       	nop
      68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
      72:	00 00       	nop
      74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
      76:	00 00       	nop
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
      82:	00 00       	nop
      84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
      92:	00 00       	nop
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
      96:	00 00       	nop
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
     102:	00 00       	nop
     104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
     106:	00 00       	nop
     108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
     10e:	00 00       	nop
     110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
     112:	00 00       	nop
     114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
     116:	00 00       	nop
     118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
     11e:	00 00       	nop
     120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
     122:	00 00       	nop
     124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
     126:	00 00       	nop
     128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
     12e:	00 00       	nop
     130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
     132:	00 00       	nop
     134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
     136:	00 00       	nop
     138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
     13e:	00 00       	nop
     140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
     142:	00 00       	nop
     144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
     146:	00 00       	nop
     148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
     14e:	00 00       	nop
     150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
     152:	00 00       	nop
     154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
     156:	00 00       	nop
     158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
     15e:	00 00       	nop
     160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
     162:	00 00       	nop
     164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
     166:	00 00       	nop
     168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
     16e:	00 00       	nop
     170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
     172:	00 00       	nop
     174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
     176:	00 00       	nop
     178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
     17e:	00 00       	nop
     180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
     182:	00 00       	nop
     184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
     186:	00 00       	nop
     188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
     18e:	00 00       	nop
     190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
     192:	00 00       	nop
     194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
     196:	00 00       	nop
     198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <__vector_125>
     1f8:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__vector_126>
     1fc:	ff 08       	sbc	r15, r15
     1fe:	ed 08       	sbc	r14, r13
     200:	f0 08       	sbc	r15, r0
     202:	f3 08       	sbc	r15, r3
     204:	f6 08       	sbc	r15, r6
     206:	f9 08       	sbc	r15, r9
     208:	fc 08       	sbc	r15, r12

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e2       	ldi	r29, 0x2F	; 47
     214:	de bf       	out	0x3e, r29	; 62

00000216 <__do_copy_data>:
     216:	10 e2       	ldi	r17, 0x20	; 32
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b0 e2       	ldi	r27, 0x20	; 32
     21c:	ec ea       	ldi	r30, 0xAC	; 172
     21e:	f3 e2       	ldi	r31, 0x23	; 35
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x10>
     222:	05 90       	lpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	ae 37       	cpi	r26, 0x7E	; 126
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0xc>

0000022c <__do_clear_bss>:
     22c:	22 e2       	ldi	r18, 0x22	; 34
     22e:	a0 e8       	ldi	r26, 0x80	; 128
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	af 3f       	cpi	r26, 0xFF	; 255
     238:	b2 07       	cpc	r27, r18
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
     23c:	0e 94 2d 11 	call	0x225a	; 0x225a <main>
     240:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <_exit>

00000244 <__bad_interrupt>:
     244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	00 d0       	rcall	.+0      	; 0x24c <sysclk_init+0x6>
     24c:	00 d0       	rcall	.+0      	; 0x24e <sysclk_init+0x8>
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     252:	8f ef       	ldi	r24, 0xFF	; 255
     254:	80 93 70 00 	sts	0x0070, r24
     258:	80 93 71 00 	sts	0x0071, r24
     25c:	80 93 72 00 	sts	0x0072, r24
     260:	80 93 73 00 	sts	0x0073, r24
     264:	80 93 74 00 	sts	0x0074, r24
     268:	80 93 75 00 	sts	0x0075, r24
     26c:	80 93 76 00 	sts	0x0076, r24
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     270:	6c e1       	ldi	r22, 0x1C	; 28
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	82 e0       	ldi	r24, 0x02	; 2
     276:	2b d6       	rcall	.+3158   	; 0xece <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
     278:	8a 83       	std	Y+2, r24	; 0x02
     27a:	6d e1       	ldi	r22, 0x1D	; 29
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	82 e0       	ldi	r24, 0x02	; 2
     280:	26 d6       	rcall	.+3148   	; 0xece <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
     282:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	21 f4       	brne	.+8      	; 0x294 <sysclk_init+0x4e>
		cal = 0x2340;
     28c:	80 e4       	ldi	r24, 0x40	; 64
     28e:	93 e2       	ldi	r25, 0x23	; 35
     290:	89 83       	std	Y+1, r24	; 0x01
     292:	9a 83       	std	Y+2, r25	; 0x02
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	9a 81       	ldd	r25, Y+2	; 0x02
     298:	8b 83       	std	Y+3, r24	; 0x03
     29a:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
     29c:	e0 e6       	ldi	r30, 0x60	; 96
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
     2a2:	8c 81       	ldd	r24, Y+4	; 0x04
     2a4:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     2a6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     2a8:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     2aa:	e0 e5       	ldi	r30, 0x50	; 80
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	90 81       	ld	r25, Z
     2b0:	92 60       	ori	r25, 0x02	; 2
     2b2:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2b4:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     2b6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     2b8:	81 ff       	sbrs	r24, 1
     2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <sysclk_init+0x70>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	80 e4       	ldi	r24, 0x40	; 64
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	ff d5       	rcall	.+3070   	; 0xec2 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     2c4:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     2c6:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     2c8:	e0 e5       	ldi	r30, 0x50	; 80
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	90 81       	ld	r25, Z
     2ce:	9e 7f       	andi	r25, 0xFE	; 254
     2d0:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2d2:	8f bf       	out	0x3f, r24	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     2d4:	24 96       	adiw	r28, 0x04	; 4
     2d6:	cd bf       	out	0x3d, r28	; 61
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <udi_cdc_comm_enable>:
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
}
     2e0:	10 92 96 21 	sts	0x2196, r1
     2e4:	10 92 a2 21 	sts	0x21A2, r1
     2e8:	10 92 a3 21 	sts	0x21A3, r1
     2ec:	81 ea       	ldi	r24, 0xA1	; 161
     2ee:	80 93 98 21 	sts	0x2198, r24
     2f2:	80 e2       	ldi	r24, 0x20	; 32
     2f4:	80 93 99 21 	sts	0x2199, r24
     2f8:	10 92 9a 21 	sts	0x219A, r1
     2fc:	10 92 9b 21 	sts	0x219B, r1
     300:	10 92 9c 21 	sts	0x219C, r1
     304:	10 92 9d 21 	sts	0x219D, r1
     308:	82 e0       	ldi	r24, 0x02	; 2
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	80 93 9e 21 	sts	0x219E, r24
     310:	90 93 9f 21 	sts	0x219F, r25
     314:	10 92 a0 21 	sts	0x21A0, r1
     318:	10 92 a1 21 	sts	0x21A1, r1
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	92 ec       	ldi	r25, 0xC2	; 194
     320:	a1 e0       	ldi	r26, 0x01	; 1
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	80 93 a4 21 	sts	0x21A4, r24
     328:	90 93 a5 21 	sts	0x21A5, r25
     32c:	a0 93 a6 21 	sts	0x21A6, r26
     330:	b0 93 a7 21 	sts	0x21A7, r27
     334:	10 92 a8 21 	sts	0x21A8, r1
     338:	10 92 a9 21 	sts	0x21A9, r1
     33c:	88 e0       	ldi	r24, 0x08	; 8
     33e:	80 93 aa 21 	sts	0x21AA, r24
     342:	80 91 96 21 	lds	r24, 0x2196
     346:	8f 5f       	subi	r24, 0xFF	; 255
     348:	80 93 96 21 	sts	0x2196, r24
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	08 95       	ret

00000350 <udi_cdc_comm_disable>:
     350:	80 91 96 21 	lds	r24, 0x2196
     354:	81 50       	subi	r24, 0x01	; 1
     356:	80 93 96 21 	sts	0x2196, r24
     35a:	08 95       	ret

0000035c <udi_cdc_data_disable>:
     35c:	80 91 95 21 	lds	r24, 0x2195
     360:	81 50       	subi	r24, 0x01	; 1
     362:	80 93 95 21 	sts	0x2195, r24
     366:	80 91 95 21 	lds	r24, 0x2195
     36a:	10 92 94 21 	sts	0x2194, r1
     36e:	08 95       	ret

00000370 <udi_cdc_data_setup>:
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	08 95       	ret

00000374 <udi_cdc_getsetting>:
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	08 95       	ret

00000378 <udi_cdc_comm_setup>:
     378:	80 91 ef 22 	lds	r24, 0x22EF
     37c:	88 23       	and	r24, r24
     37e:	dc f4       	brge	.+54     	; 0x3b6 <udi_cdc_comm_setup+0x3e>
     380:	80 76       	andi	r24, 0x60	; 96
     382:	80 32       	cpi	r24, 0x20	; 32
     384:	e9 f5       	brne	.+122    	; 0x400 <udi_cdc_comm_setup+0x88>
     386:	80 91 f0 22 	lds	r24, 0x22F0
     38a:	81 32       	cpi	r24, 0x21	; 33
     38c:	d9 f5       	brne	.+118    	; 0x404 <udi_cdc_comm_setup+0x8c>
     38e:	80 91 f5 22 	lds	r24, 0x22F5
     392:	90 91 f6 22 	lds	r25, 0x22F6
     396:	07 97       	sbiw	r24, 0x07	; 7
     398:	b9 f5       	brne	.+110    	; 0x408 <udi_cdc_comm_setup+0x90>
     39a:	84 ea       	ldi	r24, 0xA4	; 164
     39c:	91 e2       	ldi	r25, 0x21	; 33
     39e:	80 93 f7 22 	sts	0x22F7, r24
     3a2:	90 93 f8 22 	sts	0x22F8, r25
     3a6:	87 e0       	ldi	r24, 0x07	; 7
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	80 93 f9 22 	sts	0x22F9, r24
     3ae:	90 93 fa 22 	sts	0x22FA, r25
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	08 95       	ret
     3b6:	80 76       	andi	r24, 0x60	; 96
     3b8:	80 32       	cpi	r24, 0x20	; 32
     3ba:	41 f5       	brne	.+80     	; 0x40c <udi_cdc_comm_setup+0x94>
     3bc:	80 91 f0 22 	lds	r24, 0x22F0
     3c0:	80 32       	cpi	r24, 0x20	; 32
     3c2:	21 f0       	breq	.+8      	; 0x3cc <udi_cdc_comm_setup+0x54>
     3c4:	82 32       	cpi	r24, 0x22	; 34
     3c6:	21 f5       	brne	.+72     	; 0x410 <udi_cdc_comm_setup+0x98>
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	08 95       	ret
     3cc:	80 91 f5 22 	lds	r24, 0x22F5
     3d0:	90 91 f6 22 	lds	r25, 0x22F6
     3d4:	07 97       	sbiw	r24, 0x07	; 7
     3d6:	f1 f4       	brne	.+60     	; 0x414 <udi_cdc_comm_setup+0x9c>
     3d8:	8c e0       	ldi	r24, 0x0C	; 12
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	80 93 fb 22 	sts	0x22FB, r24
     3e0:	90 93 fc 22 	sts	0x22FC, r25
     3e4:	84 ea       	ldi	r24, 0xA4	; 164
     3e6:	91 e2       	ldi	r25, 0x21	; 33
     3e8:	80 93 f7 22 	sts	0x22F7, r24
     3ec:	90 93 f8 22 	sts	0x22F8, r25
     3f0:	87 e0       	ldi	r24, 0x07	; 7
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	80 93 f9 22 	sts	0x22F9, r24
     3f8:	90 93 fa 22 	sts	0x22FA, r25
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	08 95       	ret
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	08 95       	ret
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	08 95       	ret
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	08 95       	ret
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	08 95       	ret
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	08 95       	ret
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	08 95       	ret

00000418 <udi_cdc_line_coding_received>:
     418:	08 95       	ret

0000041a <udi_cdc_tx_send>:
     41a:	ff 92       	push	r15
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	80 91 83 20 	lds	r24, 0x2083
     428:	81 11       	cpse	r24, r1
     42a:	9c c0       	rjmp	.+312    	; 0x564 <udi_cdc_tx_send+0x14a>
     42c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <udd_is_high_speed>
     430:	88 23       	and	r24, r24
     432:	51 f0       	breq	.+20     	; 0x448 <udi_cdc_tx_send+0x2e>
     434:	c0 91 84 20 	lds	r28, 0x2084
     438:	d0 91 85 20 	lds	r29, 0x2085
     43c:	0e 94 a7 0a 	call	0x154e	; 0x154e <udd_get_micro_frame_number>
     440:	c8 17       	cp	r28, r24
     442:	d9 07       	cpc	r29, r25
     444:	59 f4       	brne	.+22     	; 0x45c <udi_cdc_tx_send+0x42>
     446:	8e c0       	rjmp	.+284    	; 0x564 <udi_cdc_tx_send+0x14a>
     448:	c0 91 84 20 	lds	r28, 0x2084
     44c:	d0 91 85 20 	lds	r29, 0x2085
     450:	0e 94 a2 0a 	call	0x1544	; 0x1544 <udd_get_frame_number>
     454:	c8 17       	cp	r28, r24
     456:	d9 07       	cpc	r29, r25
     458:	09 f4       	brne	.+2      	; 0x45c <udi_cdc_tx_send+0x42>
     45a:	84 c0       	rjmp	.+264    	; 0x564 <udi_cdc_tx_send+0x14a>
     45c:	df b7       	in	r29, 0x3f	; 63
     45e:	f8 94       	cli
     460:	c0 91 86 20 	lds	r28, 0x2086
     464:	ec 2f       	mov	r30, r28
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	ee 0f       	add	r30, r30
     46a:	ff 1f       	adc	r31, r31
     46c:	e9 57       	subi	r30, 0x79	; 121
     46e:	ff 4d       	sbci	r31, 0xDF	; 223
     470:	80 81       	ld	r24, Z
     472:	91 81       	ldd	r25, Z+1	; 0x01
     474:	89 2b       	or	r24, r25
     476:	09 f5       	brne	.+66     	; 0x4ba <udi_cdc_tx_send+0xa0>
     478:	80 91 80 20 	lds	r24, 0x2080
     47c:	90 91 81 20 	lds	r25, 0x2081
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	80 93 80 20 	sts	0x2080, r24
     486:	90 93 81 20 	sts	0x2081, r25
     48a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <udd_is_high_speed>
     48e:	81 11       	cpse	r24, r1
     490:	07 c0       	rjmp	.+14     	; 0x4a0 <udi_cdc_tx_send+0x86>
     492:	80 91 80 20 	lds	r24, 0x2080
     496:	90 91 81 20 	lds	r25, 0x2081
     49a:	84 36       	cpi	r24, 0x64	; 100
     49c:	91 05       	cpc	r25, r1
     49e:	58 f0       	brcs	.+22     	; 0x4b6 <udi_cdc_tx_send+0x9c>
     4a0:	0e 94 9a 0a 	call	0x1534	; 0x1534 <udd_is_high_speed>
     4a4:	88 23       	and	r24, r24
     4a6:	49 f0       	breq	.+18     	; 0x4ba <udi_cdc_tx_send+0xa0>
     4a8:	80 91 80 20 	lds	r24, 0x2080
     4ac:	90 91 81 20 	lds	r25, 0x2081
     4b0:	80 32       	cpi	r24, 0x20	; 32
     4b2:	93 40       	sbci	r25, 0x03	; 3
     4b4:	10 f4       	brcc	.+4      	; 0x4ba <udi_cdc_tx_send+0xa0>
     4b6:	df bf       	out	0x3f, r29	; 63
     4b8:	55 c0       	rjmp	.+170    	; 0x564 <udi_cdc_tx_send+0x14a>
     4ba:	10 92 80 20 	sts	0x2080, r1
     4be:	10 92 81 20 	sts	0x2081, r1
     4c2:	80 91 82 20 	lds	r24, 0x2082
     4c6:	81 11       	cpse	r24, r1
     4c8:	06 c0       	rjmp	.+12     	; 0x4d6 <udi_cdc_tx_send+0xbc>
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	c1 11       	cpse	r28, r1
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	80 93 86 20 	sts	0x2086, r24
     4d4:	04 c0       	rjmp	.+8      	; 0x4de <udi_cdc_tx_send+0xc4>
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	c1 11       	cpse	r28, r1
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	c8 2f       	mov	r28, r24
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	80 93 83 20 	sts	0x2083, r24
     4e4:	df bf       	out	0x3f, r29	; 63
     4e6:	d0 e0       	ldi	r29, 0x00	; 0
     4e8:	fe 01       	movw	r30, r28
     4ea:	ee 0f       	add	r30, r30
     4ec:	ff 1f       	adc	r31, r31
     4ee:	e9 57       	subi	r30, 0x79	; 121
     4f0:	ff 4d       	sbci	r31, 0xDF	; 223
     4f2:	ff 24       	eor	r15, r15
     4f4:	f3 94       	inc	r15
     4f6:	80 81       	ld	r24, Z
     4f8:	91 81       	ldd	r25, Z+1	; 0x01
     4fa:	80 34       	cpi	r24, 0x40	; 64
     4fc:	91 05       	cpc	r25, r1
     4fe:	09 f4       	brne	.+2      	; 0x502 <udi_cdc_tx_send+0xe8>
     500:	f1 2c       	mov	r15, r1
     502:	ff 20       	and	r15, r15
     504:	91 f0       	breq	.+36     	; 0x52a <udi_cdc_tx_send+0x110>
     506:	0e 94 9a 0a 	call	0x1534	; 0x1534 <udd_is_high_speed>
     50a:	88 23       	and	r24, r24
     50c:	39 f0       	breq	.+14     	; 0x51c <udi_cdc_tx_send+0x102>
     50e:	0e 94 a7 0a 	call	0x154e	; 0x154e <udd_get_micro_frame_number>
     512:	80 93 84 20 	sts	0x2084, r24
     516:	90 93 85 20 	sts	0x2085, r25
     51a:	0b c0       	rjmp	.+22     	; 0x532 <udi_cdc_tx_send+0x118>
     51c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <udd_get_frame_number>
     520:	80 93 84 20 	sts	0x2084, r24
     524:	90 93 85 20 	sts	0x2085, r25
     528:	04 c0       	rjmp	.+8      	; 0x532 <udi_cdc_tx_send+0x118>
     52a:	10 92 84 20 	sts	0x2084, r1
     52e:	10 92 85 20 	sts	0x2085, r1
     532:	fe 01       	movw	r30, r28
     534:	ee 0f       	add	r30, r30
     536:	ff 1f       	adc	r31, r31
     538:	e9 57       	subi	r30, 0x79	; 121
     53a:	ff 4d       	sbci	r31, 0xDF	; 223
     53c:	20 81       	ld	r18, Z
     53e:	31 81       	ldd	r19, Z+1	; 0x01
     540:	ae 01       	movw	r20, r28
     542:	00 24       	eor	r0, r0
     544:	56 95       	lsr	r21
     546:	47 95       	ror	r20
     548:	07 94       	ror	r0
     54a:	56 95       	lsr	r21
     54c:	47 95       	ror	r20
     54e:	07 94       	ror	r0
     550:	54 2f       	mov	r21, r20
     552:	40 2d       	mov	r20, r0
     554:	44 57       	subi	r20, 0x74	; 116
     556:	5f 4d       	sbci	r21, 0xDF	; 223
     558:	08 eb       	ldi	r16, 0xB8	; 184
     55a:	12 e0       	ldi	r17, 0x02	; 2
     55c:	6f 2d       	mov	r22, r15
     55e:	81 e8       	ldi	r24, 0x81	; 129
     560:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <udd_ep_run>
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	08 95       	ret

00000570 <udi_cdc_data_sent>:
     570:	81 11       	cpse	r24, r1
     572:	15 c0       	rjmp	.+42     	; 0x59e <udi_cdc_data_sent+0x2e>
     574:	20 91 86 20 	lds	r18, 0x2086
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	22 23       	and	r18, r18
     57e:	11 f0       	breq	.+4      	; 0x584 <udi_cdc_data_sent+0x14>
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	fc 01       	movw	r30, r24
     586:	ee 0f       	add	r30, r30
     588:	ff 1f       	adc	r31, r31
     58a:	e9 57       	subi	r30, 0x79	; 121
     58c:	ff 4d       	sbci	r31, 0xDF	; 223
     58e:	10 82       	st	Z, r1
     590:	11 82       	std	Z+1, r1	; 0x01
     592:	10 92 82 20 	sts	0x2082, r1
     596:	10 92 83 20 	sts	0x2083, r1
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	3e cf       	rjmp	.-388    	; 0x41a <udi_cdc_tx_send>
     59e:	08 95       	ret

000005a0 <udi_cdc_data_sof_notify>:
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	3b cf       	rjmp	.-394    	; 0x41a <udi_cdc_tx_send>
     5a4:	08 95       	ret

000005a6 <udi_cdc_multi_get_nb_received_data>:
     5a6:	4f b7       	in	r20, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	20 91 0d 21 	lds	r18, 0x210D
     5ae:	30 91 0e 21 	lds	r19, 0x210E
     5b2:	e0 91 0f 21 	lds	r30, 0x210F
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	ee 0f       	add	r30, r30
     5ba:	ff 1f       	adc	r31, r31
     5bc:	e0 5f       	subi	r30, 0xF0	; 240
     5be:	fe 4d       	sbci	r31, 0xDE	; 222
     5c0:	80 81       	ld	r24, Z
     5c2:	91 81       	ldd	r25, Z+1	; 0x01
     5c4:	82 1b       	sub	r24, r18
     5c6:	93 0b       	sbc	r25, r19
     5c8:	4f bf       	out	0x3f, r20	; 63
     5ca:	08 95       	ret

000005cc <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     5cc:	ec df       	rcall	.-40     	; 0x5a6 <udi_cdc_multi_get_nb_received_data>
     5ce:	21 e0       	ldi	r18, 0x01	; 1
     5d0:	89 2b       	or	r24, r25
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <udi_cdc_multi_is_rx_ready+0xa>
     5d4:	20 e0       	ldi	r18, 0x00	; 0
}
     5d6:	82 2f       	mov	r24, r18
     5d8:	08 95       	ret

000005da <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     5e2:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
     5e4:	f8 94       	cli
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     5e6:	50 91 0f 21 	lds	r21, 0x210F
	if (udi_cdc_rx_trans_ongoing[port] ||
     5ea:	80 91 0c 21 	lds	r24, 0x210C
     5ee:	81 11       	cpse	r24, r1
     5f0:	10 c0       	rjmp	.+32     	; 0x612 <udi_cdc_rx_start+0x38>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     5f2:	20 91 0d 21 	lds	r18, 0x210D
     5f6:	30 91 0e 21 	lds	r19, 0x210E
     5fa:	c5 2f       	mov	r28, r21
     5fc:	d0 e0       	ldi	r29, 0x00	; 0
     5fe:	fe 01       	movw	r30, r28
     600:	ee 0f       	add	r30, r30
     602:	ff 1f       	adc	r31, r31
     604:	e0 5f       	subi	r30, 0xF0	; 240
     606:	fe 4d       	sbci	r31, 0xDE	; 222
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
     608:	80 81       	ld	r24, Z
     60a:	91 81       	ldd	r25, Z+1	; 0x01
     60c:	28 17       	cp	r18, r24
     60e:	39 07       	cpc	r19, r25
     610:	18 f4       	brcc	.+6      	; 0x618 <udi_cdc_rx_start+0x3e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     612:	4f bf       	out	0x3f, r20	; 63
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	23 c0       	rjmp	.+70     	; 0x65e <udi_cdc_rx_start+0x84>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
     618:	10 92 0d 21 	sts	0x210D, r1
     61c:	10 92 0e 21 	sts	0x210E, r1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	51 11       	cpse	r21, r1
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	80 93 0f 21 	sts	0x210F, r24

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	80 93 0c 21 	sts	0x210C, r24
     630:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	cb df       	rcall	.-106    	; 0x5cc <udi_cdc_multi_is_rx_ready>
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
     636:	ae 01       	movw	r20, r28
     638:	00 24       	eor	r0, r0
     63a:	56 95       	lsr	r21
     63c:	47 95       	ror	r20
     63e:	07 94       	ror	r0
     640:	56 95       	lsr	r21
     642:	47 95       	ror	r20
     644:	07 94       	ror	r0
     646:	54 2f       	mov	r21, r20
     648:	40 2d       	mov	r20, r0
     64a:	4c 5e       	subi	r20, 0xEC	; 236
     64c:	5e 4d       	sbci	r21, 0xDE	; 222
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
     64e:	06 e6       	ldi	r16, 0x66	; 102
     650:	13 e0       	ldi	r17, 0x03	; 3
     652:	20 e4       	ldi	r18, 0x40	; 64
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <udd_ep_run>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	08 95       	ret

00000668 <udi_cdc_data_enable>:
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
     668:	10 92 95 21 	sts	0x2195, r1
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
     66c:	10 92 83 20 	sts	0x2083, r1
	udi_cdc_tx_both_buf_to_send[port] = false;
     670:	10 92 82 20 	sts	0x2082, r1
	udi_cdc_tx_buf_sel[port] = 0;
     674:	10 92 86 20 	sts	0x2086, r1
	udi_cdc_tx_buf_nb[port][0] = 0;
     678:	10 92 87 20 	sts	0x2087, r1
     67c:	10 92 88 20 	sts	0x2088, r1
	udi_cdc_tx_buf_nb[port][1] = 0;
     680:	10 92 89 20 	sts	0x2089, r1
     684:	10 92 8a 20 	sts	0x208A, r1
	udi_cdc_tx_sof_num[port] = 0;
     688:	10 92 84 20 	sts	0x2084, r1
     68c:	10 92 85 20 	sts	0x2085, r1
	udi_cdc_tx_send(port);
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	c3 de       	rcall	.-634    	; 0x41a <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
     694:	10 92 0c 21 	sts	0x210C, r1
	udi_cdc_rx_buf_sel[port] = 0;
     698:	10 92 0f 21 	sts	0x210F, r1
	udi_cdc_rx_buf_nb[port][0] = 0;
     69c:	10 92 10 21 	sts	0x2110, r1
     6a0:	10 92 11 21 	sts	0x2111, r1
	udi_cdc_rx_pos[port] = 0;
     6a4:	10 92 0d 21 	sts	0x210D, r1
     6a8:	10 92 0e 21 	sts	0x210E, r1
	if (!udi_cdc_rx_start(port)) {
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	95 df       	rcall	.-214    	; 0x5da <udi_cdc_rx_start>
     6b0:	88 23       	and	r24, r24
     6b2:	59 f0       	breq	.+22     	; 0x6ca <udi_cdc_data_enable+0x62>
		return false;
	}
	udi_cdc_nb_data_enabled++;
     6b4:	90 91 95 21 	lds	r25, 0x2195
     6b8:	9f 5f       	subi	r25, 0xFF	; 255
     6ba:	90 93 95 21 	sts	0x2195, r25
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     6be:	90 91 95 21 	lds	r25, 0x2195
     6c2:	91 30       	cpi	r25, 0x01	; 1
     6c4:	11 f4       	brne	.+4      	; 0x6ca <udi_cdc_data_enable+0x62>
		udi_cdc_data_running = true;
     6c6:	90 93 94 21 	sts	0x2194, r25
	}
	return true;
}
     6ca:	08 95       	ret

000006cc <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	94 2f       	mov	r25, r20
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
     6d2:	81 11       	cpse	r24, r1
     6d4:	28 c0       	rjmp	.+80     	; 0x726 <udi_cdc_data_received+0x5a>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     6d6:	80 91 0f 21 	lds	r24, 0x210F
     6da:	e1 e0       	ldi	r30, 0x01	; 1
     6dc:	81 11       	cpse	r24, r1
     6de:	e0 e0       	ldi	r30, 0x00	; 0
	if (!n) {
     6e0:	61 15       	cp	r22, r1
     6e2:	71 05       	cpc	r23, r1
     6e4:	a9 f4       	brne	.+42     	; 0x710 <udi_cdc_data_received+0x44>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	00 24       	eor	r0, r0
     6ea:	f6 95       	lsr	r31
     6ec:	e7 95       	ror	r30
     6ee:	07 94       	ror	r0
     6f0:	f6 95       	lsr	r31
     6f2:	e7 95       	ror	r30
     6f4:	07 94       	ror	r0
     6f6:	fe 2f       	mov	r31, r30
     6f8:	e0 2d       	mov	r30, r0
     6fa:	af 01       	movw	r20, r30
     6fc:	4c 5e       	subi	r20, 0xEC	; 236
     6fe:	5e 4d       	sbci	r21, 0xDE	; 222
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
     700:	06 e6       	ldi	r16, 0x66	; 102
     702:	13 e0       	ldi	r17, 0x03	; 3
     704:	20 e4       	ldi	r18, 0x40	; 64
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	89 2f       	mov	r24, r25
     70c:	d2 d7       	rcall	.+4004   	; 0x16b2 <udd_ep_run>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
     70e:	0b c0       	rjmp	.+22     	; 0x726 <udi_cdc_data_received+0x5a>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	e0 5f       	subi	r30, 0xF0	; 240
     718:	fe 4d       	sbci	r31, 0xDE	; 222
     71a:	60 83       	st	Z, r22
     71c:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
     71e:	10 92 0c 21 	sts	0x210C, r1
	udi_cdc_rx_start(port);
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	5a df       	rcall	.-332    	; 0x5da <udi_cdc_rx_start>
}
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	08 95       	ret

0000072c <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     72c:	e0 91 b0 21 	lds	r30, 0x21B0
     730:	f0 91 b1 21 	lds	r31, 0x21B1
     734:	01 90       	ld	r0, Z+
     736:	f0 81       	ld	r31, Z
     738:	e0 2d       	mov	r30, r0
     73a:	22 81       	ldd	r18, Z+2	; 0x02
     73c:	33 81       	ldd	r19, Z+3	; 0x03
     73e:	2e 0f       	add	r18, r30
     740:	3f 1f       	adc	r19, r31
     742:	fc 01       	movw	r30, r24
     744:	40 81       	ld	r20, Z
     746:	e4 0f       	add	r30, r20
     748:	f1 1d       	adc	r31, r1
     74a:	e2 17       	cp	r30, r18
     74c:	f3 07       	cpc	r31, r19
     74e:	a0 f4       	brcc	.+40     	; 0x778 <udc_next_desc_in_iface+0x4c>
     750:	81 81       	ldd	r24, Z+1	; 0x01
     752:	84 30       	cpi	r24, 0x04	; 4
     754:	a1 f0       	breq	.+40     	; 0x77e <udc_next_desc_in_iface+0x52>
     756:	86 13       	cpse	r24, r22
     758:	06 c0       	rjmp	.+12     	; 0x766 <udc_next_desc_in_iface+0x3a>
     75a:	14 c0       	rjmp	.+40     	; 0x784 <udc_next_desc_in_iface+0x58>
     75c:	81 81       	ldd	r24, Z+1	; 0x01
     75e:	84 30       	cpi	r24, 0x04	; 4
     760:	a1 f0       	breq	.+40     	; 0x78a <udc_next_desc_in_iface+0x5e>
     762:	86 17       	cp	r24, r22
     764:	a9 f0       	breq	.+42     	; 0x790 <udc_next_desc_in_iface+0x64>
     766:	80 81       	ld	r24, Z
     768:	e8 0f       	add	r30, r24
     76a:	f1 1d       	adc	r31, r1
     76c:	e2 17       	cp	r30, r18
     76e:	f3 07       	cpc	r31, r19
     770:	a8 f3       	brcs	.-22     	; 0x75c <udc_next_desc_in_iface+0x30>
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	08 95       	ret
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	08 95       	ret
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	08 95       	ret
     784:	8e 2f       	mov	r24, r30
     786:	9f 2f       	mov	r25, r31
     788:	08 95       	ret
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	08 95       	ret
     790:	8e 2f       	mov	r24, r30
     792:	9f 2f       	mov	r25, r31
     794:	08 95       	ret

00000796 <udc_valid_address>:
     796:	80 91 f1 22 	lds	r24, 0x22F1
     79a:	8f 77       	andi	r24, 0x7F	; 127
     79c:	cd c6       	rjmp	.+3482   	; 0x1538 <udd_set_address>
     79e:	08 95       	ret

000007a0 <udc_update_iface_desc>:
     7a0:	90 91 b2 21 	lds	r25, 0x21B2
     7a4:	99 23       	and	r25, r25
     7a6:	81 f1       	breq	.+96     	; 0x808 <udc_update_iface_desc+0x68>
     7a8:	e0 91 b0 21 	lds	r30, 0x21B0
     7ac:	f0 91 b1 21 	lds	r31, 0x21B1
     7b0:	01 90       	ld	r0, Z+
     7b2:	f0 81       	ld	r31, Z
     7b4:	e0 2d       	mov	r30, r0
     7b6:	94 81       	ldd	r25, Z+4	; 0x04
     7b8:	89 17       	cp	r24, r25
     7ba:	40 f5       	brcc	.+80     	; 0x80c <udc_update_iface_desc+0x6c>
     7bc:	e0 93 ae 21 	sts	0x21AE, r30
     7c0:	f0 93 af 21 	sts	0x21AF, r31
     7c4:	22 81       	ldd	r18, Z+2	; 0x02
     7c6:	33 81       	ldd	r19, Z+3	; 0x03
     7c8:	2e 0f       	add	r18, r30
     7ca:	3f 1f       	adc	r19, r31
     7cc:	e2 17       	cp	r30, r18
     7ce:	f3 07       	cpc	r31, r19
     7d0:	f8 f4       	brcc	.+62     	; 0x810 <udc_update_iface_desc+0x70>
     7d2:	91 81       	ldd	r25, Z+1	; 0x01
     7d4:	94 30       	cpi	r25, 0x04	; 4
     7d6:	61 f4       	brne	.+24     	; 0x7f0 <udc_update_iface_desc+0x50>
     7d8:	92 81       	ldd	r25, Z+2	; 0x02
     7da:	98 13       	cpse	r25, r24
     7dc:	09 c0       	rjmp	.+18     	; 0x7f0 <udc_update_iface_desc+0x50>
     7de:	93 81       	ldd	r25, Z+3	; 0x03
     7e0:	96 13       	cpse	r25, r22
     7e2:	06 c0       	rjmp	.+12     	; 0x7f0 <udc_update_iface_desc+0x50>
     7e4:	e0 93 ae 21 	sts	0x21AE, r30
     7e8:	f0 93 af 21 	sts	0x21AF, r31
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	08 95       	ret
     7f0:	90 81       	ld	r25, Z
     7f2:	e9 0f       	add	r30, r25
     7f4:	f1 1d       	adc	r31, r1
     7f6:	e2 17       	cp	r30, r18
     7f8:	f3 07       	cpc	r31, r19
     7fa:	58 f3       	brcs	.-42     	; 0x7d2 <udc_update_iface_desc+0x32>
     7fc:	e0 93 ae 21 	sts	0x21AE, r30
     800:	f0 93 af 21 	sts	0x21AF, r31
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	08 95       	ret
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	08 95       	ret
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	08 95       	ret
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	08 95       	ret

00000814 <udc_iface_disable>:
     814:	ff 92       	push	r15
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	c8 2f       	mov	r28, r24
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	be df       	rcall	.-132    	; 0x7a0 <udc_update_iface_desc>
     824:	f8 2e       	mov	r15, r24
     826:	88 23       	and	r24, r24
     828:	79 f1       	breq	.+94     	; 0x888 <udc_iface_disable+0x74>
     82a:	a0 91 b0 21 	lds	r26, 0x21B0
     82e:	b0 91 b1 21 	lds	r27, 0x21B1
     832:	ec 2f       	mov	r30, r28
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	12 96       	adiw	r26, 0x02	; 2
     83c:	2d 91       	ld	r18, X+
     83e:	3c 91       	ld	r19, X
     840:	13 97       	sbiw	r26, 0x03	; 3
     842:	e2 0f       	add	r30, r18
     844:	f3 1f       	adc	r31, r19
     846:	00 81       	ld	r16, Z
     848:	11 81       	ldd	r17, Z+1	; 0x01
     84a:	d8 01       	movw	r26, r16
     84c:	16 96       	adiw	r26, 0x06	; 6
     84e:	ed 91       	ld	r30, X+
     850:	fc 91       	ld	r31, X
     852:	17 97       	sbiw	r26, 0x07	; 7
     854:	09 95       	icall
     856:	68 2f       	mov	r22, r24
     858:	8c 2f       	mov	r24, r28
     85a:	a2 df       	rcall	.-188    	; 0x7a0 <udc_update_iface_desc>
     85c:	f8 2e       	mov	r15, r24
     85e:	88 23       	and	r24, r24
     860:	99 f0       	breq	.+38     	; 0x888 <udc_iface_disable+0x74>
     862:	c0 91 ae 21 	lds	r28, 0x21AE
     866:	d0 91 af 21 	lds	r29, 0x21AF
     86a:	65 e0       	ldi	r22, 0x05	; 5
     86c:	ce 01       	movw	r24, r28
     86e:	5e df       	rcall	.-324    	; 0x72c <udc_next_desc_in_iface>
     870:	ec 01       	movw	r28, r24
     872:	00 97       	sbiw	r24, 0x00	; 0
     874:	19 f0       	breq	.+6      	; 0x87c <udc_iface_disable+0x68>
     876:	8a 81       	ldd	r24, Y+2	; 0x02
     878:	dc d7       	rcall	.+4024   	; 0x1832 <udd_ep_free>
     87a:	f7 cf       	rjmp	.-18     	; 0x86a <udc_iface_disable+0x56>
     87c:	d8 01       	movw	r26, r16
     87e:	12 96       	adiw	r26, 0x02	; 2
     880:	ed 91       	ld	r30, X+
     882:	fc 91       	ld	r31, X
     884:	13 97       	sbiw	r26, 0x03	; 3
     886:	09 95       	icall
     888:	8f 2d       	mov	r24, r15
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	08 95       	ret

00000896 <udc_iface_enable>:
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	18 2f       	mov	r17, r24
     89e:	80 df       	rcall	.-256    	; 0x7a0 <udc_update_iface_desc>
     8a0:	88 23       	and	r24, r24
     8a2:	39 f1       	breq	.+78     	; 0x8f2 <udc_iface_enable+0x5c>
     8a4:	c0 91 ae 21 	lds	r28, 0x21AE
     8a8:	d0 91 af 21 	lds	r29, 0x21AF
     8ac:	65 e0       	ldi	r22, 0x05	; 5
     8ae:	ce 01       	movw	r24, r28
     8b0:	3d df       	rcall	.-390    	; 0x72c <udc_next_desc_in_iface>
     8b2:	ec 01       	movw	r28, r24
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	41 f0       	breq	.+16     	; 0x8c8 <udc_iface_enable+0x32>
     8b8:	4c 81       	ldd	r20, Y+4	; 0x04
     8ba:	5d 81       	ldd	r21, Y+5	; 0x05
     8bc:	6b 81       	ldd	r22, Y+3	; 0x03
     8be:	8a 81       	ldd	r24, Y+2	; 0x02
     8c0:	52 d6       	rcall	.+3236   	; 0x1566 <udd_ep_alloc>
     8c2:	81 11       	cpse	r24, r1
     8c4:	f3 cf       	rjmp	.-26     	; 0x8ac <udc_iface_enable+0x16>
     8c6:	15 c0       	rjmp	.+42     	; 0x8f2 <udc_iface_enable+0x5c>
     8c8:	a0 91 b0 21 	lds	r26, 0x21B0
     8cc:	b0 91 b1 21 	lds	r27, 0x21B1
     8d0:	81 2f       	mov	r24, r17
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	88 0f       	add	r24, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	12 96       	adiw	r26, 0x02	; 2
     8da:	ed 91       	ld	r30, X+
     8dc:	fc 91       	ld	r31, X
     8de:	13 97       	sbiw	r26, 0x03	; 3
     8e0:	e8 0f       	add	r30, r24
     8e2:	f9 1f       	adc	r31, r25
     8e4:	01 90       	ld	r0, Z+
     8e6:	f0 81       	ld	r31, Z
     8e8:	e0 2d       	mov	r30, r0
     8ea:	01 90       	ld	r0, Z+
     8ec:	f0 81       	ld	r31, Z
     8ee:	e0 2d       	mov	r30, r0
     8f0:	09 95       	icall
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	08 95       	ret

000008fa <udc_reset>:
     8fa:	cf 93       	push	r28
     8fc:	80 91 b2 21 	lds	r24, 0x21B2
     900:	88 23       	and	r24, r24
     902:	c1 f0       	breq	.+48     	; 0x934 <udc_reset+0x3a>
     904:	e0 91 b0 21 	lds	r30, 0x21B0
     908:	f0 91 b1 21 	lds	r31, 0x21B1
     90c:	01 90       	ld	r0, Z+
     90e:	f0 81       	ld	r31, Z
     910:	e0 2d       	mov	r30, r0
     912:	84 81       	ldd	r24, Z+4	; 0x04
     914:	88 23       	and	r24, r24
     916:	71 f0       	breq	.+28     	; 0x934 <udc_reset+0x3a>
     918:	c0 e0       	ldi	r28, 0x00	; 0
     91a:	8c 2f       	mov	r24, r28
     91c:	7b df       	rcall	.-266    	; 0x814 <udc_iface_disable>
     91e:	cf 5f       	subi	r28, 0xFF	; 255
     920:	e0 91 b0 21 	lds	r30, 0x21B0
     924:	f0 91 b1 21 	lds	r31, 0x21B1
     928:	01 90       	ld	r0, Z+
     92a:	f0 81       	ld	r31, Z
     92c:	e0 2d       	mov	r30, r0
     92e:	84 81       	ldd	r24, Z+4	; 0x04
     930:	c8 17       	cp	r28, r24
     932:	98 f3       	brcs	.-26     	; 0x91a <udc_reset+0x20>
     934:	10 92 b2 21 	sts	0x21B2, r1
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	80 93 b3 21 	sts	0x21B3, r24
     940:	90 93 b4 21 	sts	0x21B4, r25
     944:	cf 91       	pop	r28
     946:	08 95       	ret

00000948 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     948:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     94a:	80 91 b2 21 	lds	r24, 0x21B2
     94e:	88 23       	and	r24, r24
     950:	41 f1       	breq	.+80     	; 0x9a2 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     952:	e0 91 b0 21 	lds	r30, 0x21B0
     956:	f0 91 b1 21 	lds	r31, 0x21B1
     95a:	a0 81       	ld	r26, Z
     95c:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     95e:	14 96       	adiw	r26, 0x04	; 4
     960:	8c 91       	ld	r24, X
     962:	88 23       	and	r24, r24
     964:	f1 f0       	breq	.+60     	; 0x9a2 <udc_sof_notify+0x5a>
     966:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     968:	8c 2f       	mov	r24, r28
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	02 80       	ldd	r0, Z+2	; 0x02
     972:	f3 81       	ldd	r31, Z+3	; 0x03
     974:	e0 2d       	mov	r30, r0
     976:	e8 0f       	add	r30, r24
     978:	f9 1f       	adc	r31, r25
     97a:	01 90       	ld	r0, Z+
     97c:	f0 81       	ld	r31, Z
     97e:	e0 2d       	mov	r30, r0
     980:	00 84       	ldd	r0, Z+8	; 0x08
     982:	f1 85       	ldd	r31, Z+9	; 0x09
     984:	e0 2d       	mov	r30, r0
     986:	30 97       	sbiw	r30, 0x00	; 0
     988:	09 f0       	breq	.+2      	; 0x98c <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     98a:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     98c:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     98e:	e0 91 b0 21 	lds	r30, 0x21B0
     992:	f0 91 b1 21 	lds	r31, 0x21B1
     996:	a0 81       	ld	r26, Z
     998:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     99a:	14 96       	adiw	r26, 0x04	; 4
     99c:	8c 91       	ld	r24, X
     99e:	c8 17       	cp	r28, r24
     9a0:	18 f3       	brcs	.-58     	; 0x968 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     9a2:	cf 91       	pop	r28
     9a4:	08 95       	ret

000009a6 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     9b2:	10 92 f9 22 	sts	0x22F9, r1
     9b6:	10 92 fa 22 	sts	0x22FA, r1
	udd_g_ctrlreq.callback = NULL;
     9ba:	10 92 fb 22 	sts	0x22FB, r1
     9be:	10 92 fc 22 	sts	0x22FC, r1
	udd_g_ctrlreq.over_under_run = NULL;
     9c2:	10 92 fd 22 	sts	0x22FD, r1
     9c6:	10 92 fe 22 	sts	0x22FE, r1

	if (Udd_setup_is_in()) {
     9ca:	20 91 ef 22 	lds	r18, 0x22EF
     9ce:	22 23       	and	r18, r18
     9d0:	0c f0       	brlt	.+2      	; 0x9d4 <udc_process_setup+0x2e>
     9d2:	65 c2       	rjmp	.+1226   	; 0xe9e <udc_process_setup+0x4f8>
		if (udd_g_ctrlreq.req.wLength == 0) {
     9d4:	80 91 f5 22 	lds	r24, 0x22F5
     9d8:	90 91 f6 22 	lds	r25, 0x22F6
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	09 f0       	breq	.+2      	; 0x9e2 <udc_process_setup+0x3c>
     9e0:	63 c2       	rjmp	.+1222   	; 0xea8 <udc_process_setup+0x502>
     9e2:	59 c2       	rjmp	.+1202   	; 0xe96 <udc_process_setup+0x4f0>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     9e4:	2f 71       	andi	r18, 0x1F	; 31
     9e6:	09 f0       	breq	.+2      	; 0x9ea <udc_process_setup+0x44>
     9e8:	8b c0       	rjmp	.+278    	; 0xb00 <udc_process_setup+0x15a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     9ea:	30 91 f0 22 	lds	r19, 0x22F0
     9ee:	36 30       	cpi	r19, 0x06	; 6
     9f0:	81 f0       	breq	.+32     	; 0xa12 <udc_process_setup+0x6c>
     9f2:	38 30       	cpi	r19, 0x08	; 8
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <udc_process_setup+0x52>
     9f6:	79 c0       	rjmp	.+242    	; 0xaea <udc_process_setup+0x144>
     9f8:	31 11       	cpse	r19, r1
     9fa:	82 c0       	rjmp	.+260    	; 0xb00 <udc_process_setup+0x15a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     9fc:	02 97       	sbiw	r24, 0x02	; 2
     9fe:	39 f4       	brne	.+14     	; 0xa0e <udc_process_setup+0x68>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     a00:	62 e0       	ldi	r22, 0x02	; 2
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	83 eb       	ldi	r24, 0xB3	; 179
     a06:	91 e2       	ldi	r25, 0x21	; 33
     a08:	a5 d5       	rcall	.+2890   	; 0x1554 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     a0a:	01 e0       	ldi	r16, 0x01	; 1
     a0c:	c7 c1       	rjmp	.+910    	; 0xd9c <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     a0e:	00 e0       	ldi	r16, 0x00	; 0
     a10:	c5 c1       	rjmp	.+906    	; 0xd9c <udc_process_setup+0x3f6>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     a12:	20 91 f1 22 	lds	r18, 0x22F1
     a16:	30 91 f2 22 	lds	r19, 0x22F2

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     a1a:	83 2f       	mov	r24, r19
     a1c:	99 27       	eor	r25, r25
     a1e:	82 30       	cpi	r24, 0x02	; 2
     a20:	91 05       	cpc	r25, r1
     a22:	99 f0       	breq	.+38     	; 0xa4a <udc_process_setup+0xa4>
     a24:	1c f4       	brge	.+6      	; 0xa2c <udc_process_setup+0x86>
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	39 f0       	breq	.+14     	; 0xa38 <udc_process_setup+0x92>
     a2a:	55 c0       	rjmp	.+170    	; 0xad6 <udc_process_setup+0x130>
     a2c:	83 30       	cpi	r24, 0x03	; 3
     a2e:	91 05       	cpc	r25, r1
     a30:	d1 f1       	breq	.+116    	; 0xaa6 <udc_process_setup+0x100>
     a32:	0f 97       	sbiw	r24, 0x0f	; 15
     a34:	59 f1       	breq	.+86     	; 0xa8c <udc_process_setup+0xe6>
     a36:	4f c0       	rjmp	.+158    	; 0xad6 <udc_process_setup+0x130>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     a38:	80 91 14 20 	lds	r24, 0x2014
     a3c:	90 91 15 20 	lds	r25, 0x2015
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     a40:	dc 01       	movw	r26, r24
     a42:	6c 91       	ld	r22, X
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	86 d5       	rcall	.+2828   	; 0x1554 <udd_set_setup_payload>
     a48:	35 c0       	rjmp	.+106    	; 0xab4 <udc_process_setup+0x10e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     a4a:	e0 91 14 20 	lds	r30, 0x2014
     a4e:	f0 91 15 20 	lds	r31, 0x2015
     a52:	81 89       	ldd	r24, Z+17	; 0x11
     a54:	28 17       	cp	r18, r24
     a56:	08 f0       	brcs	.+2      	; 0xa5a <udc_process_setup+0xb4>
     a58:	40 c0       	rjmp	.+128    	; 0xada <udc_process_setup+0x134>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     a5a:	c9 01       	movw	r24, r18
     a5c:	99 27       	eor	r25, r25
     a5e:	88 0f       	add	r24, r24
     a60:	99 1f       	adc	r25, r25
     a62:	88 0f       	add	r24, r24
     a64:	99 1f       	adc	r25, r25
     a66:	e0 91 16 20 	lds	r30, 0x2016
     a6a:	f0 91 17 20 	lds	r31, 0x2017
     a6e:	e8 0f       	add	r30, r24
     a70:	f9 1f       	adc	r31, r25
     a72:	80 81       	ld	r24, Z
     a74:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     a76:	fc 01       	movw	r30, r24
     a78:	62 81       	ldd	r22, Z+2	; 0x02
     a7a:	73 81       	ldd	r23, Z+3	; 0x03
     a7c:	6b d5       	rcall	.+2774   	; 0x1554 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     a7e:	e0 91 f7 22 	lds	r30, 0x22F7
     a82:	f0 91 f8 22 	lds	r31, 0x22F8
     a86:	82 e0       	ldi	r24, 0x02	; 2
     a88:	81 83       	std	Z+1, r24	; 0x01
     a8a:	14 c0       	rjmp	.+40     	; 0xab4 <udc_process_setup+0x10e>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     a8c:	80 91 18 20 	lds	r24, 0x2018
     a90:	90 91 19 20 	lds	r25, 0x2019
     a94:	00 97       	sbiw	r24, 0x00	; 0
     a96:	19 f1       	breq	.+70     	; 0xade <udc_process_setup+0x138>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     a98:	dc 01       	movw	r26, r24
     a9a:	12 96       	adiw	r26, 0x02	; 2
     a9c:	6d 91       	ld	r22, X+
     a9e:	7c 91       	ld	r23, X
     aa0:	13 97       	sbiw	r26, 0x03	; 3
     aa2:	58 d5       	rcall	.+2736   	; 0x1554 <udd_set_setup_payload>
     aa4:	07 c0       	rjmp	.+14     	; 0xab4 <udc_process_setup+0x10e>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     aa6:	21 11       	cpse	r18, r1
     aa8:	1c c0       	rjmp	.+56     	; 0xae2 <udc_process_setup+0x13c>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     aaa:	64 e0       	ldi	r22, 0x04	; 4
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	88 e7       	ldi	r24, 0x78	; 120
     ab0:	90 e2       	ldi	r25, 0x20	; 32
     ab2:	50 d5       	rcall	.+2720   	; 0x1554 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     ab4:	80 91 f5 22 	lds	r24, 0x22F5
     ab8:	90 91 f6 22 	lds	r25, 0x22F6
     abc:	20 91 f9 22 	lds	r18, 0x22F9
     ac0:	30 91 fa 22 	lds	r19, 0x22FA
     ac4:	82 17       	cp	r24, r18
     ac6:	93 07       	cpc	r25, r19
     ac8:	70 f4       	brcc	.+28     	; 0xae6 <udc_process_setup+0x140>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     aca:	80 93 f9 22 	sts	0x22F9, r24
     ace:	90 93 fa 22 	sts	0x22FA, r25
	}
	return true;
     ad2:	01 e0       	ldi	r16, 0x01	; 1
     ad4:	63 c1       	rjmp	.+710    	; 0xd9c <udc_process_setup+0x3f6>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     ad6:	00 e0       	ldi	r16, 0x00	; 0
     ad8:	61 c1       	rjmp	.+706    	; 0xd9c <udc_process_setup+0x3f6>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     ada:	00 e0       	ldi	r16, 0x00	; 0
     adc:	5f c1       	rjmp	.+702    	; 0xd9c <udc_process_setup+0x3f6>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     ade:	00 e0       	ldi	r16, 0x00	; 0
     ae0:	5d c1       	rjmp	.+698    	; 0xd9c <udc_process_setup+0x3f6>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     ae2:	00 e0       	ldi	r16, 0x00	; 0
     ae4:	5b c1       	rjmp	.+694    	; 0xd9c <udc_process_setup+0x3f6>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     ae6:	01 e0       	ldi	r16, 0x01	; 1
     ae8:	59 c1       	rjmp	.+690    	; 0xd9c <udc_process_setup+0x3f6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	39 f4       	brne	.+14     	; 0xafc <udc_process_setup+0x156>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	82 eb       	ldi	r24, 0xB2	; 178
     af4:	91 e2       	ldi	r25, 0x21	; 33
     af6:	2e d5       	rcall	.+2652   	; 0x1554 <udd_set_setup_payload>
	return true;
     af8:	01 e0       	ldi	r16, 0x01	; 1
     afa:	50 c1       	rjmp	.+672    	; 0xd9c <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     afc:	00 e0       	ldi	r16, 0x00	; 0
     afe:	4e c1       	rjmp	.+668    	; 0xd9c <udc_process_setup+0x3f6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     b00:	21 30       	cpi	r18, 0x01	; 1
     b02:	09 f0       	breq	.+2      	; 0xb06 <udc_process_setup+0x160>
     b04:	3f c0       	rjmp	.+126    	; 0xb84 <udc_process_setup+0x1de>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     b06:	30 91 f0 22 	lds	r19, 0x22F0
     b0a:	3a 30       	cpi	r19, 0x0A	; 10
     b0c:	d9 f5       	brne	.+118    	; 0xb84 <udc_process_setup+0x1de>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	99 f5       	brne	.+102    	; 0xb78 <udc_process_setup+0x1d2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     b12:	80 91 b2 21 	lds	r24, 0x21B2
     b16:	88 23       	and	r24, r24
     b18:	89 f1       	breq	.+98     	; 0xb7c <udc_process_setup+0x1d6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     b1a:	c0 91 f3 22 	lds	r28, 0x22F3
     b1e:	d0 91 f4 22 	lds	r29, 0x22F4
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     b22:	e0 90 b0 21 	lds	r14, 0x21B0
     b26:	f0 90 b1 21 	lds	r15, 0x21B1
     b2a:	d7 01       	movw	r26, r14
     b2c:	ed 91       	ld	r30, X+
     b2e:	fc 91       	ld	r31, X
     b30:	84 81       	ldd	r24, Z+4	; 0x04
     b32:	c8 17       	cp	r28, r24
     b34:	28 f5       	brcc	.+74     	; 0xb80 <udc_process_setup+0x1da>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	8c 2f       	mov	r24, r28
     b3a:	32 de       	rcall	.-924    	; 0x7a0 <udc_update_iface_desc>
     b3c:	08 2f       	mov	r16, r24
     b3e:	88 23       	and	r24, r24
     b40:	09 f4       	brne	.+2      	; 0xb44 <udc_process_setup+0x19e>
     b42:	2c c1       	rjmp	.+600    	; 0xd9c <udc_process_setup+0x3f6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     b44:	ce 01       	movw	r24, r28
     b46:	99 27       	eor	r25, r25
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	d7 01       	movw	r26, r14
     b4e:	12 96       	adiw	r26, 0x02	; 2
     b50:	ed 91       	ld	r30, X+
     b52:	fc 91       	ld	r31, X
     b54:	13 97       	sbiw	r26, 0x03	; 3
     b56:	e8 0f       	add	r30, r24
     b58:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     b5a:	01 90       	ld	r0, Z+
     b5c:	f0 81       	ld	r31, Z
     b5e:	e0 2d       	mov	r30, r0
     b60:	06 80       	ldd	r0, Z+6	; 0x06
     b62:	f7 81       	ldd	r31, Z+7	; 0x07
     b64:	e0 2d       	mov	r30, r0
     b66:	09 95       	icall
     b68:	80 93 ad 21 	sts	0x21AD, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	8d ea       	ldi	r24, 0xAD	; 173
     b72:	91 e2       	ldi	r25, 0x21	; 33
     b74:	ef d4       	rcall	.+2526   	; 0x1554 <udd_set_setup_payload>
     b76:	12 c1       	rjmp	.+548    	; 0xd9c <udc_process_setup+0x3f6>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     b78:	00 e0       	ldi	r16, 0x00	; 0
     b7a:	10 c1       	rjmp	.+544    	; 0xd9c <udc_process_setup+0x3f6>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     b7c:	00 e0       	ldi	r16, 0x00	; 0
     b7e:	0e c1       	rjmp	.+540    	; 0xd9c <udc_process_setup+0x3f6>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     b80:	00 e0       	ldi	r16, 0x00	; 0
     b82:	0c c1       	rjmp	.+536    	; 0xd9c <udc_process_setup+0x3f6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	09 f0       	breq	.+2      	; 0xb8a <udc_process_setup+0x1e4>
     b88:	0b c1       	rjmp	.+534    	; 0xda0 <udc_process_setup+0x3fa>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     b8a:	20 91 f0 22 	lds	r18, 0x22F0
     b8e:	21 11       	cpse	r18, r1
     b90:	00 c1       	rjmp	.+512    	; 0xd92 <udc_process_setup+0x3ec>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     b92:	02 97       	sbiw	r24, 0x02	; 2
     b94:	79 f4       	brne	.+30     	; 0xbb4 <udc_process_setup+0x20e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     b96:	80 91 f3 22 	lds	r24, 0x22F3
     b9a:	46 d5       	rcall	.+2700   	; 0x1628 <udd_ep_is_halted>
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	80 93 ab 21 	sts	0x21AB, r24
     ba2:	90 93 ac 21 	sts	0x21AC, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     ba6:	62 e0       	ldi	r22, 0x02	; 2
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	8b ea       	ldi	r24, 0xAB	; 171
     bac:	91 e2       	ldi	r25, 0x21	; 33
     bae:	d2 d4       	rcall	.+2468   	; 0x1554 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     bb0:	01 e0       	ldi	r16, 0x01	; 1
     bb2:	f4 c0       	rjmp	.+488    	; 0xd9c <udc_process_setup+0x3f6>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     bb4:	00 e0       	ldi	r16, 0x00	; 0
     bb6:	f2 c0       	rjmp	.+484    	; 0xd9c <udc_process_setup+0x3f6>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     bb8:	2f 71       	andi	r18, 0x1F	; 31
     bba:	09 f0       	breq	.+2      	; 0xbbe <udc_process_setup+0x218>
     bbc:	90 c0       	rjmp	.+288    	; 0xcde <udc_process_setup+0x338>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     bbe:	80 91 f0 22 	lds	r24, 0x22F0
     bc2:	83 30       	cpi	r24, 0x03	; 3
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <udc_process_setup+0x222>
     bc6:	e7 c0       	rjmp	.+462    	; 0xd96 <udc_process_setup+0x3f0>
     bc8:	18 f4       	brcc	.+6      	; 0xbd0 <udc_process_setup+0x22a>
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	b1 f0       	breq	.+44     	; 0xbfa <udc_process_setup+0x254>
     bce:	87 c0       	rjmp	.+270    	; 0xcde <udc_process_setup+0x338>
     bd0:	85 30       	cpi	r24, 0x05	; 5
     bd2:	19 f0       	breq	.+6      	; 0xbda <udc_process_setup+0x234>
     bd4:	89 30       	cpi	r24, 0x09	; 9
     bd6:	61 f1       	breq	.+88     	; 0xc30 <udc_process_setup+0x28a>
     bd8:	82 c0       	rjmp	.+260    	; 0xcde <udc_process_setup+0x338>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     bda:	80 91 f5 22 	lds	r24, 0x22F5
     bde:	90 91 f6 22 	lds	r25, 0x22F6
     be2:	89 2b       	or	r24, r25
     be4:	41 f4       	brne	.+16     	; 0xbf6 <udc_process_setup+0x250>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     be6:	8b ec       	ldi	r24, 0xCB	; 203
     be8:	93 e0       	ldi	r25, 0x03	; 3
     bea:	80 93 fb 22 	sts	0x22FB, r24
     bee:	90 93 fc 22 	sts	0x22FC, r25
	return true;
     bf2:	01 e0       	ldi	r16, 0x01	; 1
     bf4:	d3 c0       	rjmp	.+422    	; 0xd9c <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     bf6:	00 e0       	ldi	r16, 0x00	; 0
     bf8:	d1 c0       	rjmp	.+418    	; 0xd9c <udc_process_setup+0x3f6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     bfa:	80 91 f5 22 	lds	r24, 0x22F5
     bfe:	90 91 f6 22 	lds	r25, 0x22F6
     c02:	89 2b       	or	r24, r25
     c04:	89 f4       	brne	.+34     	; 0xc28 <udc_process_setup+0x282>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     c06:	80 91 f1 22 	lds	r24, 0x22F1
     c0a:	90 91 f2 22 	lds	r25, 0x22F2
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	69 f4       	brne	.+26     	; 0xc2c <udc_process_setup+0x286>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     c12:	80 91 b3 21 	lds	r24, 0x21B3
     c16:	90 91 b4 21 	lds	r25, 0x21B4
     c1a:	8d 7f       	andi	r24, 0xFD	; 253
     c1c:	80 93 b3 21 	sts	0x21B3, r24
     c20:	90 93 b4 21 	sts	0x21B4, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     c24:	01 e0       	ldi	r16, 0x01	; 1
     c26:	ba c0       	rjmp	.+372    	; 0xd9c <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     c28:	00 e0       	ldi	r16, 0x00	; 0
     c2a:	b8 c0       	rjmp	.+368    	; 0xd9c <udc_process_setup+0x3f6>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     c2c:	00 e0       	ldi	r16, 0x00	; 0
     c2e:	b6 c0       	rjmp	.+364    	; 0xd9c <udc_process_setup+0x3f6>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     c30:	80 91 f5 22 	lds	r24, 0x22F5
     c34:	90 91 f6 22 	lds	r25, 0x22F6
     c38:	89 2b       	or	r24, r25
     c3a:	09 f0       	breq	.+2      	; 0xc3e <udc_process_setup+0x298>
     c3c:	46 c0       	rjmp	.+140    	; 0xcca <udc_process_setup+0x324>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     c3e:	7f d4       	rcall	.+2302   	; 0x153e <udd_getaddress>
     c40:	88 23       	and	r24, r24
     c42:	09 f4       	brne	.+2      	; 0xc46 <udc_process_setup+0x2a0>
     c44:	44 c0       	rjmp	.+136    	; 0xcce <udc_process_setup+0x328>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     c46:	20 91 f1 22 	lds	r18, 0x22F1
     c4a:	30 91 f2 22 	lds	r19, 0x22F2
     c4e:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     c50:	e0 91 14 20 	lds	r30, 0x2014
     c54:	f0 91 15 20 	lds	r31, 0x2015
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     c58:	81 89       	ldd	r24, Z+17	; 0x11
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	82 17       	cp	r24, r18
     c5e:	93 07       	cpc	r25, r19
     c60:	c0 f1       	brcs	.+112    	; 0xcd2 <udc_process_setup+0x32c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     c62:	4b de       	rcall	.-874    	; 0x8fa <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     c64:	80 91 f1 22 	lds	r24, 0x22F1
     c68:	90 91 f2 22 	lds	r25, 0x22F2
     c6c:	80 93 b2 21 	sts	0x21B2, r24
	if (udc_num_configuration == 0) {
     c70:	88 23       	and	r24, r24
     c72:	89 f1       	breq	.+98     	; 0xcd6 <udc_process_setup+0x330>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     c74:	99 27       	eor	r25, r25
     c76:	81 50       	subi	r24, 0x01	; 1
     c78:	90 4c       	sbci	r25, 0xC0	; 192
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	e0 91 16 20 	lds	r30, 0x2016
     c86:	f0 91 17 20 	lds	r31, 0x2017
     c8a:	e8 0f       	add	r30, r24
     c8c:	f9 1f       	adc	r31, r25
     c8e:	e0 93 b0 21 	sts	0x21B0, r30
     c92:	f0 93 b1 21 	sts	0x21B1, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c96:	01 90       	ld	r0, Z+
     c98:	f0 81       	ld	r31, Z
     c9a:	e0 2d       	mov	r30, r0
     c9c:	84 81       	ldd	r24, Z+4	; 0x04
     c9e:	88 23       	and	r24, r24
     ca0:	e1 f0       	breq	.+56     	; 0xcda <udc_process_setup+0x334>
     ca2:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	8c 2f       	mov	r24, r28
     ca8:	f6 dd       	rcall	.-1044   	; 0x896 <udc_iface_enable>
     caa:	08 2f       	mov	r16, r24
     cac:	88 23       	and	r24, r24
     cae:	09 f4       	brne	.+2      	; 0xcb2 <udc_process_setup+0x30c>
     cb0:	75 c0       	rjmp	.+234    	; 0xd9c <udc_process_setup+0x3f6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     cb2:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     cb4:	e0 91 b0 21 	lds	r30, 0x21B0
     cb8:	f0 91 b1 21 	lds	r31, 0x21B1
     cbc:	01 90       	ld	r0, Z+
     cbe:	f0 81       	ld	r31, Z
     cc0:	e0 2d       	mov	r30, r0
     cc2:	84 81       	ldd	r24, Z+4	; 0x04
     cc4:	c8 17       	cp	r28, r24
     cc6:	70 f3       	brcs	.-36     	; 0xca4 <udc_process_setup+0x2fe>
     cc8:	69 c0       	rjmp	.+210    	; 0xd9c <udc_process_setup+0x3f6>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     cca:	00 e0       	ldi	r16, 0x00	; 0
     ccc:	67 c0       	rjmp	.+206    	; 0xd9c <udc_process_setup+0x3f6>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     cce:	00 e0       	ldi	r16, 0x00	; 0
     cd0:	65 c0       	rjmp	.+202    	; 0xd9c <udc_process_setup+0x3f6>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     cd2:	00 e0       	ldi	r16, 0x00	; 0
     cd4:	63 c0       	rjmp	.+198    	; 0xd9c <udc_process_setup+0x3f6>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     cd6:	01 e0       	ldi	r16, 0x01	; 1
     cd8:	61 c0       	rjmp	.+194    	; 0xd9c <udc_process_setup+0x3f6>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     cda:	01 e0       	ldi	r16, 0x01	; 1
     cdc:	5f c0       	rjmp	.+190    	; 0xd9c <udc_process_setup+0x3f6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     cde:	21 30       	cpi	r18, 0x01	; 1
     ce0:	09 f5       	brne	.+66     	; 0xd24 <udc_process_setup+0x37e>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     ce2:	80 91 f0 22 	lds	r24, 0x22F0
     ce6:	8b 30       	cpi	r24, 0x0B	; 11
     ce8:	e9 f4       	brne	.+58     	; 0xd24 <udc_process_setup+0x37e>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     cea:	80 91 f5 22 	lds	r24, 0x22F5
     cee:	90 91 f6 22 	lds	r25, 0x22F6
     cf2:	89 2b       	or	r24, r25
     cf4:	99 f4       	brne	.+38     	; 0xd1c <udc_process_setup+0x376>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     cf6:	80 91 b2 21 	lds	r24, 0x21B2
     cfa:	88 23       	and	r24, r24
     cfc:	89 f0       	breq	.+34     	; 0xd20 <udc_process_setup+0x37a>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     cfe:	c0 91 f3 22 	lds	r28, 0x22F3
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     d02:	d0 91 f1 22 	lds	r29, 0x22F1

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     d06:	8c 2f       	mov	r24, r28
     d08:	85 dd       	rcall	.-1270   	; 0x814 <udc_iface_disable>
     d0a:	08 2f       	mov	r16, r24
     d0c:	88 23       	and	r24, r24
     d0e:	09 f4       	brne	.+2      	; 0xd12 <udc_process_setup+0x36c>
     d10:	45 c0       	rjmp	.+138    	; 0xd9c <udc_process_setup+0x3f6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     d12:	6d 2f       	mov	r22, r29
     d14:	8c 2f       	mov	r24, r28
     d16:	bf dd       	rcall	.-1154   	; 0x896 <udc_iface_enable>
     d18:	08 2f       	mov	r16, r24
     d1a:	40 c0       	rjmp	.+128    	; 0xd9c <udc_process_setup+0x3f6>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     d1c:	00 e0       	ldi	r16, 0x00	; 0
     d1e:	3e c0       	rjmp	.+124    	; 0xd9c <udc_process_setup+0x3f6>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     d20:	00 e0       	ldi	r16, 0x00	; 0
     d22:	3c c0       	rjmp	.+120    	; 0xd9c <udc_process_setup+0x3f6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     d24:	22 30       	cpi	r18, 0x02	; 2
     d26:	09 f0       	breq	.+2      	; 0xd2a <udc_process_setup+0x384>
     d28:	3b c0       	rjmp	.+118    	; 0xda0 <udc_process_setup+0x3fa>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     d2a:	80 91 f0 22 	lds	r24, 0x22F0
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	19 f0       	breq	.+6      	; 0xd38 <udc_process_setup+0x392>
     d32:	83 30       	cpi	r24, 0x03	; 3
     d34:	b1 f0       	breq	.+44     	; 0xd62 <udc_process_setup+0x3bc>
     d36:	31 c0       	rjmp	.+98     	; 0xd9a <udc_process_setup+0x3f4>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     d38:	80 91 f5 22 	lds	r24, 0x22F5
     d3c:	90 91 f6 22 	lds	r25, 0x22F6
     d40:	89 2b       	or	r24, r25
     d42:	59 f4       	brne	.+22     	; 0xd5a <udc_process_setup+0x3b4>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     d44:	80 91 f1 22 	lds	r24, 0x22F1
     d48:	90 91 f2 22 	lds	r25, 0x22F2
     d4c:	89 2b       	or	r24, r25
     d4e:	39 f4       	brne	.+14     	; 0xd5e <udc_process_setup+0x3b8>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     d50:	80 91 f3 22 	lds	r24, 0x22F3
     d54:	84 d4       	rcall	.+2312   	; 0x165e <udd_ep_clear_halt>
     d56:	08 2f       	mov	r16, r24
     d58:	21 c0       	rjmp	.+66     	; 0xd9c <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     d5a:	00 e0       	ldi	r16, 0x00	; 0
     d5c:	1f c0       	rjmp	.+62     	; 0xd9c <udc_process_setup+0x3f6>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     d5e:	00 e0       	ldi	r16, 0x00	; 0
     d60:	1d c0       	rjmp	.+58     	; 0xd9c <udc_process_setup+0x3f6>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     d62:	80 91 f5 22 	lds	r24, 0x22F5
     d66:	90 91 f6 22 	lds	r25, 0x22F6
     d6a:	89 2b       	or	r24, r25
     d6c:	71 f4       	brne	.+28     	; 0xd8a <udc_process_setup+0x3e4>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     d6e:	80 91 f1 22 	lds	r24, 0x22F1
     d72:	90 91 f2 22 	lds	r25, 0x22F2
     d76:	89 2b       	or	r24, r25
     d78:	51 f4       	brne	.+20     	; 0xd8e <udc_process_setup+0x3e8>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     d7a:	c3 ef       	ldi	r28, 0xF3	; 243
     d7c:	d2 e2       	ldi	r29, 0x22	; 34
     d7e:	88 81       	ld	r24, Y
     d80:	1f d5       	rcall	.+2622   	; 0x17c0 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     d82:	88 81       	ld	r24, Y
     d84:	73 d5       	rcall	.+2790   	; 0x186c <udd_ep_set_halt>
     d86:	08 2f       	mov	r16, r24
     d88:	09 c0       	rjmp	.+18     	; 0xd9c <udc_process_setup+0x3f6>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     d8a:	00 e0       	ldi	r16, 0x00	; 0
     d8c:	07 c0       	rjmp	.+14     	; 0xd9c <udc_process_setup+0x3f6>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     d8e:	00 e0       	ldi	r16, 0x00	; 0
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <udc_process_setup+0x3f6>
				break;
			}
		}
#endif
	}
	return false;
     d92:	00 e0       	ldi	r16, 0x00	; 0
     d94:	03 c0       	rjmp	.+6      	; 0xd9c <udc_process_setup+0x3f6>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     d96:	00 e0       	ldi	r16, 0x00	; 0
     d98:	01 c0       	rjmp	.+2      	; 0xd9c <udc_process_setup+0x3f6>
				break;
			}
		}
#endif
	}
	return false;
     d9a:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     d9c:	01 11       	cpse	r16, r1
     d9e:	89 c0       	rjmp	.+274    	; 0xeb2 <udc_process_setup+0x50c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     da0:	80 91 ef 22 	lds	r24, 0x22EF
     da4:	8f 71       	andi	r24, 0x1F	; 31
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	c1 f5       	brne	.+112    	; 0xe1a <udc_process_setup+0x474>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     daa:	80 91 b2 21 	lds	r24, 0x21B2
     dae:	88 23       	and	r24, r24
     db0:	a1 f1       	breq	.+104    	; 0xe1a <udc_process_setup+0x474>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     db2:	c0 91 f3 22 	lds	r28, 0x22F3
     db6:	d0 91 f4 22 	lds	r29, 0x22F4
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     dba:	00 91 b0 21 	lds	r16, 0x21B0
     dbe:	10 91 b1 21 	lds	r17, 0x21B1
     dc2:	d8 01       	movw	r26, r16
     dc4:	ed 91       	ld	r30, X+
     dc6:	fc 91       	ld	r31, X
     dc8:	84 81       	ldd	r24, Z+4	; 0x04
     dca:	c8 17       	cp	r28, r24
     dcc:	30 f5       	brcc	.+76     	; 0xe1a <udc_process_setup+0x474>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	8c 2f       	mov	r24, r28
     dd2:	e6 dc       	rcall	.-1588   	; 0x7a0 <udc_update_iface_desc>
     dd4:	88 23       	and	r24, r24
     dd6:	09 f1       	breq	.+66     	; 0xe1a <udc_process_setup+0x474>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     dd8:	ce 01       	movw	r24, r28
     dda:	99 27       	eor	r25, r25
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	d8 01       	movw	r26, r16
     de2:	12 96       	adiw	r26, 0x02	; 2
     de4:	ed 91       	ld	r30, X+
     de6:	fc 91       	ld	r31, X
     de8:	13 97       	sbiw	r26, 0x03	; 3
     dea:	e8 0f       	add	r30, r24
     dec:	f9 1f       	adc	r31, r25
     dee:	00 81       	ld	r16, Z
     df0:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     df2:	d8 01       	movw	r26, r16
     df4:	16 96       	adiw	r26, 0x06	; 6
     df6:	ed 91       	ld	r30, X+
     df8:	fc 91       	ld	r31, X
     dfa:	17 97       	sbiw	r26, 0x07	; 7
     dfc:	09 95       	icall
     dfe:	68 2f       	mov	r22, r24
     e00:	8c 2f       	mov	r24, r28
     e02:	ce dc       	rcall	.-1636   	; 0x7a0 <udc_update_iface_desc>
     e04:	88 23       	and	r24, r24
     e06:	49 f0       	breq	.+18     	; 0xe1a <udc_process_setup+0x474>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     e08:	d8 01       	movw	r26, r16
     e0a:	14 96       	adiw	r26, 0x04	; 4
     e0c:	ed 91       	ld	r30, X+
     e0e:	fc 91       	ld	r31, X
     e10:	15 97       	sbiw	r26, 0x05	; 5
     e12:	09 95       	icall
     e14:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     e16:	81 11       	cpse	r24, r1
     e18:	4c c0       	rjmp	.+152    	; 0xeb2 <udc_process_setup+0x50c>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     e1a:	80 91 ef 22 	lds	r24, 0x22EF
     e1e:	8f 71       	andi	r24, 0x1F	; 31
     e20:	82 30       	cpi	r24, 0x02	; 2
     e22:	d9 f5       	brne	.+118    	; 0xe9a <udc_process_setup+0x4f4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     e24:	80 91 b2 21 	lds	r24, 0x21B2
     e28:	88 23       	and	r24, r24
     e2a:	89 f1       	breq	.+98     	; 0xe8e <udc_process_setup+0x4e8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e2c:	e0 91 b0 21 	lds	r30, 0x21B0
     e30:	f0 91 b1 21 	lds	r31, 0x21B1
     e34:	a0 81       	ld	r26, Z
     e36:	b1 81       	ldd	r27, Z+1	; 0x01
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	8c 91       	ld	r24, X
     e3c:	88 23       	and	r24, r24
     e3e:	49 f1       	breq	.+82     	; 0xe92 <udc_process_setup+0x4ec>
     e40:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     e42:	21 2f       	mov	r18, r17
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	22 0f       	add	r18, r18
     e48:	33 1f       	adc	r19, r19
     e4a:	02 80       	ldd	r0, Z+2	; 0x02
     e4c:	f3 81       	ldd	r31, Z+3	; 0x03
     e4e:	e0 2d       	mov	r30, r0
     e50:	e2 0f       	add	r30, r18
     e52:	f3 1f       	adc	r31, r19
     e54:	c0 81       	ld	r28, Z
     e56:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     e58:	ee 81       	ldd	r30, Y+6	; 0x06
     e5a:	ff 81       	ldd	r31, Y+7	; 0x07
     e5c:	09 95       	icall
     e5e:	68 2f       	mov	r22, r24
     e60:	81 2f       	mov	r24, r17
     e62:	9e dc       	rcall	.-1732   	; 0x7a0 <udc_update_iface_desc>
     e64:	08 2f       	mov	r16, r24
     e66:	88 23       	and	r24, r24
     e68:	21 f1       	breq	.+72     	; 0xeb2 <udc_process_setup+0x50c>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     e6a:	ec 81       	ldd	r30, Y+4	; 0x04
     e6c:	fd 81       	ldd	r31, Y+5	; 0x05
     e6e:	09 95       	icall
     e70:	08 2f       	mov	r16, r24
     e72:	81 11       	cpse	r24, r1
     e74:	1e c0       	rjmp	.+60     	; 0xeb2 <udc_process_setup+0x50c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     e76:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e78:	e0 91 b0 21 	lds	r30, 0x21B0
     e7c:	f0 91 b1 21 	lds	r31, 0x21B1
     e80:	a0 81       	ld	r26, Z
     e82:	b1 81       	ldd	r27, Z+1	; 0x01
     e84:	14 96       	adiw	r26, 0x04	; 4
     e86:	8c 91       	ld	r24, X
     e88:	18 17       	cp	r17, r24
     e8a:	d8 f2       	brcs	.-74     	; 0xe42 <udc_process_setup+0x49c>
     e8c:	12 c0       	rjmp	.+36     	; 0xeb2 <udc_process_setup+0x50c>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     e8e:	00 e0       	ldi	r16, 0x00	; 0
     e90:	10 c0       	rjmp	.+32     	; 0xeb2 <udc_process_setup+0x50c>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     e92:	00 e0       	ldi	r16, 0x00	; 0
     e94:	0e c0       	rjmp	.+28     	; 0xeb2 <udc_process_setup+0x50c>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
     e96:	00 e0       	ldi	r16, 0x00	; 0
     e98:	0c c0       	rjmp	.+24     	; 0xeb2 <udc_process_setup+0x50c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     e9a:	00 e0       	ldi	r16, 0x00	; 0
     e9c:	0a c0       	rjmp	.+20     	; 0xeb2 <udc_process_setup+0x50c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     e9e:	82 2f       	mov	r24, r18
     ea0:	80 76       	andi	r24, 0x60	; 96
     ea2:	09 f0       	breq	.+2      	; 0xea6 <udc_process_setup+0x500>
     ea4:	7d cf       	rjmp	.-262    	; 0xda0 <udc_process_setup+0x3fa>
     ea6:	88 ce       	rjmp	.-752    	; 0xbb8 <udc_process_setup+0x212>
     ea8:	32 2f       	mov	r19, r18
     eaa:	30 76       	andi	r19, 0x60	; 96
     eac:	09 f0       	breq	.+2      	; 0xeb0 <udc_process_setup+0x50a>
     eae:	78 cf       	rjmp	.-272    	; 0xda0 <udc_process_setup+0x3fa>
     eb0:	99 cd       	rjmp	.-1230   	; 0x9e4 <udc_process_setup+0x3e>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     eb2:	80 2f       	mov	r24, r16
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	08 95       	ret

00000ec2 <ccp_write_io>:
     ec2:	1b be       	out	0x3b, r1	; 59
     ec4:	fc 01       	movw	r30, r24
     ec6:	28 ed       	ldi	r18, 0xD8	; 216
     ec8:	24 bf       	out	0x34, r18	; 52
     eca:	60 83       	st	Z, r22
     ecc:	08 95       	ret

00000ece <nvm_read_byte>:
     ece:	40 91 ca 01 	lds	r20, 0x01CA
     ed2:	e6 2f       	mov	r30, r22
     ed4:	f7 2f       	mov	r31, r23
     ed6:	80 93 ca 01 	sts	0x01CA, r24
     eda:	84 91       	lpm	r24, Z
     edc:	40 93 ca 01 	sts	0x01CA, r20
     ee0:	08 95       	ret

00000ee2 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	8f 93       	push	r24
     eee:	9f 93       	push	r25
     ef0:	ef 93       	push	r30
     ef2:	ff 93       	push	r31
	rtc_data.counter_high++;
     ef4:	e7 ee       	ldi	r30, 0xE7	; 231
     ef6:	f2 e2       	ldi	r31, 0x22	; 34
     ef8:	80 81       	ld	r24, Z
     efa:	91 81       	ldd	r25, Z+1	; 0x01
     efc:	01 96       	adiw	r24, 0x01	; 1
     efe:	80 83       	st	Z, r24
     f00:	91 83       	std	Z+1, r25	; 0x01
}
     f02:	ff 91       	pop	r31
     f04:	ef 91       	pop	r30
     f06:	9f 91       	pop	r25
     f08:	8f 91       	pop	r24
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	0f 90       	pop	r0
     f10:	1f 90       	pop	r1
     f12:	18 95       	reti

00000f14 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     f14:	1f 92       	push	r1
     f16:	0f 92       	push	r0
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	0f 92       	push	r0
     f1c:	11 24       	eor	r1, r1
     f1e:	cf 92       	push	r12
     f20:	df 92       	push	r13
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	2f 93       	push	r18
     f2c:	3f 93       	push	r19
     f2e:	4f 93       	push	r20
     f30:	5f 93       	push	r21
     f32:	6f 93       	push	r22
     f34:	7f 93       	push	r23
     f36:	8f 93       	push	r24
     f38:	9f 93       	push	r25
     f3a:	af 93       	push	r26
     f3c:	bf 93       	push	r27
     f3e:	ef 93       	push	r30
     f40:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     f42:	40 91 e7 22 	lds	r20, 0x22E7
     f46:	50 91 e8 22 	lds	r21, 0x22E8
     f4a:	80 91 e9 22 	lds	r24, 0x22E9
     f4e:	90 91 ea 22 	lds	r25, 0x22EA
     f52:	48 17       	cp	r20, r24
     f54:	59 07       	cpc	r21, r25
     f56:	f0 f1       	brcs	.+124    	; 0xfd4 <__vector_11+0xc0>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	e0 e0       	ldi	r30, 0x00	; 0
     f5c:	f4 e0       	ldi	r31, 0x04	; 4
     f5e:	82 83       	std	Z+2, r24	; 0x02
		if (rtc_data.callback) {
     f60:	e0 91 ed 22 	lds	r30, 0x22ED
     f64:	f0 91 ee 22 	lds	r31, 0x22EE
     f68:	30 97       	sbiw	r30, 0x00	; 0
     f6a:	a1 f1       	breq	.+104    	; 0xfd4 <__vector_11+0xc0>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     f6c:	a0 e0       	ldi	r26, 0x00	; 0
     f6e:	b4 e0       	ldi	r27, 0x04	; 4
     f70:	18 96       	adiw	r26, 0x08	; 8
     f72:	8d 91       	ld	r24, X+
     f74:	9c 91       	ld	r25, X
     f76:	19 97       	sbiw	r26, 0x09	; 9
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	ba 01       	movw	r22, r20
     f7e:	55 27       	eor	r21, r21
     f80:	44 27       	eor	r20, r20
					| RTC.CNT;
     f82:	a0 e0       	ldi	r26, 0x00	; 0
     f84:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     f86:	8a 01       	movw	r16, r20
     f88:	9b 01       	movw	r18, r22
     f8a:	08 2b       	or	r16, r24
     f8c:	19 2b       	or	r17, r25
     f8e:	2a 2b       	or	r18, r26
     f90:	3b 2b       	or	r19, r27
     f92:	c9 01       	movw	r24, r18
     f94:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     f96:	00 91 e9 22 	lds	r16, 0x22E9
     f9a:	10 91 ea 22 	lds	r17, 0x22EA
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	98 01       	movw	r18, r16
     fa4:	11 27       	eor	r17, r17
     fa6:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     fa8:	c0 90 eb 22 	lds	r12, 0x22EB
     fac:	d0 90 ec 22 	lds	r13, 0x22EC
     fb0:	e1 2c       	mov	r14, r1
     fb2:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     fb4:	0c 29       	or	r16, r12
     fb6:	1d 29       	or	r17, r13
     fb8:	2e 29       	or	r18, r14
     fba:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     fbc:	06 17       	cp	r16, r22
     fbe:	17 07       	cpc	r17, r23
     fc0:	28 07       	cpc	r18, r24
     fc2:	39 07       	cpc	r19, r25
     fc4:	30 f0       	brcs	.+12     	; 0xfd2 <__vector_11+0xbe>
				count = alarm + 1;
     fc6:	c9 01       	movw	r24, r18
     fc8:	b8 01       	movw	r22, r16
     fca:	6f 5f       	subi	r22, 0xFF	; 255
     fcc:	7f 4f       	sbci	r23, 0xFF	; 255
     fce:	8f 4f       	sbci	r24, 0xFF	; 255
     fd0:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     fd2:	09 95       	icall
		}
	}
}
     fd4:	ff 91       	pop	r31
     fd6:	ef 91       	pop	r30
     fd8:	bf 91       	pop	r27
     fda:	af 91       	pop	r26
     fdc:	9f 91       	pop	r25
     fde:	8f 91       	pop	r24
     fe0:	7f 91       	pop	r23
     fe2:	6f 91       	pop	r22
     fe4:	5f 91       	pop	r21
     fe6:	4f 91       	pop	r20
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	df 90       	pop	r13
     ff6:	cf 90       	pop	r12
     ff8:	0f 90       	pop	r0
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	0f 90       	pop	r0
     ffe:	1f 90       	pop	r1
    1000:	18 95       	reti

00001002 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1002:	81 11       	cpse	r24, r1
    1004:	18 c0       	rjmp	.+48     	; 0x1036 <udd_sleep_mode+0x34>
    1006:	90 91 e0 22 	lds	r25, 0x22E0
    100a:	99 23       	and	r25, r25
    100c:	89 f0       	breq	.+34     	; 0x1030 <udd_sleep_mode+0x2e>
    100e:	9f b7       	in	r25, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	e2 ee       	ldi	r30, 0xE2	; 226
    1014:	f2 e2       	ldi	r31, 0x22	; 34
    1016:	20 81       	ld	r18, Z
    1018:	21 50       	subi	r18, 0x01	; 1
    101a:	20 83       	st	Z, r18
    101c:	9f bf       	out	0x3f, r25	; 63
    101e:	08 c0       	rjmp	.+16     	; 0x1030 <udd_sleep_mode+0x2e>
    1020:	9f b7       	in	r25, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	e2 ee       	ldi	r30, 0xE2	; 226
    1026:	f2 e2       	ldi	r31, 0x22	; 34
    1028:	20 81       	ld	r18, Z
    102a:	2f 5f       	subi	r18, 0xFF	; 255
    102c:	20 83       	st	Z, r18
    102e:	9f bf       	out	0x3f, r25	; 63
    1030:	80 93 e0 22 	sts	0x22E0, r24
    1034:	08 95       	ret
    1036:	90 91 e0 22 	lds	r25, 0x22E0
    103a:	99 23       	and	r25, r25
    103c:	89 f3       	breq	.-30     	; 0x1020 <udd_sleep_mode+0x1e>
    103e:	f8 cf       	rjmp	.-16     	; 0x1030 <udd_sleep_mode+0x2e>

00001040 <udd_ctrl_init>:
    1040:	0f 93       	push	r16
    1042:	e8 ec       	ldi	r30, 0xC8	; 200
    1044:	f4 e0       	ldi	r31, 0x04	; 4
    1046:	80 81       	ld	r24, Z
    1048:	8f 7d       	andi	r24, 0xDF	; 223
    104a:	80 83       	st	Z, r24
    104c:	80 81       	ld	r24, Z
    104e:	8f 7d       	andi	r24, 0xDF	; 223
    1050:	80 83       	st	Z, r24
    1052:	e4 eb       	ldi	r30, 0xB4	; 180
    1054:	f2 e2       	ldi	r31, 0x22	; 34
    1056:	02 e0       	ldi	r16, 0x02	; 2
    1058:	05 93       	las	Z, r16
    105a:	10 92 b6 22 	sts	0x22B6, r1
    105e:	10 92 b7 22 	sts	0x22B7, r1
    1062:	00 e2       	ldi	r16, 0x20	; 32
    1064:	06 93       	lac	Z, r16
    1066:	00 e4       	ldi	r16, 0x40	; 64
    1068:	06 93       	lac	Z, r16
    106a:	ec ea       	ldi	r30, 0xAC	; 172
    106c:	f2 e2       	ldi	r31, 0x22	; 34
    106e:	00 e2       	ldi	r16, 0x20	; 32
    1070:	06 93       	lac	Z, r16
    1072:	00 e4       	ldi	r16, 0x40	; 64
    1074:	06 93       	lac	Z, r16
    1076:	10 92 fb 22 	sts	0x22FB, r1
    107a:	10 92 fc 22 	sts	0x22FC, r1
    107e:	10 92 fd 22 	sts	0x22FD, r1
    1082:	10 92 fe 22 	sts	0x22FE, r1
    1086:	10 92 f9 22 	sts	0x22F9, r1
    108a:	10 92 fa 22 	sts	0x22FA, r1
    108e:	10 92 9e 22 	sts	0x229E, r1
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <udd_ctrl_stall_data>:
    1096:	0f 93       	push	r16
    1098:	85 e0       	ldi	r24, 0x05	; 5
    109a:	80 93 9e 22 	sts	0x229E, r24
    109e:	e5 eb       	ldi	r30, 0xB5	; 181
    10a0:	f2 e2       	ldi	r31, 0x22	; 34
    10a2:	04 e0       	ldi	r16, 0x04	; 4
    10a4:	05 93       	las	Z, r16
    10a6:	ed ea       	ldi	r30, 0xAD	; 173
    10a8:	f2 e2       	ldi	r31, 0x22	; 34
    10aa:	04 e0       	ldi	r16, 0x04	; 4
    10ac:	05 93       	las	Z, r16
    10ae:	0f 91       	pop	r16
    10b0:	08 95       	ret

000010b2 <udd_ctrl_send_zlp_in>:
    10b2:	0f 93       	push	r16
    10b4:	83 e0       	ldi	r24, 0x03	; 3
    10b6:	80 93 9e 22 	sts	0x229E, r24
    10ba:	10 92 b6 22 	sts	0x22B6, r1
    10be:	10 92 b7 22 	sts	0x22B7, r1
    10c2:	e4 eb       	ldi	r30, 0xB4	; 180
    10c4:	f2 e2       	ldi	r31, 0x22	; 34
    10c6:	02 e0       	ldi	r16, 0x02	; 2
    10c8:	06 93       	lac	Z, r16
    10ca:	0f 91       	pop	r16
    10cc:	08 95       	ret

000010ce <udd_ctrl_endofrequest>:
    10ce:	e0 91 fb 22 	lds	r30, 0x22FB
    10d2:	f0 91 fc 22 	lds	r31, 0x22FC
    10d6:	30 97       	sbiw	r30, 0x00	; 0
    10d8:	09 f0       	breq	.+2      	; 0x10dc <udd_ctrl_endofrequest+0xe>
    10da:	09 95       	icall
    10dc:	08 95       	ret

000010de <udd_ctrl_in_sent>:
    10de:	0f 93       	push	r16
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	80 91 9e 22 	lds	r24, 0x229E
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	19 f4       	brne	.+6      	; 0x10f2 <udd_ctrl_in_sent+0x14>
    10ec:	f0 df       	rcall	.-32     	; 0x10ce <udd_ctrl_endofrequest>
    10ee:	a8 df       	rcall	.-176    	; 0x1040 <udd_ctrl_init>
    10f0:	60 c0       	rjmp	.+192    	; 0x11b2 <udd_ctrl_in_sent+0xd4>
    10f2:	80 91 9a 22 	lds	r24, 0x229A
    10f6:	90 91 9b 22 	lds	r25, 0x229B
    10fa:	c0 91 f9 22 	lds	r28, 0x22F9
    10fe:	d0 91 fa 22 	lds	r29, 0x22FA
    1102:	c8 1b       	sub	r28, r24
    1104:	d9 0b       	sbc	r29, r25
    1106:	71 f5       	brne	.+92     	; 0x1164 <udd_ctrl_in_sent+0x86>
    1108:	20 91 9c 22 	lds	r18, 0x229C
    110c:	30 91 9d 22 	lds	r19, 0x229D
    1110:	82 0f       	add	r24, r18
    1112:	93 1f       	adc	r25, r19
    1114:	80 93 9c 22 	sts	0x229C, r24
    1118:	90 93 9d 22 	sts	0x229D, r25
    111c:	20 91 f5 22 	lds	r18, 0x22F5
    1120:	30 91 f6 22 	lds	r19, 0x22F6
    1124:	82 17       	cp	r24, r18
    1126:	93 07       	cpc	r25, r19
    1128:	21 f0       	breq	.+8      	; 0x1132 <udd_ctrl_in_sent+0x54>
    112a:	80 91 b5 21 	lds	r24, 0x21B5
    112e:	88 23       	and	r24, r24
    1130:	41 f0       	breq	.+16     	; 0x1142 <udd_ctrl_in_sent+0x64>
    1132:	84 e0       	ldi	r24, 0x04	; 4
    1134:	80 93 9e 22 	sts	0x229E, r24
    1138:	ec ea       	ldi	r30, 0xAC	; 172
    113a:	f2 e2       	ldi	r31, 0x22	; 34
    113c:	02 e0       	ldi	r16, 0x02	; 2
    113e:	06 93       	lac	Z, r16
    1140:	38 c0       	rjmp	.+112    	; 0x11b2 <udd_ctrl_in_sent+0xd4>
    1142:	e0 91 fd 22 	lds	r30, 0x22FD
    1146:	f0 91 fe 22 	lds	r31, 0x22FE
    114a:	30 97       	sbiw	r30, 0x00	; 0
    114c:	99 f0       	breq	.+38     	; 0x1174 <udd_ctrl_in_sent+0x96>
    114e:	09 95       	icall
    1150:	88 23       	and	r24, r24
    1152:	81 f0       	breq	.+32     	; 0x1174 <udd_ctrl_in_sent+0x96>
    1154:	10 92 9a 22 	sts	0x229A, r1
    1158:	10 92 9b 22 	sts	0x229B, r1
    115c:	c0 91 f9 22 	lds	r28, 0x22F9
    1160:	d0 91 fa 22 	lds	r29, 0x22FA
    1164:	c0 34       	cpi	r28, 0x40	; 64
    1166:	d1 05       	cpc	r29, r1
    1168:	28 f0       	brcs	.+10     	; 0x1174 <udd_ctrl_in_sent+0x96>
    116a:	10 92 b5 21 	sts	0x21B5, r1
    116e:	c0 e4       	ldi	r28, 0x40	; 64
    1170:	d0 e0       	ldi	r29, 0x00	; 0
    1172:	03 c0       	rjmp	.+6      	; 0x117a <udd_ctrl_in_sent+0x9c>
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	80 93 b5 21 	sts	0x21B5, r24
    117a:	c0 93 b6 22 	sts	0x22B6, r28
    117e:	d0 93 b7 22 	sts	0x22B7, r29
    1182:	80 91 9a 22 	lds	r24, 0x229A
    1186:	90 91 9b 22 	lds	r25, 0x229B
    118a:	20 91 f7 22 	lds	r18, 0x22F7
    118e:	30 91 f8 22 	lds	r19, 0x22F8
    1192:	28 0f       	add	r18, r24
    1194:	39 1f       	adc	r19, r25
    1196:	20 93 b8 22 	sts	0x22B8, r18
    119a:	30 93 b9 22 	sts	0x22B9, r19
    119e:	c8 0f       	add	r28, r24
    11a0:	d9 1f       	adc	r29, r25
    11a2:	c0 93 9a 22 	sts	0x229A, r28
    11a6:	d0 93 9b 22 	sts	0x229B, r29
    11aa:	e4 eb       	ldi	r30, 0xB4	; 180
    11ac:	f2 e2       	ldi	r31, 0x22	; 34
    11ae:	02 e0       	ldi	r16, 0x02	; 2
    11b0:	06 93       	lac	Z, r16
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	0f 91       	pop	r16
    11b8:	08 95       	ret

000011ba <udd_ep_get_size>:
    11ba:	fc 01       	movw	r30, r24
    11bc:	81 81       	ldd	r24, Z+1	; 0x01
    11be:	87 70       	andi	r24, 0x07	; 7
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	fc 01       	movw	r30, r24
    11c4:	31 97       	sbiw	r30, 0x01	; 1
    11c6:	e7 30       	cpi	r30, 0x07	; 7
    11c8:	f1 05       	cpc	r31, r1
    11ca:	20 f4       	brcc	.+8      	; 0x11d4 <udd_ep_get_size+0x1a>
    11cc:	e2 50       	subi	r30, 0x02	; 2
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__tablejump2__>
    11d4:	88 e0       	ldi	r24, 0x08	; 8
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	08 95       	ret
    11da:	80 e2       	ldi	r24, 0x20	; 32
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	08 95       	ret
    11e0:	80 e4       	ldi	r24, 0x40	; 64
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	08 95       	ret
    11e6:	80 e8       	ldi	r24, 0x80	; 128
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	08 95       	ret
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	08 95       	ret
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	92 e0       	ldi	r25, 0x02	; 2
    11f6:	08 95       	ret
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	93 e0       	ldi	r25, 0x03	; 3
    11fc:	08 95       	ret
    11fe:	80 e1       	ldi	r24, 0x10	; 16
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	08 95       	ret

00001204 <udd_ep_get_job>:
    1204:	28 2f       	mov	r18, r24
    1206:	2f 70       	andi	r18, 0x0F	; 15
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	22 0f       	add	r18, r18
    120c:	33 1f       	adc	r19, r19
    120e:	99 27       	eor	r25, r25
    1210:	87 fd       	sbrc	r24, 7
    1212:	90 95       	com	r25
    1214:	88 27       	eor	r24, r24
    1216:	99 0f       	add	r25, r25
    1218:	88 1f       	adc	r24, r24
    121a:	99 27       	eor	r25, r25
    121c:	82 0f       	add	r24, r18
    121e:	93 1f       	adc	r25, r19
    1220:	02 97       	sbiw	r24, 0x02	; 2
    1222:	9c 01       	movw	r18, r24
    1224:	22 0f       	add	r18, r18
    1226:	33 1f       	adc	r19, r19
    1228:	22 0f       	add	r18, r18
    122a:	33 1f       	adc	r19, r19
    122c:	22 0f       	add	r18, r18
    122e:	33 1f       	adc	r19, r19
    1230:	82 0f       	add	r24, r18
    1232:	93 1f       	adc	r25, r19
    1234:	8a 5c       	subi	r24, 0xCA	; 202
    1236:	9d 4d       	sbci	r25, 0xDD	; 221
    1238:	08 95       	ret

0000123a <udd_ctrl_interrupt_tc_setup>:
    123a:	0f 93       	push	r16
    123c:	cf 93       	push	r28
    123e:	80 91 cc 04 	lds	r24, 0x04CC
    1242:	80 ff       	sbrs	r24, 0
    1244:	62 c0       	rjmp	.+196    	; 0x130a <udd_ctrl_interrupt_tc_setup+0xd0>
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 93 cc 04 	sts	0x04CC, r24
    124c:	ec ea       	ldi	r30, 0xAC	; 172
    124e:	f2 e2       	ldi	r31, 0x22	; 34
    1250:	00 e8       	ldi	r16, 0x80	; 128
    1252:	06 93       	lac	Z, r16
    1254:	e4 eb       	ldi	r30, 0xB4	; 180
    1256:	f2 e2       	ldi	r31, 0x22	; 34
    1258:	00 e8       	ldi	r16, 0x80	; 128
    125a:	06 93       	lac	Z, r16
    125c:	80 93 ca 04 	sts	0x04CA, r24
    1260:	ec ea       	ldi	r30, 0xAC	; 172
    1262:	f2 e2       	ldi	r31, 0x22	; 34
    1264:	00 e1       	ldi	r16, 0x10	; 16
    1266:	06 93       	lac	Z, r16
    1268:	80 91 9e 22 	lds	r24, 0x229E
    126c:	88 23       	and	r24, r24
    126e:	29 f0       	breq	.+10     	; 0x127a <udd_ctrl_interrupt_tc_setup+0x40>
    1270:	83 50       	subi	r24, 0x03	; 3
    1272:	82 30       	cpi	r24, 0x02	; 2
    1274:	08 f4       	brcc	.+2      	; 0x1278 <udd_ctrl_interrupt_tc_setup+0x3e>
    1276:	2b df       	rcall	.-426    	; 0x10ce <udd_ctrl_endofrequest>
    1278:	e3 de       	rcall	.-570    	; 0x1040 <udd_ctrl_init>
    127a:	80 91 ae 22 	lds	r24, 0x22AE
    127e:	90 91 af 22 	lds	r25, 0x22AF
    1282:	08 97       	sbiw	r24, 0x08	; 8
    1284:	09 f0       	breq	.+2      	; 0x1288 <udd_ctrl_interrupt_tc_setup+0x4e>
    1286:	43 c0       	rjmp	.+134    	; 0x130e <udd_ctrl_interrupt_tc_setup+0xd4>
    1288:	88 e0       	ldi	r24, 0x08	; 8
    128a:	ea e5       	ldi	r30, 0x5A	; 90
    128c:	f2 e2       	ldi	r31, 0x22	; 34
    128e:	af ee       	ldi	r26, 0xEF	; 239
    1290:	b2 e2       	ldi	r27, 0x22	; 34
    1292:	01 90       	ld	r0, Z+
    1294:	0d 92       	st	X+, r0
    1296:	8a 95       	dec	r24
    1298:	e1 f7       	brne	.-8      	; 0x1292 <udd_ctrl_interrupt_tc_setup+0x58>
    129a:	e8 ec       	ldi	r30, 0xC8	; 200
    129c:	f4 e0       	ldi	r31, 0x04	; 4
    129e:	80 81       	ld	r24, Z
    12a0:	80 62       	ori	r24, 0x20	; 32
    12a2:	80 83       	st	Z, r24
    12a4:	80 81       	ld	r24, Z
    12a6:	80 62       	ori	r24, 0x20	; 32
    12a8:	80 83       	st	Z, r24
    12aa:	7d db       	rcall	.-2310   	; 0x9a6 <udc_process_setup>
    12ac:	c8 2f       	mov	r28, r24
    12ae:	81 11       	cpse	r24, r1
    12b0:	03 c0       	rjmp	.+6      	; 0x12b8 <udd_ctrl_interrupt_tc_setup+0x7e>
    12b2:	f1 de       	rcall	.-542    	; 0x1096 <udd_ctrl_stall_data>
    12b4:	c1 e0       	ldi	r28, 0x01	; 1
    12b6:	2c c0       	rjmp	.+88     	; 0x1310 <udd_ctrl_interrupt_tc_setup+0xd6>
    12b8:	80 91 ef 22 	lds	r24, 0x22EF
    12bc:	88 23       	and	r24, r24
    12be:	6c f4       	brge	.+26     	; 0x12da <udd_ctrl_interrupt_tc_setup+0xa0>
    12c0:	10 92 9c 22 	sts	0x229C, r1
    12c4:	10 92 9d 22 	sts	0x229D, r1
    12c8:	10 92 9a 22 	sts	0x229A, r1
    12cc:	10 92 9b 22 	sts	0x229B, r1
    12d0:	82 e0       	ldi	r24, 0x02	; 2
    12d2:	80 93 9e 22 	sts	0x229E, r24
    12d6:	03 df       	rcall	.-506    	; 0x10de <udd_ctrl_in_sent>
    12d8:	1b c0       	rjmp	.+54     	; 0x1310 <udd_ctrl_interrupt_tc_setup+0xd6>
    12da:	20 91 f5 22 	lds	r18, 0x22F5
    12de:	30 91 f6 22 	lds	r19, 0x22F6
    12e2:	23 2b       	or	r18, r19
    12e4:	11 f4       	brne	.+4      	; 0x12ea <udd_ctrl_interrupt_tc_setup+0xb0>
    12e6:	e5 de       	rcall	.-566    	; 0x10b2 <udd_ctrl_send_zlp_in>
    12e8:	13 c0       	rjmp	.+38     	; 0x1310 <udd_ctrl_interrupt_tc_setup+0xd6>
    12ea:	10 92 9c 22 	sts	0x229C, r1
    12ee:	10 92 9d 22 	sts	0x229D, r1
    12f2:	10 92 9a 22 	sts	0x229A, r1
    12f6:	10 92 9b 22 	sts	0x229B, r1
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	80 93 9e 22 	sts	0x229E, r24
    1300:	ec ea       	ldi	r30, 0xAC	; 172
    1302:	f2 e2       	ldi	r31, 0x22	; 34
    1304:	02 e0       	ldi	r16, 0x02	; 2
    1306:	06 93       	lac	Z, r16
    1308:	03 c0       	rjmp	.+6      	; 0x1310 <udd_ctrl_interrupt_tc_setup+0xd6>
    130a:	c0 e0       	ldi	r28, 0x00	; 0
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <udd_ctrl_interrupt_tc_setup+0xd6>
    130e:	c1 e0       	ldi	r28, 0x01	; 1
    1310:	8c 2f       	mov	r24, r28
    1312:	cf 91       	pop	r28
    1314:	0f 91       	pop	r16
    1316:	08 95       	ret

00001318 <udd_ep_trans_complet>:
    1318:	bf 92       	push	r11
    131a:	cf 92       	push	r12
    131c:	df 92       	push	r13
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	b8 2e       	mov	r11, r24
    132c:	6b df       	rcall	.-298    	; 0x1204 <udd_ep_get_job>
    132e:	ec 01       	movw	r28, r24
    1330:	1b 2d       	mov	r17, r11
    1332:	11 1f       	adc	r17, r17
    1334:	11 27       	eor	r17, r17
    1336:	11 1f       	adc	r17, r17
    1338:	8b 2d       	mov	r24, r11
    133a:	8f 70       	andi	r24, 0x0F	; 15
    133c:	e8 2e       	mov	r14, r24
    133e:	f1 2c       	mov	r15, r1
    1340:	ee 0c       	add	r14, r14
    1342:	ff 1c       	adc	r15, r15
    1344:	e1 0e       	add	r14, r17
    1346:	f1 1c       	adc	r15, r1
    1348:	c7 01       	movw	r24, r14
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	9c 01       	movw	r18, r24
    1358:	24 55       	subi	r18, 0x54	; 84
    135a:	3d 4d       	sbci	r19, 0xDD	; 221
    135c:	79 01       	movw	r14, r18
    135e:	c9 01       	movw	r24, r18
    1360:	2c df       	rcall	.-424    	; 0x11ba <udd_ep_get_size>
    1362:	6c 01       	movw	r12, r24
    1364:	11 23       	and	r17, r17
    1366:	09 f4       	brne	.+2      	; 0x136a <udd_ep_trans_complet+0x52>
    1368:	59 c0       	rjmp	.+178    	; 0x141c <udd_ep_trans_complet+0x104>
    136a:	d7 01       	movw	r26, r14
    136c:	16 96       	adiw	r26, 0x06	; 6
    136e:	2d 91       	ld	r18, X+
    1370:	3c 91       	ld	r19, X
    1372:	17 97       	sbiw	r26, 0x07	; 7
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	28 0f       	add	r18, r24
    137a:	39 1f       	adc	r19, r25
    137c:	2d 83       	std	Y+5, r18	; 0x05
    137e:	3e 83       	std	Y+6, r19	; 0x06
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	28 17       	cp	r18, r24
    1386:	39 07       	cpc	r19, r25
    1388:	b9 f1       	breq	.+110    	; 0x13f8 <udd_ep_trans_complet+0xe0>
    138a:	fc 01       	movw	r30, r24
    138c:	e2 1b       	sub	r30, r18
    138e:	f3 0b       	sbc	r31, r19
    1390:	9f 01       	movw	r18, r30
    1392:	21 15       	cp	r18, r1
    1394:	f4 e0       	ldi	r31, 0x04	; 4
    1396:	3f 07       	cpc	r19, r31
    1398:	38 f0       	brcs	.+14     	; 0x13a8 <udd_ep_trans_complet+0x90>
    139a:	2f ef       	ldi	r18, 0xFF	; 255
    139c:	33 e0       	ldi	r19, 0x03	; 3
    139e:	c9 01       	movw	r24, r18
    13a0:	b6 01       	movw	r22, r12
    13a2:	df d7       	rcall	.+4030   	; 0x2362 <__udivmodhi4>
    13a4:	28 1b       	sub	r18, r24
    13a6:	39 0b       	sbc	r19, r25
    13a8:	88 81       	ld	r24, Y
    13aa:	81 ff       	sbrs	r24, 1
    13ac:	09 c0       	rjmp	.+18     	; 0x13c0 <udd_ep_trans_complet+0xa8>
    13ae:	c9 01       	movw	r24, r18
    13b0:	b6 01       	movw	r22, r12
    13b2:	d7 d7       	rcall	.+4014   	; 0x2362 <__udivmodhi4>
    13b4:	41 e0       	ldi	r20, 0x01	; 1
    13b6:	89 2b       	or	r24, r25
    13b8:	09 f0       	breq	.+2      	; 0x13bc <udd_ep_trans_complet+0xa4>
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	94 2f       	mov	r25, r20
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <udd_ep_trans_complet+0xaa>
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	88 81       	ld	r24, Y
    13c4:	90 fb       	bst	r25, 0
    13c6:	81 f9       	bld	r24, 1
    13c8:	88 83       	st	Y, r24
    13ca:	d7 01       	movw	r26, r14
    13cc:	16 96       	adiw	r26, 0x06	; 6
    13ce:	1d 92       	st	X+, r1
    13d0:	1c 92       	st	X, r1
    13d2:	17 97       	sbiw	r26, 0x07	; 7
    13d4:	12 96       	adiw	r26, 0x02	; 2
    13d6:	2d 93       	st	X+, r18
    13d8:	3c 93       	st	X, r19
    13da:	13 97       	sbiw	r26, 0x03	; 3
    13dc:	29 81       	ldd	r18, Y+1	; 0x01
    13de:	3a 81       	ldd	r19, Y+2	; 0x02
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	9e 81       	ldd	r25, Y+6	; 0x06
    13e4:	82 0f       	add	r24, r18
    13e6:	93 1f       	adc	r25, r19
    13e8:	14 96       	adiw	r26, 0x04	; 4
    13ea:	8d 93       	st	X+, r24
    13ec:	9c 93       	st	X, r25
    13ee:	15 97       	sbiw	r26, 0x05	; 5
    13f0:	f7 01       	movw	r30, r14
    13f2:	02 e0       	ldi	r16, 0x02	; 2
    13f4:	06 93       	lac	Z, r16
    13f6:	94 c0       	rjmp	.+296    	; 0x1520 <udd_ep_trans_complet+0x208>
    13f8:	88 81       	ld	r24, Y
    13fa:	81 ff       	sbrs	r24, 1
    13fc:	83 c0       	rjmp	.+262    	; 0x1504 <udd_ep_trans_complet+0x1ec>
    13fe:	8d 7f       	andi	r24, 0xFD	; 253
    1400:	88 83       	st	Y, r24
    1402:	d7 01       	movw	r26, r14
    1404:	16 96       	adiw	r26, 0x06	; 6
    1406:	1d 92       	st	X+, r1
    1408:	1c 92       	st	X, r1
    140a:	17 97       	sbiw	r26, 0x07	; 7
    140c:	12 96       	adiw	r26, 0x02	; 2
    140e:	1d 92       	st	X+, r1
    1410:	1c 92       	st	X, r1
    1412:	13 97       	sbiw	r26, 0x03	; 3
    1414:	f7 01       	movw	r30, r14
    1416:	02 e0       	ldi	r16, 0x02	; 2
    1418:	06 93       	lac	Z, r16
    141a:	82 c0       	rjmp	.+260    	; 0x1520 <udd_ep_trans_complet+0x208>
    141c:	d7 01       	movw	r26, r14
    141e:	12 96       	adiw	r26, 0x02	; 2
    1420:	0d 91       	ld	r16, X+
    1422:	1c 91       	ld	r17, X
    1424:	13 97       	sbiw	r26, 0x03	; 3
    1426:	88 81       	ld	r24, Y
    1428:	82 ff       	sbrs	r24, 2
    142a:	13 c0       	rjmp	.+38     	; 0x1452 <udd_ep_trans_complet+0x13a>
    142c:	e9 81       	ldd	r30, Y+1	; 0x01
    142e:	fa 81       	ldd	r31, Y+2	; 0x02
    1430:	2d 81       	ldd	r18, Y+5	; 0x05
    1432:	3e 81       	ldd	r19, Y+6	; 0x06
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	b6 01       	movw	r22, r12
    143a:	93 d7       	rcall	.+3878   	; 0x2362 <__udivmodhi4>
    143c:	b0 e4       	ldi	r27, 0x40	; 64
    143e:	bb 9e       	mul	r11, r27
    1440:	b0 01       	movw	r22, r0
    1442:	11 24       	eor	r1, r1
    1444:	6a 58       	subi	r22, 0x8A	; 138
    1446:	7e 4d       	sbci	r23, 0xDE	; 222
    1448:	ac 01       	movw	r20, r24
    144a:	cf 01       	movw	r24, r30
    144c:	82 0f       	add	r24, r18
    144e:	93 1f       	adc	r25, r19
    1450:	a2 d7       	rcall	.+3908   	; 0x2396 <memcpy>
    1452:	2d 81       	ldd	r18, Y+5	; 0x05
    1454:	3e 81       	ldd	r19, Y+6	; 0x06
    1456:	20 0f       	add	r18, r16
    1458:	31 1f       	adc	r19, r17
    145a:	2d 83       	std	Y+5, r18	; 0x05
    145c:	3e 83       	std	Y+6, r19	; 0x06
    145e:	eb 81       	ldd	r30, Y+3	; 0x03
    1460:	fc 81       	ldd	r31, Y+4	; 0x04
    1462:	e2 17       	cp	r30, r18
    1464:	f3 07       	cpc	r31, r19
    1466:	10 f4       	brcc	.+4      	; 0x146c <udd_ep_trans_complet+0x154>
    1468:	ed 83       	std	Y+5, r30	; 0x05
    146a:	fe 83       	std	Y+6, r31	; 0x06
    146c:	d7 01       	movw	r26, r14
    146e:	16 96       	adiw	r26, 0x06	; 6
    1470:	8d 91       	ld	r24, X+
    1472:	9c 91       	ld	r25, X
    1474:	17 97       	sbiw	r26, 0x07	; 7
    1476:	80 17       	cp	r24, r16
    1478:	91 07       	cpc	r25, r17
    147a:	09 f0       	breq	.+2      	; 0x147e <udd_ep_trans_complet+0x166>
    147c:	43 c0       	rjmp	.+134    	; 0x1504 <udd_ep_trans_complet+0x1ec>
    147e:	8d 81       	ldd	r24, Y+5	; 0x05
    1480:	9e 81       	ldd	r25, Y+6	; 0x06
    1482:	e8 17       	cp	r30, r24
    1484:	f9 07       	cpc	r31, r25
    1486:	09 f4       	brne	.+2      	; 0x148a <udd_ep_trans_complet+0x172>
    1488:	3d c0       	rjmp	.+122    	; 0x1504 <udd_ep_trans_complet+0x1ec>
    148a:	e8 1b       	sub	r30, r24
    148c:	f9 0b       	sbc	r31, r25
    148e:	e1 15       	cp	r30, r1
    1490:	b4 e0       	ldi	r27, 0x04	; 4
    1492:	fb 07       	cpc	r31, r27
    1494:	40 f0       	brcs	.+16     	; 0x14a6 <udd_ep_trans_complet+0x18e>
    1496:	ef ef       	ldi	r30, 0xFF	; 255
    1498:	f3 e0       	ldi	r31, 0x03	; 3
    149a:	cf 01       	movw	r24, r30
    149c:	b6 01       	movw	r22, r12
    149e:	61 d7       	rcall	.+3778   	; 0x2362 <__udivmodhi4>
    14a0:	e8 1b       	sub	r30, r24
    14a2:	f9 0b       	sbc	r31, r25
    14a4:	05 c0       	rjmp	.+10     	; 0x14b0 <udd_ep_trans_complet+0x198>
    14a6:	cf 01       	movw	r24, r30
    14a8:	b6 01       	movw	r22, r12
    14aa:	5b d7       	rcall	.+3766   	; 0x2362 <__udivmodhi4>
    14ac:	e8 1b       	sub	r30, r24
    14ae:	f9 0b       	sbc	r31, r25
    14b0:	d7 01       	movw	r26, r14
    14b2:	12 96       	adiw	r26, 0x02	; 2
    14b4:	1d 92       	st	X+, r1
    14b6:	1c 92       	st	X, r1
    14b8:	13 97       	sbiw	r26, 0x03	; 3
    14ba:	ec 15       	cp	r30, r12
    14bc:	fd 05       	cpc	r31, r13
    14be:	78 f4       	brcc	.+30     	; 0x14de <udd_ep_trans_complet+0x1c6>
    14c0:	88 81       	ld	r24, Y
    14c2:	84 60       	ori	r24, 0x04	; 4
    14c4:	88 83       	st	Y, r24
    14c6:	b0 e4       	ldi	r27, 0x40	; 64
    14c8:	bb 9e       	mul	r11, r27
    14ca:	c0 01       	movw	r24, r0
    14cc:	11 24       	eor	r1, r1
    14ce:	8a 58       	subi	r24, 0x8A	; 138
    14d0:	9e 4d       	sbci	r25, 0xDE	; 222
    14d2:	f7 01       	movw	r30, r14
    14d4:	84 83       	std	Z+4, r24	; 0x04
    14d6:	95 83       	std	Z+5, r25	; 0x05
    14d8:	c6 82       	std	Z+6, r12	; 0x06
    14da:	d7 82       	std	Z+7, r13	; 0x07
    14dc:	0f c0       	rjmp	.+30     	; 0x14fc <udd_ep_trans_complet+0x1e4>
    14de:	29 81       	ldd	r18, Y+1	; 0x01
    14e0:	3a 81       	ldd	r19, Y+2	; 0x02
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	82 0f       	add	r24, r18
    14e8:	93 1f       	adc	r25, r19
    14ea:	d7 01       	movw	r26, r14
    14ec:	14 96       	adiw	r26, 0x04	; 4
    14ee:	8d 93       	st	X+, r24
    14f0:	9c 93       	st	X, r25
    14f2:	15 97       	sbiw	r26, 0x05	; 5
    14f4:	16 96       	adiw	r26, 0x06	; 6
    14f6:	ed 93       	st	X+, r30
    14f8:	fc 93       	st	X, r31
    14fa:	17 97       	sbiw	r26, 0x07	; 7
    14fc:	f7 01       	movw	r30, r14
    14fe:	02 e0       	ldi	r16, 0x02	; 2
    1500:	06 93       	lac	Z, r16
    1502:	0e c0       	rjmp	.+28     	; 0x1520 <udd_ep_trans_complet+0x208>
    1504:	88 81       	ld	r24, Y
    1506:	80 ff       	sbrs	r24, 0
    1508:	0b c0       	rjmp	.+22     	; 0x1520 <udd_ep_trans_complet+0x208>
    150a:	8e 7f       	andi	r24, 0xFE	; 254
    150c:	88 83       	st	Y, r24
    150e:	ef 81       	ldd	r30, Y+7	; 0x07
    1510:	f8 85       	ldd	r31, Y+8	; 0x08
    1512:	30 97       	sbiw	r30, 0x00	; 0
    1514:	29 f0       	breq	.+10     	; 0x1520 <udd_ep_trans_complet+0x208>
    1516:	6d 81       	ldd	r22, Y+5	; 0x05
    1518:	7e 81       	ldd	r23, Y+6	; 0x06
    151a:	4b 2d       	mov	r20, r11
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	09 95       	icall
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	df 90       	pop	r13
    152e:	cf 90       	pop	r12
    1530:	bf 90       	pop	r11
    1532:	08 95       	ret

00001534 <udd_is_high_speed>:
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	08 95       	ret

00001538 <udd_set_address>:
    1538:	80 93 c3 04 	sts	0x04C3, r24
    153c:	08 95       	ret

0000153e <udd_getaddress>:
    153e:	80 91 c3 04 	lds	r24, 0x04C3
    1542:	08 95       	ret

00001544 <udd_get_frame_number>:
    1544:	80 91 dc 22 	lds	r24, 0x22DC
    1548:	90 91 dd 22 	lds	r25, 0x22DD
    154c:	08 95       	ret

0000154e <udd_get_micro_frame_number>:
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	08 95       	ret

00001554 <udd_set_setup_payload>:
    1554:	80 93 f7 22 	sts	0x22F7, r24
    1558:	90 93 f8 22 	sts	0x22F8, r25
    155c:	60 93 f9 22 	sts	0x22F9, r22
    1560:	70 93 fa 22 	sts	0x22FA, r23
    1564:	08 95       	ret

00001566 <udd_ep_alloc>:
    1566:	e8 2f       	mov	r30, r24
    1568:	ef 70       	andi	r30, 0x0F	; 15
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	ee 0f       	add	r30, r30
    156e:	ff 1f       	adc	r31, r31
    1570:	99 27       	eor	r25, r25
    1572:	87 fd       	sbrc	r24, 7
    1574:	90 95       	com	r25
    1576:	88 27       	eor	r24, r24
    1578:	99 0f       	add	r25, r25
    157a:	88 1f       	adc	r24, r24
    157c:	99 27       	eor	r25, r25
    157e:	e8 0f       	add	r30, r24
    1580:	f9 1f       	adc	r31, r25
    1582:	ee 0f       	add	r30, r30
    1584:	ff 1f       	adc	r31, r31
    1586:	ee 0f       	add	r30, r30
    1588:	ff 1f       	adc	r31, r31
    158a:	ee 0f       	add	r30, r30
    158c:	ff 1f       	adc	r31, r31
    158e:	e4 55       	subi	r30, 0x54	; 84
    1590:	fd 4d       	sbci	r31, 0xDD	; 221
    1592:	81 81       	ldd	r24, Z+1	; 0x01
    1594:	80 7c       	andi	r24, 0xC0	; 192
    1596:	09 f0       	breq	.+2      	; 0x159a <udd_ep_alloc+0x34>
    1598:	43 c0       	rjmp	.+134    	; 0x1620 <udd_ep_alloc+0xba>
    159a:	63 70       	andi	r22, 0x03	; 3
    159c:	61 30       	cpi	r22, 0x01	; 1
    159e:	29 f0       	breq	.+10     	; 0x15aa <udd_ep_alloc+0x44>
    15a0:	10 f4       	brcc	.+4      	; 0x15a6 <udd_ep_alloc+0x40>
    15a2:	80 e4       	ldi	r24, 0x40	; 64
    15a4:	03 c0       	rjmp	.+6      	; 0x15ac <udd_ep_alloc+0x46>
    15a6:	80 e8       	ldi	r24, 0x80	; 128
    15a8:	01 c0       	rjmp	.+2      	; 0x15ac <udd_ep_alloc+0x46>
    15aa:	80 ec       	ldi	r24, 0xC0	; 192
    15ac:	40 38       	cpi	r20, 0x80	; 128
    15ae:	51 05       	cpc	r21, r1
    15b0:	e1 f0       	breq	.+56     	; 0x15ea <udd_ep_alloc+0x84>
    15b2:	50 f4       	brcc	.+20     	; 0x15c8 <udd_ep_alloc+0x62>
    15b4:	40 32       	cpi	r20, 0x20	; 32
    15b6:	51 05       	cpc	r21, r1
    15b8:	a1 f0       	breq	.+40     	; 0x15e2 <udd_ep_alloc+0x7c>
    15ba:	40 34       	cpi	r20, 0x40	; 64
    15bc:	51 05       	cpc	r21, r1
    15be:	99 f0       	breq	.+38     	; 0x15e6 <udd_ep_alloc+0x80>
    15c0:	40 31       	cpi	r20, 0x10	; 16
    15c2:	51 05       	cpc	r21, r1
    15c4:	61 f4       	brne	.+24     	; 0x15de <udd_ep_alloc+0x78>
    15c6:	19 c0       	rjmp	.+50     	; 0x15fa <udd_ep_alloc+0x94>
    15c8:	41 15       	cp	r20, r1
    15ca:	92 e0       	ldi	r25, 0x02	; 2
    15cc:	59 07       	cpc	r21, r25
    15ce:	89 f0       	breq	.+34     	; 0x15f2 <udd_ep_alloc+0x8c>
    15d0:	4f 3f       	cpi	r20, 0xFF	; 255
    15d2:	93 e0       	ldi	r25, 0x03	; 3
    15d4:	59 07       	cpc	r21, r25
    15d6:	79 f0       	breq	.+30     	; 0x15f6 <udd_ep_alloc+0x90>
    15d8:	41 15       	cp	r20, r1
    15da:	51 40       	sbci	r21, 0x01	; 1
    15dc:	41 f0       	breq	.+16     	; 0x15ee <udd_ep_alloc+0x88>
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	0d c0       	rjmp	.+26     	; 0x15fc <udd_ep_alloc+0x96>
    15e2:	22 e0       	ldi	r18, 0x02	; 2
    15e4:	0b c0       	rjmp	.+22     	; 0x15fc <udd_ep_alloc+0x96>
    15e6:	23 e0       	ldi	r18, 0x03	; 3
    15e8:	09 c0       	rjmp	.+18     	; 0x15fc <udd_ep_alloc+0x96>
    15ea:	24 e0       	ldi	r18, 0x04	; 4
    15ec:	07 c0       	rjmp	.+14     	; 0x15fc <udd_ep_alloc+0x96>
    15ee:	25 e0       	ldi	r18, 0x05	; 5
    15f0:	05 c0       	rjmp	.+10     	; 0x15fc <udd_ep_alloc+0x96>
    15f2:	26 e0       	ldi	r18, 0x06	; 6
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <udd_ep_alloc+0x96>
    15f6:	27 e0       	ldi	r18, 0x07	; 7
    15f8:	01 c0       	rjmp	.+2      	; 0x15fc <udd_ep_alloc+0x96>
    15fa:	21 e0       	ldi	r18, 0x01	; 1
    15fc:	11 82       	std	Z+1, r1	; 0x01
    15fe:	96 e0       	ldi	r25, 0x06	; 6
    1600:	90 83       	st	Z, r25
    1602:	82 2b       	or	r24, r18
    1604:	81 83       	std	Z+1, r24	; 0x01
    1606:	81 81       	ldd	r24, Z+1	; 0x01
    1608:	80 7c       	andi	r24, 0xC0	; 192
    160a:	80 3c       	cpi	r24, 0xC0	; 192
    160c:	21 f4       	brne	.+8      	; 0x1616 <udd_ep_alloc+0xb0>
    160e:	81 81       	ldd	r24, Z+1	; 0x01
    1610:	87 70       	andi	r24, 0x07	; 7
    1612:	87 30       	cpi	r24, 0x07	; 7
    1614:	39 f0       	breq	.+14     	; 0x1624 <udd_ep_alloc+0xbe>
    1616:	81 81       	ldd	r24, Z+1	; 0x01
    1618:	80 62       	ori	r24, 0x20	; 32
    161a:	81 83       	std	Z+1, r24	; 0x01
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	08 95       	ret
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	08 95       	ret
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	08 95       	ret

00001628 <udd_ep_is_halted>:
    1628:	e8 2f       	mov	r30, r24
    162a:	ef 70       	andi	r30, 0x0F	; 15
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	ee 0f       	add	r30, r30
    1630:	ff 1f       	adc	r31, r31
    1632:	99 27       	eor	r25, r25
    1634:	87 fd       	sbrc	r24, 7
    1636:	90 95       	com	r25
    1638:	88 27       	eor	r24, r24
    163a:	99 0f       	add	r25, r25
    163c:	88 1f       	adc	r24, r24
    163e:	99 27       	eor	r25, r25
    1640:	e8 0f       	add	r30, r24
    1642:	f9 1f       	adc	r31, r25
    1644:	ee 0f       	add	r30, r30
    1646:	ff 1f       	adc	r31, r31
    1648:	ee 0f       	add	r30, r30
    164a:	ff 1f       	adc	r31, r31
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	e4 55       	subi	r30, 0x54	; 84
    1652:	fd 4d       	sbci	r31, 0xDD	; 221
    1654:	81 81       	ldd	r24, Z+1	; 0x01
    1656:	82 fb       	bst	r24, 2
    1658:	88 27       	eor	r24, r24
    165a:	80 f9       	bld	r24, 0
    165c:	08 95       	ret

0000165e <udd_ep_clear_halt>:
    165e:	e8 2f       	mov	r30, r24
    1660:	ef 70       	andi	r30, 0x0F	; 15
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	ee 0f       	add	r30, r30
    1666:	ff 1f       	adc	r31, r31
    1668:	28 2f       	mov	r18, r24
    166a:	33 27       	eor	r19, r19
    166c:	27 fd       	sbrc	r18, 7
    166e:	30 95       	com	r19
    1670:	22 27       	eor	r18, r18
    1672:	33 0f       	add	r19, r19
    1674:	22 1f       	adc	r18, r18
    1676:	33 27       	eor	r19, r19
    1678:	e2 0f       	add	r30, r18
    167a:	f3 1f       	adc	r31, r19
    167c:	ee 0f       	add	r30, r30
    167e:	ff 1f       	adc	r31, r31
    1680:	ee 0f       	add	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	ee 0f       	add	r30, r30
    1686:	ff 1f       	adc	r31, r31
    1688:	e4 55       	subi	r30, 0x54	; 84
    168a:	fd 4d       	sbci	r31, 0xDD	; 221
    168c:	91 81       	ldd	r25, Z+1	; 0x01
    168e:	92 ff       	sbrs	r25, 2
    1690:	0e c0       	rjmp	.+28     	; 0x16ae <udd_ep_clear_halt+0x50>
    1692:	91 81       	ldd	r25, Z+1	; 0x01
    1694:	9b 7f       	andi	r25, 0xFB	; 251
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	b5 dd       	rcall	.-1174   	; 0x1204 <udd_ep_get_job>
    169a:	fc 01       	movw	r30, r24
    169c:	80 81       	ld	r24, Z
    169e:	80 ff       	sbrs	r24, 0
    16a0:	06 c0       	rjmp	.+12     	; 0x16ae <udd_ep_clear_halt+0x50>
    16a2:	8e 7f       	andi	r24, 0xFE	; 254
    16a4:	80 83       	st	Z, r24
    16a6:	07 80       	ldd	r0, Z+7	; 0x07
    16a8:	f0 85       	ldd	r31, Z+8	; 0x08
    16aa:	e0 2d       	mov	r30, r0
    16ac:	09 95       	icall
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	08 95       	ret

000016b2 <udd_ep_run>:
    16b2:	7f 92       	push	r7
    16b4:	8f 92       	push	r8
    16b6:	9f 92       	push	r9
    16b8:	af 92       	push	r10
    16ba:	bf 92       	push	r11
    16bc:	cf 92       	push	r12
    16be:	df 92       	push	r13
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	98 2e       	mov	r9, r24
    16ce:	86 2e       	mov	r8, r22
    16d0:	5a 01       	movw	r10, r20
    16d2:	69 01       	movw	r12, r18
    16d4:	97 dd       	rcall	.-1234   	; 0x1204 <udd_ep_get_job>
    16d6:	7c 01       	movw	r14, r24
    16d8:	79 2c       	mov	r7, r9
    16da:	77 1c       	adc	r7, r7
    16dc:	77 24       	eor	r7, r7
    16de:	77 1c       	adc	r7, r7
    16e0:	c9 2d       	mov	r28, r9
    16e2:	cf 70       	andi	r28, 0x0F	; 15
    16e4:	d0 e0       	ldi	r29, 0x00	; 0
    16e6:	cc 0f       	add	r28, r28
    16e8:	dd 1f       	adc	r29, r29
    16ea:	c7 0d       	add	r28, r7
    16ec:	d1 1d       	adc	r29, r1
    16ee:	cc 0f       	add	r28, r28
    16f0:	dd 1f       	adc	r29, r29
    16f2:	cc 0f       	add	r28, r28
    16f4:	dd 1f       	adc	r29, r29
    16f6:	cc 0f       	add	r28, r28
    16f8:	dd 1f       	adc	r29, r29
    16fa:	c4 55       	subi	r28, 0x54	; 84
    16fc:	dd 4d       	sbci	r29, 0xDD	; 221
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	80 7c       	andi	r24, 0xC0	; 192
    1702:	09 f4       	brne	.+2      	; 0x1706 <udd_ep_run+0x54>
    1704:	4b c0       	rjmp	.+150    	; 0x179c <udd_ep_run+0xea>
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	80 7c       	andi	r24, 0xC0	; 192
    170a:	80 3c       	cpi	r24, 0xC0	; 192
    170c:	19 f0       	breq	.+6      	; 0x1714 <udd_ep_run+0x62>
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	82 fd       	sbrc	r24, 2
    1712:	46 c0       	rjmp	.+140    	; 0x17a0 <udd_ep_run+0xee>
    1714:	8f b7       	in	r24, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	f7 01       	movw	r30, r14
    171a:	90 81       	ld	r25, Z
    171c:	90 ff       	sbrs	r25, 0
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <udd_ep_run+0x74>
    1720:	8f bf       	out	0x3f, r24	; 63
    1722:	71 2c       	mov	r7, r1
    1724:	3e c0       	rjmp	.+124    	; 0x17a2 <udd_ep_run+0xf0>
    1726:	f7 01       	movw	r30, r14
    1728:	90 81       	ld	r25, Z
    172a:	91 60       	ori	r25, 0x01	; 1
    172c:	90 83       	st	Z, r25
    172e:	8f bf       	out	0x3f, r24	; 63
    1730:	f7 01       	movw	r30, r14
    1732:	a1 82       	std	Z+1, r10	; 0x01
    1734:	b2 82       	std	Z+2, r11	; 0x02
    1736:	c3 82       	std	Z+3, r12	; 0x03
    1738:	d4 82       	std	Z+4, r13	; 0x04
    173a:	15 82       	std	Z+5, r1	; 0x05
    173c:	16 82       	std	Z+6, r1	; 0x06
    173e:	07 83       	std	Z+7, r16	; 0x07
    1740:	10 87       	std	Z+8, r17	; 0x08
    1742:	81 10       	cpse	r8, r1
    1744:	06 c0       	rjmp	.+12     	; 0x1752 <udd_ep_run+0xa0>
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	c1 14       	cp	r12, r1
    174a:	d1 04       	cpc	r13, r1
    174c:	19 f0       	breq	.+6      	; 0x1754 <udd_ep_run+0xa2>
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	01 c0       	rjmp	.+2      	; 0x1754 <udd_ep_run+0xa2>
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	f7 01       	movw	r30, r14
    1756:	80 81       	ld	r24, Z
    1758:	90 fb       	bst	r25, 0
    175a:	81 f9       	bld	r24, 1
    175c:	8b 7f       	andi	r24, 0xFB	; 251
    175e:	80 83       	st	Z, r24
    1760:	77 20       	and	r7, r7
    1762:	19 f0       	breq	.+6      	; 0x176a <udd_ep_run+0xb8>
    1764:	1e 82       	std	Y+6, r1	; 0x06
    1766:	1f 82       	std	Y+7, r1	; 0x07
    1768:	14 c0       	rjmp	.+40     	; 0x1792 <udd_ep_run+0xe0>
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	80 7c       	andi	r24, 0xC0	; 192
    176e:	80 3c       	cpi	r24, 0xC0	; 192
    1770:	61 f4       	brne	.+24     	; 0x178a <udd_ep_run+0xd8>
    1772:	ce 01       	movw	r24, r28
    1774:	22 dd       	rcall	.-1468   	; 0x11ba <udd_ep_get_size>
    1776:	bc 01       	movw	r22, r24
    1778:	c6 01       	movw	r24, r12
    177a:	f3 d5       	rcall	.+3046   	; 0x2362 <__udivmodhi4>
    177c:	89 2b       	or	r24, r25
    177e:	29 f0       	breq	.+10     	; 0x178a <udd_ep_run+0xd8>
    1780:	f7 01       	movw	r30, r14
    1782:	80 81       	ld	r24, Z
    1784:	8e 7f       	andi	r24, 0xFE	; 254
    1786:	80 83       	st	Z, r24
    1788:	0c c0       	rjmp	.+24     	; 0x17a2 <udd_ep_run+0xf0>
    178a:	1a 82       	std	Y+2, r1	; 0x02
    178c:	1b 82       	std	Y+3, r1	; 0x03
    178e:	1e 82       	std	Y+6, r1	; 0x06
    1790:	1f 82       	std	Y+7, r1	; 0x07
    1792:	89 2d       	mov	r24, r9
    1794:	c1 dd       	rcall	.-1150   	; 0x1318 <udd_ep_trans_complet>
    1796:	77 24       	eor	r7, r7
    1798:	73 94       	inc	r7
    179a:	03 c0       	rjmp	.+6      	; 0x17a2 <udd_ep_run+0xf0>
    179c:	71 2c       	mov	r7, r1
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <udd_ep_run+0xf0>
    17a0:	71 2c       	mov	r7, r1
    17a2:	87 2d       	mov	r24, r7
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	df 90       	pop	r13
    17b2:	cf 90       	pop	r12
    17b4:	bf 90       	pop	r11
    17b6:	af 90       	pop	r10
    17b8:	9f 90       	pop	r9
    17ba:	8f 90       	pop	r8
    17bc:	7f 90       	pop	r7
    17be:	08 95       	ret

000017c0 <udd_ep_abort>:
    17c0:	ff 92       	push	r15
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	18 2f       	mov	r17, r24
    17cc:	f8 2e       	mov	r15, r24
    17ce:	ff 1c       	adc	r15, r15
    17d0:	ff 24       	eor	r15, r15
    17d2:	ff 1c       	adc	r15, r15
    17d4:	c8 2f       	mov	r28, r24
    17d6:	cf 70       	andi	r28, 0x0F	; 15
    17d8:	d0 e0       	ldi	r29, 0x00	; 0
    17da:	cc 0f       	add	r28, r28
    17dc:	dd 1f       	adc	r29, r29
    17de:	cf 0d       	add	r28, r15
    17e0:	d1 1d       	adc	r29, r1
    17e2:	cc 0f       	add	r28, r28
    17e4:	dd 1f       	adc	r29, r29
    17e6:	cc 0f       	add	r28, r28
    17e8:	dd 1f       	adc	r29, r29
    17ea:	cc 0f       	add	r28, r28
    17ec:	dd 1f       	adc	r29, r29
    17ee:	c4 55       	subi	r28, 0x54	; 84
    17f0:	dd 4d       	sbci	r29, 0xDD	; 221
    17f2:	08 dd       	rcall	.-1520   	; 0x1204 <udd_ep_get_job>
    17f4:	dc 01       	movw	r26, r24
    17f6:	fe 01       	movw	r30, r28
    17f8:	02 e0       	ldi	r16, 0x02	; 2
    17fa:	05 93       	las	Z, r16
    17fc:	8c 91       	ld	r24, X
    17fe:	80 ff       	sbrs	r24, 0
    1800:	12 c0       	rjmp	.+36     	; 0x1826 <udd_ep_abort+0x66>
    1802:	8e 7f       	andi	r24, 0xFE	; 254
    1804:	8c 93       	st	X, r24
    1806:	17 96       	adiw	r26, 0x07	; 7
    1808:	ed 91       	ld	r30, X+
    180a:	fc 91       	ld	r31, X
    180c:	18 97       	sbiw	r26, 0x08	; 8
    180e:	30 97       	sbiw	r30, 0x00	; 0
    1810:	51 f0       	breq	.+20     	; 0x1826 <udd_ep_abort+0x66>
    1812:	ff 20       	and	r15, r15
    1814:	19 f0       	breq	.+6      	; 0x181c <udd_ep_abort+0x5c>
    1816:	6e 81       	ldd	r22, Y+6	; 0x06
    1818:	7f 81       	ldd	r23, Y+7	; 0x07
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <udd_ep_abort+0x60>
    181c:	6a 81       	ldd	r22, Y+2	; 0x02
    181e:	7b 81       	ldd	r23, Y+3	; 0x03
    1820:	41 2f       	mov	r20, r17
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	09 95       	icall
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	08 95       	ret

00001832 <udd_ep_free>:
    1832:	cf 93       	push	r28
    1834:	c8 2f       	mov	r28, r24
    1836:	c4 df       	rcall	.-120    	; 0x17c0 <udd_ep_abort>
    1838:	ec 2f       	mov	r30, r28
    183a:	ef 70       	andi	r30, 0x0F	; 15
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	ee 0f       	add	r30, r30
    1840:	ff 1f       	adc	r31, r31
    1842:	8c 2f       	mov	r24, r28
    1844:	99 27       	eor	r25, r25
    1846:	87 fd       	sbrc	r24, 7
    1848:	90 95       	com	r25
    184a:	88 27       	eor	r24, r24
    184c:	99 0f       	add	r25, r25
    184e:	88 1f       	adc	r24, r24
    1850:	99 27       	eor	r25, r25
    1852:	e8 0f       	add	r30, r24
    1854:	f9 1f       	adc	r31, r25
    1856:	ee 0f       	add	r30, r30
    1858:	ff 1f       	adc	r31, r31
    185a:	ee 0f       	add	r30, r30
    185c:	ff 1f       	adc	r31, r31
    185e:	ee 0f       	add	r30, r30
    1860:	ff 1f       	adc	r31, r31
    1862:	e4 55       	subi	r30, 0x54	; 84
    1864:	fd 4d       	sbci	r31, 0xDD	; 221
    1866:	11 82       	std	Z+1, r1	; 0x01
    1868:	cf 91       	pop	r28
    186a:	08 95       	ret

0000186c <udd_ep_set_halt>:
    186c:	0f 93       	push	r16
    186e:	e8 2f       	mov	r30, r24
    1870:	ef 70       	andi	r30, 0x0F	; 15
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	ee 0f       	add	r30, r30
    1876:	ff 1f       	adc	r31, r31
    1878:	28 2f       	mov	r18, r24
    187a:	33 27       	eor	r19, r19
    187c:	27 fd       	sbrc	r18, 7
    187e:	30 95       	com	r19
    1880:	22 27       	eor	r18, r18
    1882:	33 0f       	add	r19, r19
    1884:	22 1f       	adc	r18, r18
    1886:	33 27       	eor	r19, r19
    1888:	e2 0f       	add	r30, r18
    188a:	f3 1f       	adc	r31, r19
    188c:	ee 0f       	add	r30, r30
    188e:	ff 1f       	adc	r31, r31
    1890:	ee 0f       	add	r30, r30
    1892:	ff 1f       	adc	r31, r31
    1894:	ee 0f       	add	r30, r30
    1896:	ff 1f       	adc	r31, r31
    1898:	e4 55       	subi	r30, 0x54	; 84
    189a:	fd 4d       	sbci	r31, 0xDD	; 221
    189c:	91 81       	ldd	r25, Z+1	; 0x01
    189e:	94 60       	ori	r25, 0x04	; 4
    18a0:	91 83       	std	Z+1, r25	; 0x01
    18a2:	01 e0       	ldi	r16, 0x01	; 1
    18a4:	06 93       	lac	Z, r16
    18a6:	8c df       	rcall	.-232    	; 0x17c0 <udd_ep_abort>
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	0f 91       	pop	r16
    18ac:	08 95       	ret

000018ae <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    18ae:	1f 92       	push	r1
    18b0:	0f 92       	push	r0
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	0f 92       	push	r0
    18b6:	11 24       	eor	r1, r1
    18b8:	0f 93       	push	r16
    18ba:	2f 93       	push	r18
    18bc:	3f 93       	push	r19
    18be:	4f 93       	push	r20
    18c0:	5f 93       	push	r21
    18c2:	6f 93       	push	r22
    18c4:	7f 93       	push	r23
    18c6:	8f 93       	push	r24
    18c8:	9f 93       	push	r25
    18ca:	af 93       	push	r26
    18cc:	bf 93       	push	r27
    18ce:	ef 93       	push	r30
    18d0:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    18d2:	80 91 cb 04 	lds	r24, 0x04CB
    18d6:	88 23       	and	r24, r24
    18d8:	2c f4       	brge	.+10     	; 0x18e4 <__vector_125+0x36>
		udd_ack_start_of_frame_event();
    18da:	80 e8       	ldi	r24, 0x80	; 128
    18dc:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    18e0:	33 d8       	rcall	.-3994   	; 0x948 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    18e2:	88 c0       	rjmp	.+272    	; 0x19f4 <__vector_125+0x146>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    18e4:	80 91 cb 04 	lds	r24, 0x04CB
    18e8:	82 ff       	sbrs	r24, 2
    18ea:	20 c0       	rjmp	.+64     	; 0x192c <__vector_125+0x7e>
		udd_ack_underflow_event();
    18ec:	84 e0       	ldi	r24, 0x04	; 4
    18ee:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    18f2:	80 91 b4 22 	lds	r24, 0x22B4
    18f6:	86 ff       	sbrs	r24, 6
    18f8:	7d c0       	rjmp	.+250    	; 0x19f4 <__vector_125+0x146>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    18fa:	80 91 cc 04 	lds	r24, 0x04CC
    18fe:	81 fd       	sbrc	r24, 1
    1900:	79 c0       	rjmp	.+242    	; 0x19f4 <__vector_125+0x146>
    1902:	9b dc       	rcall	.-1738   	; 0x123a <udd_ctrl_interrupt_tc_setup>
    1904:	81 11       	cpse	r24, r1
    1906:	76 c0       	rjmp	.+236    	; 0x19f4 <__vector_125+0x146>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1908:	80 91 9e 22 	lds	r24, 0x229E
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	11 f4       	brne	.+4      	; 0x1914 <__vector_125+0x66>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1910:	d0 db       	rcall	.-2144   	; 0x10b2 <udd_ctrl_send_zlp_in>
    1912:	70 c0       	rjmp	.+224    	; 0x19f4 <__vector_125+0x146>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1914:	84 30       	cpi	r24, 0x04	; 4
    1916:	09 f0       	breq	.+2      	; 0x191a <__vector_125+0x6c>
    1918:	6d c0       	rjmp	.+218    	; 0x19f4 <__vector_125+0x146>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    191a:	e5 eb       	ldi	r30, 0xB5	; 181
    191c:	f2 e2       	ldi	r31, 0x22	; 34
    191e:	04 e0       	ldi	r16, 0x04	; 4
    1920:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1922:	ed ea       	ldi	r30, 0xAD	; 173
    1924:	f2 e2       	ldi	r31, 0x22	; 34
    1926:	04 e0       	ldi	r16, 0x04	; 4
    1928:	05 93       	las	Z, r16
    192a:	64 c0       	rjmp	.+200    	; 0x19f4 <__vector_125+0x146>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    192c:	80 91 cb 04 	lds	r24, 0x04CB
    1930:	81 ff       	sbrs	r24, 1
    1932:	5b c0       	rjmp	.+182    	; 0x19ea <__vector_125+0x13c>
		udd_ack_overflow_event();
    1934:	82 e0       	ldi	r24, 0x02	; 2
    1936:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    193a:	80 91 ac 22 	lds	r24, 0x22AC
    193e:	86 ff       	sbrs	r24, 6
    1940:	59 c0       	rjmp	.+178    	; 0x19f4 <__vector_125+0x146>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1942:	80 91 cc 04 	lds	r24, 0x04CC
    1946:	81 fd       	sbrc	r24, 1
    1948:	55 c0       	rjmp	.+170    	; 0x19f4 <__vector_125+0x146>
    194a:	77 dc       	rcall	.-1810   	; 0x123a <udd_ctrl_interrupt_tc_setup>
    194c:	81 11       	cpse	r24, r1
    194e:	52 c0       	rjmp	.+164    	; 0x19f4 <__vector_125+0x146>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1950:	80 91 9e 22 	lds	r24, 0x229E
    1954:	82 30       	cpi	r24, 0x02	; 2
    1956:	41 f4       	brne	.+16     	; 0x1968 <__vector_125+0xba>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1958:	84 e0       	ldi	r24, 0x04	; 4
    195a:	80 93 9e 22 	sts	0x229E, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    195e:	ec ea       	ldi	r30, 0xAC	; 172
    1960:	f2 e2       	ldi	r31, 0x22	; 34
    1962:	02 e0       	ldi	r16, 0x02	; 2
    1964:	06 93       	lac	Z, r16
    1966:	46 c0       	rjmp	.+140    	; 0x19f4 <__vector_125+0x146>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1968:	83 30       	cpi	r24, 0x03	; 3
    196a:	09 f0       	breq	.+2      	; 0x196e <__vector_125+0xc0>
    196c:	43 c0       	rjmp	.+134    	; 0x19f4 <__vector_125+0x146>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    196e:	e5 eb       	ldi	r30, 0xB5	; 181
    1970:	f2 e2       	ldi	r31, 0x22	; 34
    1972:	04 e0       	ldi	r16, 0x04	; 4
    1974:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1976:	ed ea       	ldi	r30, 0xAD	; 173
    1978:	f2 e2       	ldi	r31, 0x22	; 34
    197a:	04 e0       	ldi	r16, 0x04	; 4
    197c:	05 93       	las	Z, r16
    197e:	3a c0       	rjmp	.+116    	; 0x19f4 <__vector_125+0x146>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1980:	80 e1       	ldi	r24, 0x10	; 16
    1982:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	1b df       	rcall	.-458    	; 0x17c0 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    198a:	81 e8       	ldi	r24, 0x81	; 129
    198c:	19 df       	rcall	.-462    	; 0x17c0 <udd_ep_abort>
		}
#endif
		udc_reset();
    198e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1992:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1996:	ed ea       	ldi	r30, 0xAD	; 173
    1998:	f2 e2       	ldi	r31, 0x22	; 34
    199a:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    199c:	96 e0       	ldi	r25, 0x06	; 6
    199e:	90 93 ac 22 	sts	0x22AC, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    19a2:	83 e4       	ldi	r24, 0x43	; 67
    19a4:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    19a6:	e5 eb       	ldi	r30, 0xB5	; 181
    19a8:	f2 e2       	ldi	r31, 0x22	; 34
    19aa:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    19ac:	90 93 b4 22 	sts	0x22B4, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    19b0:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    19b2:	8a e5       	ldi	r24, 0x5A	; 90
    19b4:	92 e2       	ldi	r25, 0x22	; 34
    19b6:	80 93 b0 22 	sts	0x22B0, r24
    19ba:	90 93 b1 22 	sts	0x22B1, r25
		// Reset endpoint control management
		udd_ctrl_init();
    19be:	40 db       	rcall	.-2432   	; 0x1040 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    19c0:	19 c0       	rjmp	.+50     	; 0x19f4 <__vector_125+0x146>
	}

	if (udd_is_suspend_event()) {
    19c2:	80 91 cb 04 	lds	r24, 0x04CB
    19c6:	86 ff       	sbrs	r24, 6
    19c8:	06 c0       	rjmp	.+12     	; 0x19d6 <__vector_125+0x128>
		udd_ack_suspend_event();
    19ca:	80 e4       	ldi	r24, 0x40	; 64
    19cc:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	17 db       	rcall	.-2514   	; 0x1002 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    19d4:	0f c0       	rjmp	.+30     	; 0x19f4 <__vector_125+0x146>
	}

	if (udd_is_resume_event()) {
    19d6:	80 91 cb 04 	lds	r24, 0x04CB
    19da:	85 ff       	sbrs	r24, 5
    19dc:	0b c0       	rjmp	.+22     	; 0x19f4 <__vector_125+0x146>
		udd_ack_resume_event();
    19de:	80 e2       	ldi	r24, 0x20	; 32
    19e0:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	0d db       	rcall	.-2534   	; 0x1002 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    19e8:	05 c0       	rjmp	.+10     	; 0x19f4 <__vector_125+0x146>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    19ea:	80 91 cb 04 	lds	r24, 0x04CB
    19ee:	84 ff       	sbrs	r24, 4
    19f0:	e8 cf       	rjmp	.-48     	; 0x19c2 <__vector_125+0x114>
    19f2:	c6 cf       	rjmp	.-116    	; 0x1980 <__vector_125+0xd2>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    19f4:	ff 91       	pop	r31
    19f6:	ef 91       	pop	r30
    19f8:	bf 91       	pop	r27
    19fa:	af 91       	pop	r26
    19fc:	9f 91       	pop	r25
    19fe:	8f 91       	pop	r24
    1a00:	7f 91       	pop	r23
    1a02:	6f 91       	pop	r22
    1a04:	5f 91       	pop	r21
    1a06:	4f 91       	pop	r20
    1a08:	3f 91       	pop	r19
    1a0a:	2f 91       	pop	r18
    1a0c:	0f 91       	pop	r16
    1a0e:	0f 90       	pop	r0
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	0f 90       	pop	r0
    1a14:	1f 90       	pop	r1
    1a16:	18 95       	reti

00001a18 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1a18:	1f 92       	push	r1
    1a1a:	0f 92       	push	r0
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	0f 92       	push	r0
    1a20:	11 24       	eor	r1, r1
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	2f 93       	push	r18
    1a28:	3f 93       	push	r19
    1a2a:	4f 93       	push	r20
    1a2c:	5f 93       	push	r21
    1a2e:	6f 93       	push	r22
    1a30:	7f 93       	push	r23
    1a32:	8f 93       	push	r24
    1a34:	9f 93       	push	r25
    1a36:	af 93       	push	r26
    1a38:	bf 93       	push	r27
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	ef 93       	push	r30
    1a40:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1a42:	80 91 cc 04 	lds	r24, 0x04CC
    1a46:	81 fd       	sbrc	r24, 1
    1a48:	03 c0       	rjmp	.+6      	; 0x1a50 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    1a4a:	f7 db       	rcall	.-2066   	; 0x123a <udd_ctrl_interrupt_tc_setup>
    1a4c:	81 11       	cpse	r24, r1
    1a4e:	b8 c0       	rjmp	.+368    	; 0x1bc0 <__vector_126+0x1a8>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1a56:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    1a5a:	81 95       	neg	r24
    1a5c:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    1a5e:	ec ea       	ldi	r30, 0xAC	; 172
    1a60:	f2 e2       	ldi	r31, 0x22	; 34
    1a62:	e8 1b       	sub	r30, r24
    1a64:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1a66:	20 81       	ld	r18, Z
    1a68:	31 81       	ldd	r19, Z+1	; 0x01
    1a6a:	2c 5a       	subi	r18, 0xAC	; 172
    1a6c:	32 42       	sbci	r19, 0x22	; 34
    1a6e:	36 95       	lsr	r19
    1a70:	27 95       	ror	r18
    1a72:	36 95       	lsr	r19
    1a74:	27 95       	ror	r18
    1a76:	36 95       	lsr	r19
    1a78:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    1a7a:	82 2f       	mov	r24, r18
    1a7c:	86 95       	lsr	r24
    1a7e:	20 ff       	sbrs	r18, 0
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <__vector_126+0x6e>
    1a82:	90 e8       	ldi	r25, 0x80	; 128
    1a84:	01 c0       	rjmp	.+2      	; 0x1a88 <__vector_126+0x70>
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1a8a:	e8 2f       	mov	r30, r24
    1a8c:	ef 70       	andi	r30, 0x0F	; 15
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	ee 0f       	add	r30, r30
    1a92:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    1a94:	28 2f       	mov	r18, r24
    1a96:	33 27       	eor	r19, r19
    1a98:	27 fd       	sbrc	r18, 7
    1a9a:	30 95       	com	r19
    1a9c:	22 27       	eor	r18, r18
    1a9e:	33 0f       	add	r19, r19
    1aa0:	22 1f       	adc	r18, r18
    1aa2:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1aa4:	e2 0f       	add	r30, r18
    1aa6:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    1aa8:	ee 0f       	add	r30, r30
    1aaa:	ff 1f       	adc	r31, r31
    1aac:	ee 0f       	add	r30, r30
    1aae:	ff 1f       	adc	r31, r31
    1ab0:	ee 0f       	add	r30, r30
    1ab2:	ff 1f       	adc	r31, r31
    1ab4:	e4 55       	subi	r30, 0x54	; 84
    1ab6:	fd 4d       	sbci	r31, 0xDD	; 221
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1ab8:	90 81       	ld	r25, Z
    1aba:	95 ff       	sbrs	r25, 5
    1abc:	81 c0       	rjmp	.+258    	; 0x1bc0 <__vector_126+0x1a8>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1abe:	00 e2       	ldi	r16, 0x20	; 32
    1ac0:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    1ac2:	81 11       	cpse	r24, r1
    1ac4:	78 c0       	rjmp	.+240    	; 0x1bb6 <__vector_126+0x19e>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1ac6:	80 91 9e 22 	lds	r24, 0x229E
    1aca:	84 30       	cpi	r24, 0x04	; 4
    1acc:	19 f4       	brne	.+6      	; 0x1ad4 <__vector_126+0xbc>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    1ace:	ff da       	rcall	.-2562   	; 0x10ce <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1ad0:	b7 da       	rcall	.-2706   	; 0x1040 <udd_ctrl_init>
    1ad2:	76 c0       	rjmp	.+236    	; 0x1bc0 <__vector_126+0x1a8>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1ad4:	c0 91 ae 22 	lds	r28, 0x22AE
    1ad8:	d0 91 af 22 	lds	r29, 0x22AF

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1adc:	80 91 f9 22 	lds	r24, 0x22F9
    1ae0:	90 91 fa 22 	lds	r25, 0x22FA
    1ae4:	00 91 9a 22 	lds	r16, 0x229A
    1ae8:	10 91 9b 22 	lds	r17, 0x229B
    1aec:	98 01       	movw	r18, r16
    1aee:	2c 0f       	add	r18, r28
    1af0:	3d 1f       	adc	r19, r29
    1af2:	82 17       	cp	r24, r18
    1af4:	93 07       	cpc	r25, r19
    1af6:	18 f4       	brcc	.+6      	; 0x1afe <__vector_126+0xe6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1af8:	ec 01       	movw	r28, r24
    1afa:	c0 1b       	sub	r28, r16
    1afc:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    1afe:	80 91 f7 22 	lds	r24, 0x22F7
    1b02:	90 91 f8 22 	lds	r25, 0x22F8
    1b06:	ae 01       	movw	r20, r28
    1b08:	6a e5       	ldi	r22, 0x5A	; 90
    1b0a:	72 e2       	ldi	r23, 0x22	; 34
    1b0c:	80 0f       	add	r24, r16
    1b0e:	91 1f       	adc	r25, r17
    1b10:	42 d4       	rcall	.+2180   	; 0x2396 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1b12:	0c 0f       	add	r16, r28
    1b14:	1d 1f       	adc	r17, r29
    1b16:	00 93 9a 22 	sts	0x229A, r16
    1b1a:	10 93 9b 22 	sts	0x229B, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1b1e:	c0 34       	cpi	r28, 0x40	; 64
    1b20:	d1 05       	cpc	r29, r1
    1b22:	69 f4       	brne	.+26     	; 0x1b3e <__vector_126+0x126>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1b24:	80 91 9c 22 	lds	r24, 0x229C
    1b28:	90 91 9d 22 	lds	r25, 0x229D
    1b2c:	80 0f       	add	r24, r16
    1b2e:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1b30:	20 91 f5 22 	lds	r18, 0x22F5
    1b34:	30 91 f6 22 	lds	r19, 0x22F6
    1b38:	82 17       	cp	r24, r18
    1b3a:	93 07       	cpc	r25, r19
    1b3c:	88 f0       	brcs	.+34     	; 0x1b60 <__vector_126+0x148>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1b3e:	00 93 f9 22 	sts	0x22F9, r16
    1b42:	10 93 fa 22 	sts	0x22FA, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1b46:	e0 91 fd 22 	lds	r30, 0x22FD
    1b4a:	f0 91 fe 22 	lds	r31, 0x22FE
    1b4e:	30 97       	sbiw	r30, 0x00	; 0
    1b50:	29 f0       	breq	.+10     	; 0x1b5c <__vector_126+0x144>
			if (!udd_g_ctrlreq.over_under_run()) {
    1b52:	09 95       	icall
    1b54:	81 11       	cpse	r24, r1
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <__vector_126+0x144>
				// Stall ZLP
				udd_ctrl_stall_data();
    1b58:	9e da       	rcall	.-2756   	; 0x1096 <udd_ctrl_stall_data>
    1b5a:	32 c0       	rjmp	.+100    	; 0x1bc0 <__vector_126+0x1a8>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    1b5c:	aa da       	rcall	.-2732   	; 0x10b2 <udd_ctrl_send_zlp_in>
    1b5e:	30 c0       	rjmp	.+96     	; 0x1bc0 <__vector_126+0x1a8>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1b60:	80 91 f9 22 	lds	r24, 0x22F9
    1b64:	90 91 fa 22 	lds	r25, 0x22FA
    1b68:	08 17       	cp	r16, r24
    1b6a:	19 07       	cpc	r17, r25
    1b6c:	f9 f4       	brne	.+62     	; 0x1bac <__vector_126+0x194>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1b6e:	e0 91 fd 22 	lds	r30, 0x22FD
    1b72:	f0 91 fe 22 	lds	r31, 0x22FE
    1b76:	30 97       	sbiw	r30, 0x00	; 0
    1b78:	11 f4       	brne	.+4      	; 0x1b7e <__vector_126+0x166>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    1b7a:	8d da       	rcall	.-2790   	; 0x1096 <udd_ctrl_stall_data>
    1b7c:	21 c0       	rjmp	.+66     	; 0x1bc0 <__vector_126+0x1a8>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1b7e:	09 95       	icall
    1b80:	81 11       	cpse	r24, r1
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <__vector_126+0x170>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1b84:	88 da       	rcall	.-2800   	; 0x1096 <udd_ctrl_stall_data>
    1b86:	1c c0       	rjmp	.+56     	; 0x1bc0 <__vector_126+0x1a8>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1b88:	20 91 9c 22 	lds	r18, 0x229C
    1b8c:	30 91 9d 22 	lds	r19, 0x229D
    1b90:	80 91 9a 22 	lds	r24, 0x229A
    1b94:	90 91 9b 22 	lds	r25, 0x229B
    1b98:	82 0f       	add	r24, r18
    1b9a:	93 1f       	adc	r25, r19
    1b9c:	80 93 9c 22 	sts	0x229C, r24
    1ba0:	90 93 9d 22 	sts	0x229D, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1ba4:	10 92 9a 22 	sts	0x229A, r1
    1ba8:	10 92 9b 22 	sts	0x229B, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1bac:	ec ea       	ldi	r30, 0xAC	; 172
    1bae:	f2 e2       	ldi	r31, 0x22	; 34
    1bb0:	02 e0       	ldi	r16, 0x02	; 2
    1bb2:	06 93       	lac	Z, r16
    1bb4:	05 c0       	rjmp	.+10     	; 0x1bc0 <__vector_126+0x1a8>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1bb6:	80 38       	cpi	r24, 0x80	; 128
    1bb8:	11 f4       	brne	.+4      	; 0x1bbe <__vector_126+0x1a6>
		udd_ctrl_in_sent();
    1bba:	91 da       	rcall	.-2782   	; 0x10de <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <__vector_126+0x1a8>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1bbe:	ac db       	rcall	.-2216   	; 0x1318 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    1bc0:	ff 91       	pop	r31
    1bc2:	ef 91       	pop	r30
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	bf 91       	pop	r27
    1bca:	af 91       	pop	r26
    1bcc:	9f 91       	pop	r25
    1bce:	8f 91       	pop	r24
    1bd0:	7f 91       	pop	r23
    1bd2:	6f 91       	pop	r22
    1bd4:	5f 91       	pop	r21
    1bd6:	4f 91       	pop	r20
    1bd8:	3f 91       	pop	r19
    1bda:	2f 91       	pop	r18
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	0f 90       	pop	r0
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	0f 90       	pop	r0
    1be6:	1f 90       	pop	r1
    1be8:	18 95       	reti

00001bea <init_DSD_PLC>:
	else
	{
		aux=ON;
	}
	return aux;
}
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	0e 94 23 01 	call	0x246	; 0x246 <sysclk_init>
    1bf2:	26 d1       	rcall	.+588    	; 0x1e40 <switch_init>
    1bf4:	e0 ee       	ldi	r30, 0xE0	; 224
    1bf6:	f7 e0       	ldi	r31, 0x07	; 7
    1bf8:	82 e0       	ldi	r24, 0x02	; 2
    1bfa:	82 83       	std	Z+2, r24	; 0x02
    1bfc:	91 e0       	ldi	r25, 0x01	; 1
    1bfe:	92 83       	std	Z+2, r25	; 0x02
    1c00:	e0 e8       	ldi	r30, 0x80	; 128
    1c02:	f6 e0       	ldi	r31, 0x06	; 6
    1c04:	38 e0       	ldi	r19, 0x08	; 8
    1c06:	32 83       	std	Z+2, r19	; 0x02
    1c08:	24 e0       	ldi	r18, 0x04	; 4
    1c0a:	22 83       	std	Z+2, r18	; 0x02
    1c0c:	82 83       	std	Z+2, r24	; 0x02
    1c0e:	92 83       	std	Z+2, r25	; 0x02
    1c10:	e0 e6       	ldi	r30, 0x60	; 96
    1c12:	f6 e0       	ldi	r31, 0x06	; 6
    1c14:	40 e2       	ldi	r20, 0x20	; 32
    1c16:	42 83       	std	Z+2, r20	; 0x02
    1c18:	50 e1       	ldi	r21, 0x10	; 16
    1c1a:	52 83       	std	Z+2, r21	; 0x02
    1c1c:	e0 e4       	ldi	r30, 0x40	; 64
    1c1e:	f6 e0       	ldi	r31, 0x06	; 6
    1c20:	60 e8       	ldi	r22, 0x80	; 128
    1c22:	62 83       	std	Z+2, r22	; 0x02
    1c24:	70 e4       	ldi	r23, 0x40	; 64
    1c26:	72 83       	std	Z+2, r23	; 0x02
    1c28:	42 83       	std	Z+2, r20	; 0x02
    1c2a:	52 83       	std	Z+2, r21	; 0x02
    1c2c:	a0 e0       	ldi	r26, 0x00	; 0
    1c2e:	b6 e0       	ldi	r27, 0x06	; 6
    1c30:	11 96       	adiw	r26, 0x01	; 1
    1c32:	3c 93       	st	X, r19
    1c34:	11 97       	sbiw	r26, 0x01	; 1
    1c36:	11 96       	adiw	r26, 0x01	; 1
    1c38:	5c 93       	st	X, r21
    1c3a:	11 97       	sbiw	r26, 0x01	; 1
    1c3c:	11 96       	adiw	r26, 0x01	; 1
    1c3e:	4c 93       	st	X, r20
    1c40:	11 97       	sbiw	r26, 0x01	; 1
    1c42:	11 96       	adiw	r26, 0x01	; 1
    1c44:	7c 93       	st	X, r23
    1c46:	11 97       	sbiw	r26, 0x01	; 1
    1c48:	11 96       	adiw	r26, 0x01	; 1
    1c4a:	6c 93       	st	X, r22
    1c4c:	11 97       	sbiw	r26, 0x01	; 1
    1c4e:	c0 e2       	ldi	r28, 0x20	; 32
    1c50:	d6 e0       	ldi	r29, 0x06	; 6
    1c52:	99 83       	std	Y+1, r25	; 0x01
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	29 83       	std	Y+1, r18	; 0x01
    1c58:	39 83       	std	Y+1, r19	; 0x01
    1c5a:	91 83       	std	Z+1, r25	; 0x01
    1c5c:	81 83       	std	Z+1, r24	; 0x01
    1c5e:	21 83       	std	Z+1, r18	; 0x01
    1c60:	15 96       	adiw	r26, 0x05	; 5
    1c62:	3c 93       	st	X, r19
    1c64:	15 97       	sbiw	r26, 0x05	; 5
    1c66:	15 96       	adiw	r26, 0x05	; 5
    1c68:	5c 93       	st	X, r21
    1c6a:	15 97       	sbiw	r26, 0x05	; 5
    1c6c:	15 96       	adiw	r26, 0x05	; 5
    1c6e:	4c 93       	st	X, r20
    1c70:	15 97       	sbiw	r26, 0x05	; 5
    1c72:	15 96       	adiw	r26, 0x05	; 5
    1c74:	7c 93       	st	X, r23
    1c76:	15 97       	sbiw	r26, 0x05	; 5
    1c78:	15 96       	adiw	r26, 0x05	; 5
    1c7a:	6c 93       	st	X, r22
    1c7c:	9d 83       	std	Y+5, r25	; 0x05
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
    1c80:	2d 83       	std	Y+5, r18	; 0x05
    1c82:	3d 83       	std	Y+5, r19	; 0x05
    1c84:	95 83       	std	Z+5, r25	; 0x05
    1c86:	85 83       	std	Z+5, r24	; 0x05
    1c88:	25 83       	std	Z+5, r18	; 0x05
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	08 95       	ret

00001c90 <Y1>:
    1c90:	81 30       	cpi	r24, 0x01	; 1
    1c92:	91 05       	cpc	r25, r1
    1c94:	31 f0       	breq	.+12     	; 0x1ca2 <Y1+0x12>
    1c96:	82 30       	cpi	r24, 0x02	; 2
    1c98:	91 05       	cpc	r25, r1
    1c9a:	69 f0       	breq	.+26     	; 0x1cb6 <Y1+0x26>
    1c9c:	89 2b       	or	r24, r25
    1c9e:	79 f4       	brne	.+30     	; 0x1cbe <Y1+0x2e>
    1ca0:	05 c0       	rjmp	.+10     	; 0x1cac <Y1+0x1c>
    1ca2:	88 e0       	ldi	r24, 0x08	; 8
    1ca4:	e0 e0       	ldi	r30, 0x00	; 0
    1ca6:	f6 e0       	ldi	r31, 0x06	; 6
    1ca8:	86 83       	std	Z+6, r24	; 0x06
    1caa:	08 95       	ret
    1cac:	88 e0       	ldi	r24, 0x08	; 8
    1cae:	e0 e0       	ldi	r30, 0x00	; 0
    1cb0:	f6 e0       	ldi	r31, 0x06	; 6
    1cb2:	85 83       	std	Z+5, r24	; 0x05
    1cb4:	08 95       	ret
    1cb6:	88 e0       	ldi	r24, 0x08	; 8
    1cb8:	e0 e0       	ldi	r30, 0x00	; 0
    1cba:	f6 e0       	ldi	r31, 0x06	; 6
    1cbc:	87 83       	std	Z+7, r24	; 0x07
    1cbe:	08 95       	ret

00001cc0 <Y2>:
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	31 f0       	breq	.+12     	; 0x1cd2 <Y2+0x12>
    1cc6:	82 30       	cpi	r24, 0x02	; 2
    1cc8:	91 05       	cpc	r25, r1
    1cca:	69 f0       	breq	.+26     	; 0x1ce6 <Y2+0x26>
    1ccc:	89 2b       	or	r24, r25
    1cce:	79 f4       	brne	.+30     	; 0x1cee <Y2+0x2e>
    1cd0:	05 c0       	rjmp	.+10     	; 0x1cdc <Y2+0x1c>
    1cd2:	80 e1       	ldi	r24, 0x10	; 16
    1cd4:	e0 e0       	ldi	r30, 0x00	; 0
    1cd6:	f6 e0       	ldi	r31, 0x06	; 6
    1cd8:	86 83       	std	Z+6, r24	; 0x06
    1cda:	08 95       	ret
    1cdc:	80 e1       	ldi	r24, 0x10	; 16
    1cde:	e0 e0       	ldi	r30, 0x00	; 0
    1ce0:	f6 e0       	ldi	r31, 0x06	; 6
    1ce2:	85 83       	std	Z+5, r24	; 0x05
    1ce4:	08 95       	ret
    1ce6:	80 e1       	ldi	r24, 0x10	; 16
    1ce8:	e0 e0       	ldi	r30, 0x00	; 0
    1cea:	f6 e0       	ldi	r31, 0x06	; 6
    1cec:	87 83       	std	Z+7, r24	; 0x07
    1cee:	08 95       	ret

00001cf0 <Y7>:
    1cf0:	81 30       	cpi	r24, 0x01	; 1
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	31 f0       	breq	.+12     	; 0x1d02 <Y7+0x12>
    1cf6:	82 30       	cpi	r24, 0x02	; 2
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	69 f0       	breq	.+26     	; 0x1d16 <Y7+0x26>
    1cfc:	89 2b       	or	r24, r25
    1cfe:	79 f4       	brne	.+30     	; 0x1d1e <Y7+0x2e>
    1d00:	05 c0       	rjmp	.+10     	; 0x1d0c <Y7+0x1c>
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	e0 e2       	ldi	r30, 0x20	; 32
    1d06:	f6 e0       	ldi	r31, 0x06	; 6
    1d08:	86 83       	std	Z+6, r24	; 0x06
    1d0a:	08 95       	ret
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	e0 e2       	ldi	r30, 0x20	; 32
    1d10:	f6 e0       	ldi	r31, 0x06	; 6
    1d12:	85 83       	std	Z+5, r24	; 0x05
    1d14:	08 95       	ret
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	e0 e2       	ldi	r30, 0x20	; 32
    1d1a:	f6 e0       	ldi	r31, 0x06	; 6
    1d1c:	87 83       	std	Z+7, r24	; 0x07
    1d1e:	08 95       	ret

00001d20 <Y8>:
    1d20:	81 30       	cpi	r24, 0x01	; 1
    1d22:	91 05       	cpc	r25, r1
    1d24:	31 f0       	breq	.+12     	; 0x1d32 <Y8+0x12>
    1d26:	82 30       	cpi	r24, 0x02	; 2
    1d28:	91 05       	cpc	r25, r1
    1d2a:	69 f0       	breq	.+26     	; 0x1d46 <Y8+0x26>
    1d2c:	89 2b       	or	r24, r25
    1d2e:	79 f4       	brne	.+30     	; 0x1d4e <Y8+0x2e>
    1d30:	05 c0       	rjmp	.+10     	; 0x1d3c <Y8+0x1c>
    1d32:	84 e0       	ldi	r24, 0x04	; 4
    1d34:	e0 e2       	ldi	r30, 0x20	; 32
    1d36:	f6 e0       	ldi	r31, 0x06	; 6
    1d38:	86 83       	std	Z+6, r24	; 0x06
    1d3a:	08 95       	ret
    1d3c:	84 e0       	ldi	r24, 0x04	; 4
    1d3e:	e0 e2       	ldi	r30, 0x20	; 32
    1d40:	f6 e0       	ldi	r31, 0x06	; 6
    1d42:	85 83       	std	Z+5, r24	; 0x05
    1d44:	08 95       	ret
    1d46:	84 e0       	ldi	r24, 0x04	; 4
    1d48:	e0 e2       	ldi	r30, 0x20	; 32
    1d4a:	f6 e0       	ldi	r31, 0x06	; 6
    1d4c:	87 83       	std	Z+7, r24	; 0x07
    1d4e:	08 95       	ret

00001d50 <Y9>:
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	91 05       	cpc	r25, r1
    1d54:	31 f0       	breq	.+12     	; 0x1d62 <Y9+0x12>
    1d56:	82 30       	cpi	r24, 0x02	; 2
    1d58:	91 05       	cpc	r25, r1
    1d5a:	69 f0       	breq	.+26     	; 0x1d76 <Y9+0x26>
    1d5c:	89 2b       	or	r24, r25
    1d5e:	79 f4       	brne	.+30     	; 0x1d7e <Y9+0x2e>
    1d60:	05 c0       	rjmp	.+10     	; 0x1d6c <Y9+0x1c>
    1d62:	88 e0       	ldi	r24, 0x08	; 8
    1d64:	e0 e2       	ldi	r30, 0x20	; 32
    1d66:	f6 e0       	ldi	r31, 0x06	; 6
    1d68:	86 83       	std	Z+6, r24	; 0x06
    1d6a:	08 95       	ret
    1d6c:	88 e0       	ldi	r24, 0x08	; 8
    1d6e:	e0 e2       	ldi	r30, 0x20	; 32
    1d70:	f6 e0       	ldi	r31, 0x06	; 6
    1d72:	85 83       	std	Z+5, r24	; 0x05
    1d74:	08 95       	ret
    1d76:	88 e0       	ldi	r24, 0x08	; 8
    1d78:	e0 e2       	ldi	r30, 0x20	; 32
    1d7a:	f6 e0       	ldi	r31, 0x06	; 6
    1d7c:	87 83       	std	Z+7, r24	; 0x07
    1d7e:	08 95       	ret

00001d80 <Y10>:
    1d80:	81 30       	cpi	r24, 0x01	; 1
    1d82:	91 05       	cpc	r25, r1
    1d84:	31 f0       	breq	.+12     	; 0x1d92 <Y10+0x12>
    1d86:	82 30       	cpi	r24, 0x02	; 2
    1d88:	91 05       	cpc	r25, r1
    1d8a:	69 f0       	breq	.+26     	; 0x1da6 <Y10+0x26>
    1d8c:	89 2b       	or	r24, r25
    1d8e:	79 f4       	brne	.+30     	; 0x1dae <Y10+0x2e>
    1d90:	05 c0       	rjmp	.+10     	; 0x1d9c <Y10+0x1c>
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	e0 e4       	ldi	r30, 0x40	; 64
    1d96:	f6 e0       	ldi	r31, 0x06	; 6
    1d98:	86 83       	std	Z+6, r24	; 0x06
    1d9a:	08 95       	ret
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	e0 e4       	ldi	r30, 0x40	; 64
    1da0:	f6 e0       	ldi	r31, 0x06	; 6
    1da2:	85 83       	std	Z+5, r24	; 0x05
    1da4:	08 95       	ret
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	e0 e4       	ldi	r30, 0x40	; 64
    1daa:	f6 e0       	ldi	r31, 0x06	; 6
    1dac:	87 83       	std	Z+7, r24	; 0x07
    1dae:	08 95       	ret

00001db0 <Y11>:
    1db0:	81 30       	cpi	r24, 0x01	; 1
    1db2:	91 05       	cpc	r25, r1
    1db4:	31 f0       	breq	.+12     	; 0x1dc2 <Y11+0x12>
    1db6:	82 30       	cpi	r24, 0x02	; 2
    1db8:	91 05       	cpc	r25, r1
    1dba:	69 f0       	breq	.+26     	; 0x1dd6 <Y11+0x26>
    1dbc:	89 2b       	or	r24, r25
    1dbe:	79 f4       	brne	.+30     	; 0x1dde <Y11+0x2e>
    1dc0:	05 c0       	rjmp	.+10     	; 0x1dcc <Y11+0x1c>
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	e0 e4       	ldi	r30, 0x40	; 64
    1dc6:	f6 e0       	ldi	r31, 0x06	; 6
    1dc8:	86 83       	std	Z+6, r24	; 0x06
    1dca:	08 95       	ret
    1dcc:	82 e0       	ldi	r24, 0x02	; 2
    1dce:	e0 e4       	ldi	r30, 0x40	; 64
    1dd0:	f6 e0       	ldi	r31, 0x06	; 6
    1dd2:	85 83       	std	Z+5, r24	; 0x05
    1dd4:	08 95       	ret
    1dd6:	82 e0       	ldi	r24, 0x02	; 2
    1dd8:	e0 e4       	ldi	r30, 0x40	; 64
    1dda:	f6 e0       	ldi	r31, 0x06	; 6
    1ddc:	87 83       	std	Z+7, r24	; 0x07
    1dde:	08 95       	ret

00001de0 <X2>:
    1de0:	e0 ee       	ldi	r30, 0xE0	; 224
    1de2:	f7 e0       	ldi	r31, 0x07	; 7
    1de4:	90 85       	ldd	r25, Z+8	; 0x08
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	89 27       	eor	r24, r25
    1dea:	81 70       	andi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	08 95       	ret

00001df0 <X3>:
    1df0:	e0 e8       	ldi	r30, 0x80	; 128
    1df2:	f6 e0       	ldi	r31, 0x06	; 6
    1df4:	80 85       	ldd	r24, Z+8	; 0x08
    1df6:	86 95       	lsr	r24
    1df8:	86 95       	lsr	r24
    1dfa:	86 95       	lsr	r24
    1dfc:	91 e0       	ldi	r25, 0x01	; 1
    1dfe:	89 27       	eor	r24, r25
    1e00:	81 70       	andi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	08 95       	ret

00001e06 <X5>:
    1e06:	e0 e8       	ldi	r30, 0x80	; 128
    1e08:	f6 e0       	ldi	r31, 0x06	; 6
    1e0a:	80 85       	ldd	r24, Z+8	; 0x08
    1e0c:	86 95       	lsr	r24
    1e0e:	91 e0       	ldi	r25, 0x01	; 1
    1e10:	89 27       	eor	r24, r25
    1e12:	81 70       	andi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	08 95       	ret

00001e18 <X6>:
    1e18:	e0 e8       	ldi	r30, 0x80	; 128
    1e1a:	f6 e0       	ldi	r31, 0x06	; 6
    1e1c:	90 85       	ldd	r25, Z+8	; 0x08
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	89 27       	eor	r24, r25
    1e22:	81 70       	andi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	08 95       	ret

00001e28 <X10>:

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    1e28:	e0 e4       	ldi	r30, 0x40	; 64
    1e2a:	f6 e0       	ldi	r31, 0x06	; 6
    1e2c:	80 85       	ldd	r24, Z+8	; 0x08

int X10(void)
{
	int aux;
	if (ioport_get_pin_level(X_10) == 1)
    1e2e:	82 95       	swap	r24
    1e30:	86 95       	lsr	r24
    1e32:	86 95       	lsr	r24
    1e34:	83 70       	andi	r24, 0x03	; 3
    1e36:	91 e0       	ldi	r25, 0x01	; 1
    1e38:	89 27       	eor	r24, r25
	else
	{
		aux=ON;
	}
	return aux;
}
    1e3a:	81 70       	andi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	08 95       	ret

00001e40 <switch_init>:
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    1e40:	88 e0       	ldi	r24, 0x08	; 8
    1e42:	e0 e4       	ldi	r30, 0x40	; 64
    1e44:	f6 e0       	ldi	r31, 0x06	; 6
    1e46:	82 83       	std	Z+2, r24	; 0x02
    1e48:	08 95       	ret

00001e4a <setup_inicial>:
		delay_ms(500);
		break;
	}
	
	
}
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	98 df       	rcall	.-208    	; 0x1d80 <Y10>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	94 eb       	ldi	r25, 0xB4	; 180
    1e54:	a4 ec       	ldi	r26, 0xC4	; 196
    1e56:	b4 e0       	ldi	r27, 0x04	; 4
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	a1 09       	sbc	r26, r1
    1e5c:	b1 09       	sbc	r27, r1
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	a1 05       	cpc	r26, r1
    1e62:	b1 05       	cpc	r27, r1
    1e64:	c9 f7       	brne	.-14     	; 0x1e58 <setup_inicial+0xe>
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	a2 df       	rcall	.-188    	; 0x1db0 <Y11>
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	9a e6       	ldi	r25, 0x6A	; 106
    1e70:	a8 e1       	ldi	r26, 0x18	; 24
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	a1 09       	sbc	r26, r1
    1e78:	b1 09       	sbc	r27, r1
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	a1 05       	cpc	r26, r1
    1e7e:	b1 05       	cpc	r27, r1
    1e80:	c9 f7       	brne	.-14     	; 0x1e74 <setup_inicial+0x2a>
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	94 df       	rcall	.-216    	; 0x1db0 <Y11>
    1e88:	cf df       	rcall	.-98     	; 0x1e28 <X10>
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	e9 f3       	breq	.-6      	; 0x1e88 <setup_inicial+0x3e>
    1e8e:	08 95       	ret

00001e90 <modo1>:
    1e90:	cf 93       	push	r28
    1e92:	df 93       	push	r29
    1e94:	ec 01       	movw	r28, r24
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	72 df       	rcall	.-284    	; 0x1d80 <Y10>
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	55 e3       	ldi	r21, 0x35	; 53
    1ea0:	6c e0       	ldi	r22, 0x0C	; 12
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	41 50       	subi	r20, 0x01	; 1
    1ea6:	51 09       	sbc	r21, r1
    1ea8:	61 09       	sbc	r22, r1
    1eaa:	71 09       	sbc	r23, r1
    1eac:	41 15       	cp	r20, r1
    1eae:	51 05       	cpc	r21, r1
    1eb0:	61 05       	cpc	r22, r1
    1eb2:	71 05       	cpc	r23, r1
    1eb4:	b9 f7       	brne	.-18     	; 0x1ea4 <modo1+0x14>
    1eb6:	20 97       	sbiw	r28, 0x00	; 0
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <modo1+0x2c>
    1eba:	77 c0       	rjmp	.+238    	; 0x1faa <modo1+0x11a>
    1ebc:	21 97       	sbiw	r28, 0x01	; 1
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <modo1+0x32>
    1ec0:	e8 c0       	rjmp	.+464    	; 0x2092 <modo1+0x202>
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	2c df       	rcall	.-424    	; 0x1d20 <Y8>
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	41 df       	rcall	.-382    	; 0x1d50 <Y9>
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	f6 de       	rcall	.-532    	; 0x1cc0 <Y2>
    1ed4:	80 e8       	ldi	r24, 0x80	; 128
    1ed6:	9a e1       	ldi	r25, 0x1A	; 26
    1ed8:	a6 e0       	ldi	r26, 0x06	; 6
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	a1 09       	sbc	r26, r1
    1ee0:	b1 09       	sbc	r27, r1
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	a1 05       	cpc	r26, r1
    1ee6:	b1 05       	cpc	r27, r1
    1ee8:	c9 f7       	brne	.-14     	; 0x1edc <modo1+0x4c>
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	00 df       	rcall	.-512    	; 0x1cf0 <Y7>
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	9a e6       	ldi	r25, 0x6A	; 106
    1ef4:	a8 e1       	ldi	r26, 0x18	; 24
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	a1 09       	sbc	r26, r1
    1efc:	b1 09       	sbc	r27, r1
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	a1 05       	cpc	r26, r1
    1f02:	b1 05       	cpc	r27, r1
    1f04:	c9 f7       	brne	.-14     	; 0x1ef8 <modo1+0x68>
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	f2 de       	rcall	.-540    	; 0x1cf0 <Y7>
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	bf de       	rcall	.-642    	; 0x1c90 <Y1>
    1f12:	80 e8       	ldi	r24, 0x80	; 128
    1f14:	98 e3       	ldi	r25, 0x38	; 56
    1f16:	a1 e0       	ldi	r26, 0x01	; 1
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	a1 09       	sbc	r26, r1
    1f1e:	b1 09       	sbc	r27, r1
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	a1 05       	cpc	r26, r1
    1f24:	b1 05       	cpc	r27, r1
    1f26:	c9 f7       	brne	.-14     	; 0x1f1a <modo1+0x8a>
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	b1 de       	rcall	.-670    	; 0x1c90 <Y1>
    1f2e:	80 e8       	ldi	r24, 0x80	; 128
    1f30:	90 ec       	ldi	r25, 0xC0	; 192
    1f32:	a4 e1       	ldi	r26, 0x14	; 20
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	a1 09       	sbc	r26, r1
    1f3a:	b1 09       	sbc	r27, r1
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	a1 05       	cpc	r26, r1
    1f40:	b1 05       	cpc	r27, r1
    1f42:	c9 f7       	brne	.-14     	; 0x1f36 <modo1+0xa6>
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a3 de       	rcall	.-698    	; 0x1c90 <Y1>
    1f4a:	80 e8       	ldi	r24, 0x80	; 128
    1f4c:	98 e3       	ldi	r25, 0x38	; 56
    1f4e:	a1 e0       	ldi	r26, 0x01	; 1
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	a1 09       	sbc	r26, r1
    1f56:	b1 09       	sbc	r27, r1
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	a1 05       	cpc	r26, r1
    1f5c:	b1 05       	cpc	r27, r1
    1f5e:	c9 f7       	brne	.-14     	; 0x1f52 <modo1+0xc2>
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	95 de       	rcall	.-726    	; 0x1c90 <Y1>
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	98 e8       	ldi	r25, 0x88	; 136
    1f6a:	a3 e1       	ldi	r26, 0x13	; 19
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	a1 09       	sbc	r26, r1
    1f72:	b1 09       	sbc	r27, r1
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	a1 05       	cpc	r26, r1
    1f78:	b1 05       	cpc	r27, r1
    1f7a:	c9 f7       	brne	.-14     	; 0x1f6e <modo1+0xde>
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	87 de       	rcall	.-754    	; 0x1c90 <Y1>
    1f82:	80 e8       	ldi	r24, 0x80	; 128
    1f84:	98 e3       	ldi	r25, 0x38	; 56
    1f86:	a1 e0       	ldi	r26, 0x01	; 1
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	a1 09       	sbc	r26, r1
    1f8e:	b1 09       	sbc	r27, r1
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	a1 05       	cpc	r26, r1
    1f94:	b1 05       	cpc	r27, r1
    1f96:	c9 f7       	brne	.-14     	; 0x1f8a <modo1+0xfa>
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	79 de       	rcall	.-782    	; 0x1c90 <Y1>
    1f9e:	84 e1       	ldi	r24, 0x14	; 20
    1fa0:	9f e0       	ldi	r25, 0x0F	; 15
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <modo1+0x118>
    1fa6:	74 c0       	rjmp	.+232    	; 0x2090 <modo1+0x200>
    1fa8:	74 c0       	rjmp	.+232    	; 0x2092 <modo1+0x202>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	b8 de       	rcall	.-656    	; 0x1d20 <Y8>
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	cd de       	rcall	.-614    	; 0x1d50 <Y9>
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	82 de       	rcall	.-764    	; 0x1cc0 <Y2>
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	95 e3       	ldi	r25, 0x35	; 53
    1fc0:	ac e0       	ldi	r26, 0x0C	; 12
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	a1 09       	sbc	r26, r1
    1fc8:	b1 09       	sbc	r27, r1
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	a1 05       	cpc	r26, r1
    1fce:	b1 05       	cpc	r27, r1
    1fd0:	c9 f7       	brne	.-14     	; 0x1fc4 <modo1+0x134>
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	8c de       	rcall	.-744    	; 0x1cf0 <Y7>
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	9a e6       	ldi	r25, 0x6A	; 106
    1fdc:	a8 e1       	ldi	r26, 0x18	; 24
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	a1 09       	sbc	r26, r1
    1fe4:	b1 09       	sbc	r27, r1
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	a1 05       	cpc	r26, r1
    1fea:	b1 05       	cpc	r27, r1
    1fec:	c9 f7       	brne	.-14     	; 0x1fe0 <modo1+0x150>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	7e de       	rcall	.-772    	; 0x1cf0 <Y7>
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	4b de       	rcall	.-874    	; 0x1c90 <Y1>
    1ffa:	80 e8       	ldi	r24, 0x80	; 128
    1ffc:	98 e3       	ldi	r25, 0x38	; 56
    1ffe:	a1 e0       	ldi	r26, 0x01	; 1
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	a1 09       	sbc	r26, r1
    2006:	b1 09       	sbc	r27, r1
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	a1 05       	cpc	r26, r1
    200c:	b1 05       	cpc	r27, r1
    200e:	c9 f7       	brne	.-14     	; 0x2002 <modo1+0x172>
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	3d de       	rcall	.-902    	; 0x1c90 <Y1>
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	97 e1       	ldi	r25, 0x17	; 23
    201a:	a1 e1       	ldi	r26, 0x11	; 17
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	a1 09       	sbc	r26, r1
    2022:	b1 09       	sbc	r27, r1
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	a1 05       	cpc	r26, r1
    2028:	b1 05       	cpc	r27, r1
    202a:	c9 f7       	brne	.-14     	; 0x201e <modo1+0x18e>
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	2f de       	rcall	.-930    	; 0x1c90 <Y1>
    2032:	80 e8       	ldi	r24, 0x80	; 128
    2034:	98 e3       	ldi	r25, 0x38	; 56
    2036:	a1 e0       	ldi	r26, 0x01	; 1
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	a1 09       	sbc	r26, r1
    203e:	b1 09       	sbc	r27, r1
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	a1 05       	cpc	r26, r1
    2044:	b1 05       	cpc	r27, r1
    2046:	c9 f7       	brne	.-14     	; 0x203a <modo1+0x1aa>
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	21 de       	rcall	.-958    	; 0x1c90 <Y1>
    204e:	80 e8       	ldi	r24, 0x80	; 128
    2050:	90 ec       	ldi	r25, 0xC0	; 192
    2052:	a4 e1       	ldi	r26, 0x14	; 20
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	a1 09       	sbc	r26, r1
    205a:	b1 09       	sbc	r27, r1
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	a1 05       	cpc	r26, r1
    2060:	b1 05       	cpc	r27, r1
    2062:	c9 f7       	brne	.-14     	; 0x2056 <modo1+0x1c6>
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	13 de       	rcall	.-986    	; 0x1c90 <Y1>
    206a:	80 e8       	ldi	r24, 0x80	; 128
    206c:	98 e3       	ldi	r25, 0x38	; 56
    206e:	a1 e0       	ldi	r26, 0x01	; 1
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	a1 09       	sbc	r26, r1
    2076:	b1 09       	sbc	r27, r1
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	a1 05       	cpc	r26, r1
    207c:	b1 05       	cpc	r27, r1
    207e:	c9 f7       	brne	.-14     	; 0x2072 <modo1+0x1e2>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	05 de       	rcall	.-1014   	; 0x1c90 <Y1>
    2086:	84 e1       	ldi	r24, 0x14	; 20
    2088:	9f e0       	ldi	r25, 0x0F	; 15
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	11 f4       	brne	.+4      	; 0x2092 <modo1+0x202>
    208e:	ff cf       	rjmp	.-2      	; 0x208e <modo1+0x1fe>
    2090:	ff cf       	rjmp	.-2      	; 0x2090 <modo1+0x200>
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	08 95       	ret

00002098 <modo2>:
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
    209c:	ec 01       	movw	r28, r24
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	6e de       	rcall	.-804    	; 0x1d80 <Y10>
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	55 e3       	ldi	r21, 0x35	; 53
    20a8:	6c e0       	ldi	r22, 0x0C	; 12
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	41 50       	subi	r20, 0x01	; 1
    20ae:	51 09       	sbc	r21, r1
    20b0:	61 09       	sbc	r22, r1
    20b2:	71 09       	sbc	r23, r1
    20b4:	41 15       	cp	r20, r1
    20b6:	51 05       	cpc	r21, r1
    20b8:	61 05       	cpc	r22, r1
    20ba:	71 05       	cpc	r23, r1
    20bc:	b9 f7       	brne	.-18     	; 0x20ac <modo2+0x14>
    20be:	20 97       	sbiw	r28, 0x00	; 0
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <modo2+0x2c>
    20c2:	3b c0       	rjmp	.+118    	; 0x213a <modo2+0xa2>
    20c4:	21 97       	sbiw	r28, 0x01	; 1
    20c6:	09 f0       	breq	.+2      	; 0x20ca <modo2+0x32>
    20c8:	70 c0       	rjmp	.+224    	; 0x21aa <modo2+0x112>
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	28 de       	rcall	.-944    	; 0x1d20 <Y8>
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	3d de       	rcall	.-902    	; 0x1d50 <Y9>
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	f2 dd       	rcall	.-1052   	; 0x1cc0 <Y2>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	80 34       	cpi	r24, 0x40	; 64
    20e4:	2c e9       	ldi	r18, 0x9C	; 156
    20e6:	92 07       	cpc	r25, r18
    20e8:	d9 f7       	brne	.-10     	; 0x20e0 <modo2+0x48>
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	00 de       	rcall	.-1024   	; 0x1cf0 <Y7>
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	99 ef       	ldi	r25, 0xF9	; 249
    20f4:	a5 e1       	ldi	r26, 0x15	; 21
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	a1 09       	sbc	r26, r1
    20fc:	b1 09       	sbc	r27, r1
    20fe:	00 97       	sbiw	r24, 0x00	; 0
    2100:	a1 05       	cpc	r26, r1
    2102:	b1 05       	cpc	r27, r1
    2104:	c9 f7       	brne	.-14     	; 0x20f8 <modo2+0x60>
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	f2 dd       	rcall	.-1052   	; 0x1cf0 <Y7>
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	bf dd       	rcall	.-1154   	; 0x1c90 <Y1>
    2112:	80 e8       	ldi	r24, 0x80	; 128
    2114:	98 e3       	ldi	r25, 0x38	; 56
    2116:	a1 e0       	ldi	r26, 0x01	; 1
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	a1 09       	sbc	r26, r1
    211e:	b1 09       	sbc	r27, r1
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	a1 05       	cpc	r26, r1
    2124:	b1 05       	cpc	r27, r1
    2126:	c9 f7       	brne	.-14     	; 0x211a <modo2+0x82>
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	b1 dd       	rcall	.-1182   	; 0x1c90 <Y1>
    212e:	84 e1       	ldi	r24, 0x14	; 20
    2130:	9f e0       	ldi	r25, 0x0F	; 15
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	09 f4       	brne	.+2      	; 0x2138 <modo2+0xa0>
    2136:	38 c0       	rjmp	.+112    	; 0x21a8 <modo2+0x110>
    2138:	38 c0       	rjmp	.+112    	; 0x21aa <modo2+0x112>
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	f0 dd       	rcall	.-1056   	; 0x1d20 <Y8>
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	05 de       	rcall	.-1014   	; 0x1d50 <Y9>
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	ba dd       	rcall	.-1164   	; 0x1cc0 <Y2>
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	01 96       	adiw	r24, 0x01	; 1
    2152:	80 34       	cpi	r24, 0x40	; 64
    2154:	2c e9       	ldi	r18, 0x9C	; 156
    2156:	92 07       	cpc	r25, r18
    2158:	d9 f7       	brne	.-10     	; 0x2150 <modo2+0xb8>
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	c8 dd       	rcall	.-1136   	; 0x1cf0 <Y7>
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	99 ef       	ldi	r25, 0xF9	; 249
    2164:	a5 e1       	ldi	r26, 0x15	; 21
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	a1 09       	sbc	r26, r1
    216c:	b1 09       	sbc	r27, r1
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	a1 05       	cpc	r26, r1
    2172:	b1 05       	cpc	r27, r1
    2174:	c9 f7       	brne	.-14     	; 0x2168 <modo2+0xd0>
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	ba dd       	rcall	.-1164   	; 0x1cf0 <Y7>
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	87 dd       	rcall	.-1266   	; 0x1c90 <Y1>
    2182:	80 e8       	ldi	r24, 0x80	; 128
    2184:	98 e3       	ldi	r25, 0x38	; 56
    2186:	a1 e0       	ldi	r26, 0x01	; 1
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	a1 09       	sbc	r26, r1
    218e:	b1 09       	sbc	r27, r1
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	a1 05       	cpc	r26, r1
    2194:	b1 05       	cpc	r27, r1
    2196:	c9 f7       	brne	.-14     	; 0x218a <modo2+0xf2>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	79 dd       	rcall	.-1294   	; 0x1c90 <Y1>
    219e:	84 e1       	ldi	r24, 0x14	; 20
    21a0:	9f e0       	ldi	r25, 0x0F	; 15
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	11 f4       	brne	.+4      	; 0x21aa <modo2+0x112>
    21a6:	ff cf       	rjmp	.-2      	; 0x21a6 <modo2+0x10e>
    21a8:	ff cf       	rjmp	.-2      	; 0x21a8 <modo2+0x110>
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	08 95       	ret

000021b0 <mover_actuador>:


void mover_actuador(int pos)
{
	switch(pos)
    21b0:	81 30       	cpi	r24, 0x01	; 1
    21b2:	91 05       	cpc	r25, r1
    21b4:	89 f0       	breq	.+34     	; 0x21d8 <mover_actuador+0x28>
    21b6:	1c f4       	brge	.+6      	; 0x21be <mover_actuador+0xe>
    21b8:	89 2b       	or	r24, r25
    21ba:	39 f0       	breq	.+14     	; 0x21ca <mover_actuador+0x1a>
    21bc:	21 c0       	rjmp	.+66     	; 0x2200 <mover_actuador+0x50>
    21be:	82 30       	cpi	r24, 0x02	; 2
    21c0:	91 05       	cpc	r25, r1
    21c2:	89 f0       	breq	.+34     	; 0x21e6 <mover_actuador+0x36>
    21c4:	03 97       	sbiw	r24, 0x03	; 3
    21c6:	b1 f0       	breq	.+44     	; 0x21f4 <mover_actuador+0x44>
    21c8:	1b c0       	rjmp	.+54     	; 0x2200 <mover_actuador+0x50>
	{
		case 0:
			IN0(RESET);
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	a8 dd       	rcall	.-1200   	; 0x1d20 <Y8>
			IN1(RESET);
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	bd dd       	rcall	.-1158   	; 0x1d50 <Y9>
			break;
    21d6:	14 c0       	rjmp	.+40     	; 0x2200 <mover_actuador+0x50>
		case 1:
			IN0(SET);
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	a1 dd       	rcall	.-1214   	; 0x1d20 <Y8>
			IN1(RESET);
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	b6 dd       	rcall	.-1172   	; 0x1d50 <Y9>
			break;
    21e4:	0d c0       	rjmp	.+26     	; 0x2200 <mover_actuador+0x50>
		case 2:
			IN0(RESET);
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9a dd       	rcall	.-1228   	; 0x1d20 <Y8>
			IN1(SET);
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	af dd       	rcall	.-1186   	; 0x1d50 <Y9>
			break;
    21f2:	06 c0       	rjmp	.+12     	; 0x2200 <mover_actuador+0x50>
		case 3:
			IN0(SET);
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	93 dd       	rcall	.-1242   	; 0x1d20 <Y8>
			IN1(SET);
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	a8 dd       	rcall	.-1200   	; 0x1d50 <Y9>
	
}


void mover_actuador(int pos)
{
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	95 e3       	ldi	r25, 0x35	; 53
    2204:	ac e0       	ldi	r26, 0x0C	; 12
    2206:	b0 e0       	ldi	r27, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	a1 09       	sbc	r26, r1
    220c:	b1 09       	sbc	r27, r1
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	a1 05       	cpc	r26, r1
    2212:	b1 05       	cpc	r27, r1
    2214:	c9 f7       	brne	.-14     	; 0x2208 <mover_actuador+0x58>
			IN0(SET);
			IN1(SET);
			break;
	}
	delay_ms(100);
	DRIVE(SET);
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	6a dd       	rcall	.-1324   	; 0x1cf0 <Y7>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	99 e0       	ldi	r25, 0x09	; 9
    2220:	ad e3       	ldi	r26, 0x3D	; 61
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	a1 09       	sbc	r26, r1
    2228:	b1 09       	sbc	r27, r1
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	a1 05       	cpc	r26, r1
    222e:	b1 05       	cpc	r27, r1
    2230:	c9 f7       	brne	.-14     	; 0x2224 <mover_actuador+0x74>
	delay_ms(500);
	DRIVE(RESET);
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	5c dd       	rcall	.-1352   	; 0x1cf0 <Y7>
	while(BUSY==ON);
    2238:	84 e1       	ldi	r24, 0x14	; 20
    223a:	9f e0       	ldi	r25, 0x0F	; 15
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	61 f0       	breq	.+24     	; 0x2258 <mover_actuador+0xa8>
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	99 e0       	ldi	r25, 0x09	; 9
    2244:	ad e3       	ldi	r26, 0x3D	; 61
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	a1 09       	sbc	r26, r1
    224c:	b1 09       	sbc	r27, r1
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	a1 05       	cpc	r26, r1
    2252:	b1 05       	cpc	r27, r1
    2254:	c9 f7       	brne	.-14     	; 0x2248 <mover_actuador+0x98>
    2256:	08 95       	ret
    2258:	ff cf       	rjmp	.-2      	; 0x2258 <mover_actuador+0xa8>

0000225a <main>:


int main (void)
{

	init_DSD_PLC();
    225a:	c7 dc       	rcall	.-1650   	; 0x1bea <init_DSD_PLC>
	setup_inicial();
    225c:	f6 dd       	rcall	.-1044   	; 0x1e4a <setup_inicial>
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	99 e0       	ldi	r25, 0x09	; 9
    2262:	ad e3       	ldi	r26, 0x3D	; 61
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	a1 09       	sbc	r26, r1
    226a:	b1 09       	sbc	r27, r1
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	a1 05       	cpc	r26, r1
    2270:	b1 05       	cpc	r27, r1
    2272:	c9 f7       	brne	.-14     	; 0x2266 <main+0xc>
	delay_ms(500);
	if(S1B())
    2274:	b5 dd       	rcall	.-1174   	; 0x1de0 <X2>
    2276:	89 2b       	or	r24, r25
    2278:	c1 f0       	breq	.+48     	; 0x22aa <main+0x50>
	{
		mover_actuador(0);
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	98 df       	rcall	.-208    	; 0x21b0 <mover_actuador>
		current_mode=MODO_1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	80 93 7c 20 	sts	0x207C, r24
    2288:	90 93 7d 20 	sts	0x207D, r25

int main (void)
{

	init_DSD_PLC();
	setup_inicial();
    228c:	c1 e0       	ldi	r28, 0x01	; 1
    228e:	d0 e0       	ldi	r29, 0x00	; 0
    2290:	c1 2c       	mov	r12, r1
    2292:	0f 2e       	mov	r0, r31
    2294:	f9 e0       	ldi	r31, 0x09	; 9
    2296:	df 2e       	mov	r13, r31
    2298:	f0 2d       	mov	r31, r0
    229a:	0f 2e       	mov	r0, r31
    229c:	fd e3       	ldi	r31, 0x3D	; 61
    229e:	ef 2e       	mov	r14, r31
    22a0:	f0 2d       	mov	r31, r0
    22a2:	f1 2c       	mov	r15, r1
					}
					else
					{
						mover_actuador(1);
					}
					current_mode=MODO_1;	
    22a4:	01 e0       	ldi	r16, 0x01	; 1
    22a6:	10 e0       	ldi	r17, 0x00	; 0
    22a8:	31 c0       	rjmp	.+98     	; 0x230c <main+0xb2>
		mover_actuador(0);
		current_mode=MODO_1;
	}
	else
	{
		mover_actuador(2);
    22aa:	82 e0       	ldi	r24, 0x02	; 2
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	80 df       	rcall	.-256    	; 0x21b0 <mover_actuador>
		current_mode=MODO_2;
    22b0:	10 92 7c 20 	sts	0x207C, r1
    22b4:	10 92 7d 20 	sts	0x207D, r1
    22b8:	e9 cf       	rjmp	.-46     	; 0x228c <main+0x32>
	int dir=1;
	for (;;)
	{
		while (PEDAL()==OFF && S_MV()==OFF && B1()==OFF)
		{
			if (current_mode!=S1B())
    22ba:	92 dd       	rcall	.-1244   	; 0x1de0 <X2>
    22bc:	20 91 7c 20 	lds	r18, 0x207C
    22c0:	30 91 7d 20 	lds	r19, 0x207D
    22c4:	82 17       	cp	r24, r18
    22c6:	93 07       	cpc	r25, r19
    22c8:	09 f1       	breq	.+66     	; 0x230c <main+0xb2>
			{
				if (current_mode==MODO_1)
    22ca:	21 30       	cpi	r18, 0x01	; 1
    22cc:	31 05       	cpc	r19, r1
    22ce:	79 f4       	brne	.+30     	; 0x22ee <main+0x94>
				{
					if (dir==1)
    22d0:	c1 30       	cpi	r28, 0x01	; 1
    22d2:	d1 05       	cpc	r29, r1
    22d4:	21 f4       	brne	.+8      	; 0x22de <main+0x84>
					{
						mover_actuador(2);
    22d6:	82 e0       	ldi	r24, 0x02	; 2
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	6a df       	rcall	.-300    	; 0x21b0 <mover_actuador>
    22dc:	03 c0       	rjmp	.+6      	; 0x22e4 <main+0x8a>
					}
					else
					{
						mover_actuador(3);
    22de:	83 e0       	ldi	r24, 0x03	; 3
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	66 df       	rcall	.-308    	; 0x21b0 <mover_actuador>
					}
					current_mode=MODO_2;
    22e4:	10 92 7c 20 	sts	0x207C, r1
    22e8:	10 92 7d 20 	sts	0x207D, r1
    22ec:	0f c0       	rjmp	.+30     	; 0x230c <main+0xb2>
				}
				else if(current_mode==MODO_2)
    22ee:	23 2b       	or	r18, r19
    22f0:	69 f4       	brne	.+26     	; 0x230c <main+0xb2>
				{
					if (dir==1)
    22f2:	c1 30       	cpi	r28, 0x01	; 1
    22f4:	d1 05       	cpc	r29, r1
    22f6:	21 f4       	brne	.+8      	; 0x2300 <main+0xa6>
					{
						mover_actuador(0);
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	59 df       	rcall	.-334    	; 0x21b0 <mover_actuador>
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <main+0xaa>
					}
					else
					{
						mover_actuador(1);
    2300:	c8 01       	movw	r24, r16
    2302:	56 df       	rcall	.-340    	; 0x21b0 <mover_actuador>
					}
					current_mode=MODO_1;	
    2304:	00 93 7c 20 	sts	0x207C, r16
    2308:	10 93 7d 20 	sts	0x207D, r17
	}
	
	int dir=1;
	for (;;)
	{
		while (PEDAL()==OFF && S_MV()==OFF && B1()==OFF)
    230c:	71 dd       	rcall	.-1310   	; 0x1df0 <X3>
    230e:	89 2b       	or	r24, r25
    2310:	31 f4       	brne	.+12     	; 0x231e <main+0xc4>
    2312:	82 dd       	rcall	.-1276   	; 0x1e18 <X6>
    2314:	89 2b       	or	r24, r25
    2316:	19 f4       	brne	.+6      	; 0x231e <main+0xc4>
    2318:	76 dd       	rcall	.-1300   	; 0x1e06 <X5>
    231a:	89 2b       	or	r24, r25
    231c:	71 f2       	breq	.-100    	; 0x22ba <main+0x60>
				}
			}
				
		} //end while
		
		if(current_mode==MODO_1)
    231e:	20 91 7c 20 	lds	r18, 0x207C
    2322:	30 91 7d 20 	lds	r19, 0x207D
    2326:	21 30       	cpi	r18, 0x01	; 1
    2328:	31 05       	cpc	r19, r1
    232a:	19 f4       	brne	.+6      	; 0x2332 <main+0xd8>
		{
			modo1(dir);
    232c:	ce 01       	movw	r24, r28
    232e:	b0 dd       	rcall	.-1184   	; 0x1e90 <modo1>
    2330:	04 c0       	rjmp	.+8      	; 0x233a <main+0xe0>
		}
		else if(current_mode==MODO_2)
    2332:	23 2b       	or	r18, r19
    2334:	11 f4       	brne	.+4      	; 0x233a <main+0xe0>
		{
			modo2(dir);
    2336:	ce 01       	movw	r24, r28
    2338:	af de       	rcall	.-674    	; 0x2098 <modo2>

int main (void)
{

	init_DSD_PLC();
	setup_inicial();
    233a:	4c 2d       	mov	r20, r12
    233c:	5d 2d       	mov	r21, r13
    233e:	6e 2d       	mov	r22, r14
    2340:	7f 2d       	mov	r23, r15
    2342:	41 50       	subi	r20, 0x01	; 1
    2344:	51 09       	sbc	r21, r1
    2346:	61 09       	sbc	r22, r1
    2348:	71 09       	sbc	r23, r1
    234a:	41 15       	cp	r20, r1
    234c:	51 05       	cpc	r21, r1
    234e:	61 05       	cpc	r22, r1
    2350:	71 05       	cpc	r23, r1
    2352:	b9 f7       	brne	.-18     	; 0x2342 <main+0xe8>
		else if(current_mode==MODO_2)
		{
			modo2(dir);
		}
		delay_ms(500);
		if(dir == 1)
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	21 97       	sbiw	r28, 0x01	; 1
    2358:	09 f4       	brne	.+2      	; 0x235c <main+0x102>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	c8 2f       	mov	r28, r24
    235e:	d0 e0       	ldi	r29, 0x00	; 0
    2360:	d5 cf       	rjmp	.-86     	; 0x230c <main+0xb2>

00002362 <__udivmodhi4>:
    2362:	aa 1b       	sub	r26, r26
    2364:	bb 1b       	sub	r27, r27
    2366:	51 e1       	ldi	r21, 0x11	; 17
    2368:	07 c0       	rjmp	.+14     	; 0x2378 <__udivmodhi4_ep>

0000236a <__udivmodhi4_loop>:
    236a:	aa 1f       	adc	r26, r26
    236c:	bb 1f       	adc	r27, r27
    236e:	a6 17       	cp	r26, r22
    2370:	b7 07       	cpc	r27, r23
    2372:	10 f0       	brcs	.+4      	; 0x2378 <__udivmodhi4_ep>
    2374:	a6 1b       	sub	r26, r22
    2376:	b7 0b       	sbc	r27, r23

00002378 <__udivmodhi4_ep>:
    2378:	88 1f       	adc	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	5a 95       	dec	r21
    237e:	a9 f7       	brne	.-22     	; 0x236a <__udivmodhi4_loop>
    2380:	80 95       	com	r24
    2382:	90 95       	com	r25
    2384:	bc 01       	movw	r22, r24
    2386:	cd 01       	movw	r24, r26
    2388:	08 95       	ret

0000238a <__tablejump2__>:
    238a:	ee 0f       	add	r30, r30
    238c:	ff 1f       	adc	r31, r31

0000238e <__tablejump__>:
    238e:	05 90       	lpm	r0, Z+
    2390:	f4 91       	lpm	r31, Z
    2392:	e0 2d       	mov	r30, r0
    2394:	09 94       	ijmp

00002396 <memcpy>:
    2396:	fb 01       	movw	r30, r22
    2398:	dc 01       	movw	r26, r24
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <memcpy+0xa>
    239c:	01 90       	ld	r0, Z+
    239e:	0d 92       	st	X+, r0
    23a0:	41 50       	subi	r20, 0x01	; 1
    23a2:	50 40       	sbci	r21, 0x00	; 0
    23a4:	d8 f7       	brcc	.-10     	; 0x239c <memcpy+0x6>
    23a6:	08 95       	ret

000023a8 <_exit>:
    23a8:	f8 94       	cli

000023aa <__stop_program>:
    23aa:	ff cf       	rjmp	.-2      	; 0x23aa <__stop_program>
