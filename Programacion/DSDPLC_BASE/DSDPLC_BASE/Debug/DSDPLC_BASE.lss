
DSDPLC_BASE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00802000  00001c5e  00001cf2  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027f  0080207c  0080207c  00001d70  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d6e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000610  00000000  00000000  00001da0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000bd73  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000024ba  00000000  00000000  0000e123  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00008e8e  00000000  00000000  000105dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000100c  00000000  00000000  0001946c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002fce9  00000000  00000000  0001a478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004bff  00000000  00000000  0004a161  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000548  00000000  00000000  0004ed60  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b9c2  00000000  00000000  0004f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
       6:	00 00       	nop
       8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
       a:	00 00       	nop
       c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
       e:	00 00       	nop
      10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
      12:	00 00       	nop
      14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
      16:	00 00       	nop
      18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
      1e:	00 00       	nop
      20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
      22:	00 00       	nop
      24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
      26:	00 00       	nop
      28:	0f c7       	rjmp	.+3614   	; 0xe48 <__vector_10>
      2a:	00 00       	nop
      2c:	26 c7       	rjmp	.+3660   	; 0xe7a <__vector_11>
      2e:	00 00       	nop
      30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
      32:	00 00       	nop
      34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
      36:	00 00       	nop
      38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
      3e:	00 00       	nop
      40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
      42:	00 00       	nop
      44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
      46:	00 00       	nop
      48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
      52:	00 00       	nop
      54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
      56:	00 00       	nop
      58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
      62:	00 00       	nop
      64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
      66:	00 00       	nop
      68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
      72:	00 00       	nop
      74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
      76:	00 00       	nop
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
      82:	00 00       	nop
      84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
      92:	00 00       	nop
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
      96:	00 00       	nop
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
     102:	00 00       	nop
     104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
     106:	00 00       	nop
     108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
     10e:	00 00       	nop
     110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
     112:	00 00       	nop
     114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
     116:	00 00       	nop
     118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
     11e:	00 00       	nop
     120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
     122:	00 00       	nop
     124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
     126:	00 00       	nop
     128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
     12e:	00 00       	nop
     130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
     132:	00 00       	nop
     134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
     136:	00 00       	nop
     138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
     13e:	00 00       	nop
     140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
     142:	00 00       	nop
     144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
     146:	00 00       	nop
     148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
     14e:	00 00       	nop
     150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
     152:	00 00       	nop
     154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
     156:	00 00       	nop
     158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
     15e:	00 00       	nop
     160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
     162:	00 00       	nop
     164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
     166:	00 00       	nop
     168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
     16e:	00 00       	nop
     170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
     172:	00 00       	nop
     174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
     176:	00 00       	nop
     178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
     17e:	00 00       	nop
     180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
     182:	00 00       	nop
     184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
     186:	00 00       	nop
     188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
     18e:	00 00       	nop
     190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
     192:	00 00       	nop
     194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
     196:	00 00       	nop
     198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__vector_125>
     1f8:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__vector_126>
     1fc:	b1 08       	sbc	r11, r1
     1fe:	9f 08       	sbc	r9, r15
     200:	a2 08       	sbc	r10, r2
     202:	a5 08       	sbc	r10, r5
     204:	a8 08       	sbc	r10, r8
     206:	ab 08       	sbc	r10, r11
     208:	ae 08       	sbc	r10, r14

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e2       	ldi	r29, 0x2F	; 47
     214:	de bf       	out	0x3e, r29	; 62

00000216 <__do_copy_data>:
     216:	10 e2       	ldi	r17, 0x20	; 32
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b0 e2       	ldi	r27, 0x20	; 32
     21c:	ee e5       	ldi	r30, 0x5E	; 94
     21e:	fc e1       	ldi	r31, 0x1C	; 28
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x10>
     222:	05 90       	lpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	ac 37       	cpi	r26, 0x7C	; 124
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0xc>

0000022c <__do_clear_bss>:
     22c:	22 e2       	ldi	r18, 0x22	; 34
     22e:	ac e7       	ldi	r26, 0x7C	; 124
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	ab 3f       	cpi	r26, 0xFB	; 251
     238:	b2 07       	cpc	r27, r18
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
     23c:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <main>
     240:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <_exit>

00000244 <__bad_interrupt>:
     244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     246:	8f ef       	ldi	r24, 0xFF	; 255
     248:	80 93 70 00 	sts	0x0070, r24
     24c:	80 93 71 00 	sts	0x0071, r24
     250:	80 93 72 00 	sts	0x0072, r24
     254:	80 93 73 00 	sts	0x0073, r24
     258:	80 93 74 00 	sts	0x0074, r24
     25c:	80 93 75 00 	sts	0x0075, r24
     260:	80 93 76 00 	sts	0x0076, r24
     264:	08 95       	ret

00000266 <udi_cdc_comm_enable>:
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
}
     266:	10 92 92 21 	sts	0x2192, r1
     26a:	10 92 9e 21 	sts	0x219E, r1
     26e:	10 92 9f 21 	sts	0x219F, r1
     272:	81 ea       	ldi	r24, 0xA1	; 161
     274:	80 93 94 21 	sts	0x2194, r24
     278:	80 e2       	ldi	r24, 0x20	; 32
     27a:	80 93 95 21 	sts	0x2195, r24
     27e:	10 92 96 21 	sts	0x2196, r1
     282:	10 92 97 21 	sts	0x2197, r1
     286:	10 92 98 21 	sts	0x2198, r1
     28a:	10 92 99 21 	sts	0x2199, r1
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	80 93 9a 21 	sts	0x219A, r24
     296:	90 93 9b 21 	sts	0x219B, r25
     29a:	10 92 9c 21 	sts	0x219C, r1
     29e:	10 92 9d 21 	sts	0x219D, r1
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	92 ec       	ldi	r25, 0xC2	; 194
     2a6:	a1 e0       	ldi	r26, 0x01	; 1
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	80 93 a0 21 	sts	0x21A0, r24
     2ae:	90 93 a1 21 	sts	0x21A1, r25
     2b2:	a0 93 a2 21 	sts	0x21A2, r26
     2b6:	b0 93 a3 21 	sts	0x21A3, r27
     2ba:	10 92 a4 21 	sts	0x21A4, r1
     2be:	10 92 a5 21 	sts	0x21A5, r1
     2c2:	88 e0       	ldi	r24, 0x08	; 8
     2c4:	80 93 a6 21 	sts	0x21A6, r24
     2c8:	80 91 92 21 	lds	r24, 0x2192
     2cc:	8f 5f       	subi	r24, 0xFF	; 255
     2ce:	80 93 92 21 	sts	0x2192, r24
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	08 95       	ret

000002d6 <udi_cdc_comm_disable>:
     2d6:	80 91 92 21 	lds	r24, 0x2192
     2da:	81 50       	subi	r24, 0x01	; 1
     2dc:	80 93 92 21 	sts	0x2192, r24
     2e0:	08 95       	ret

000002e2 <udi_cdc_data_disable>:
     2e2:	80 91 91 21 	lds	r24, 0x2191
     2e6:	81 50       	subi	r24, 0x01	; 1
     2e8:	80 93 91 21 	sts	0x2191, r24
     2ec:	80 91 91 21 	lds	r24, 0x2191
     2f0:	10 92 90 21 	sts	0x2190, r1
     2f4:	08 95       	ret

000002f6 <udi_cdc_data_setup>:
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	08 95       	ret

000002fa <udi_cdc_getsetting>:
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	08 95       	ret

000002fe <udi_cdc_comm_setup>:
     2fe:	80 91 eb 22 	lds	r24, 0x22EB
     302:	88 23       	and	r24, r24
     304:	dc f4       	brge	.+54     	; 0x33c <udi_cdc_comm_setup+0x3e>
     306:	80 76       	andi	r24, 0x60	; 96
     308:	80 32       	cpi	r24, 0x20	; 32
     30a:	e9 f5       	brne	.+122    	; 0x386 <udi_cdc_comm_setup+0x88>
     30c:	80 91 ec 22 	lds	r24, 0x22EC
     310:	81 32       	cpi	r24, 0x21	; 33
     312:	d9 f5       	brne	.+118    	; 0x38a <udi_cdc_comm_setup+0x8c>
     314:	80 91 f1 22 	lds	r24, 0x22F1
     318:	90 91 f2 22 	lds	r25, 0x22F2
     31c:	07 97       	sbiw	r24, 0x07	; 7
     31e:	b9 f5       	brne	.+110    	; 0x38e <udi_cdc_comm_setup+0x90>
     320:	80 ea       	ldi	r24, 0xA0	; 160
     322:	91 e2       	ldi	r25, 0x21	; 33
     324:	80 93 f3 22 	sts	0x22F3, r24
     328:	90 93 f4 22 	sts	0x22F4, r25
     32c:	87 e0       	ldi	r24, 0x07	; 7
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	80 93 f5 22 	sts	0x22F5, r24
     334:	90 93 f6 22 	sts	0x22F6, r25
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	08 95       	ret
     33c:	80 76       	andi	r24, 0x60	; 96
     33e:	80 32       	cpi	r24, 0x20	; 32
     340:	41 f5       	brne	.+80     	; 0x392 <udi_cdc_comm_setup+0x94>
     342:	80 91 ec 22 	lds	r24, 0x22EC
     346:	80 32       	cpi	r24, 0x20	; 32
     348:	21 f0       	breq	.+8      	; 0x352 <udi_cdc_comm_setup+0x54>
     34a:	82 32       	cpi	r24, 0x22	; 34
     34c:	21 f5       	brne	.+72     	; 0x396 <udi_cdc_comm_setup+0x98>
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	08 95       	ret
     352:	80 91 f1 22 	lds	r24, 0x22F1
     356:	90 91 f2 22 	lds	r25, 0x22F2
     35a:	07 97       	sbiw	r24, 0x07	; 7
     35c:	f1 f4       	brne	.+60     	; 0x39a <udi_cdc_comm_setup+0x9c>
     35e:	8f ec       	ldi	r24, 0xCF	; 207
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	80 93 f7 22 	sts	0x22F7, r24
     366:	90 93 f8 22 	sts	0x22F8, r25
     36a:	80 ea       	ldi	r24, 0xA0	; 160
     36c:	91 e2       	ldi	r25, 0x21	; 33
     36e:	80 93 f3 22 	sts	0x22F3, r24
     372:	90 93 f4 22 	sts	0x22F4, r25
     376:	87 e0       	ldi	r24, 0x07	; 7
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	80 93 f5 22 	sts	0x22F5, r24
     37e:	90 93 f6 22 	sts	0x22F6, r25
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	08 95       	ret
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	08 95       	ret
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	08 95       	ret
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	08 95       	ret
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	08 95       	ret
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	08 95       	ret
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	08 95       	ret

0000039e <udi_cdc_line_coding_received>:
     39e:	08 95       	ret

000003a0 <udi_cdc_tx_send>:
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	80 91 7f 20 	lds	r24, 0x207F
     3ae:	81 11       	cpse	r24, r1
     3b0:	9c c0       	rjmp	.+312    	; 0x4ea <udi_cdc_tx_send+0x14a>
     3b2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <udd_is_high_speed>
     3b6:	88 23       	and	r24, r24
     3b8:	51 f0       	breq	.+20     	; 0x3ce <udi_cdc_tx_send+0x2e>
     3ba:	c0 91 80 20 	lds	r28, 0x2080
     3be:	d0 91 81 20 	lds	r29, 0x2081
     3c2:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <udd_get_micro_frame_number>
     3c6:	c8 17       	cp	r28, r24
     3c8:	d9 07       	cpc	r29, r25
     3ca:	59 f4       	brne	.+22     	; 0x3e2 <udi_cdc_tx_send+0x42>
     3cc:	8e c0       	rjmp	.+284    	; 0x4ea <udi_cdc_tx_send+0x14a>
     3ce:	c0 91 80 20 	lds	r28, 0x2080
     3d2:	d0 91 81 20 	lds	r29, 0x2081
     3d6:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <udd_get_frame_number>
     3da:	c8 17       	cp	r28, r24
     3dc:	d9 07       	cpc	r29, r25
     3de:	09 f4       	brne	.+2      	; 0x3e2 <udi_cdc_tx_send+0x42>
     3e0:	84 c0       	rjmp	.+264    	; 0x4ea <udi_cdc_tx_send+0x14a>
     3e2:	df b7       	in	r29, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	c0 91 82 20 	lds	r28, 0x2082
     3ea:	ec 2f       	mov	r30, r28
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	ee 0f       	add	r30, r30
     3f0:	ff 1f       	adc	r31, r31
     3f2:	ed 57       	subi	r30, 0x7D	; 125
     3f4:	ff 4d       	sbci	r31, 0xDF	; 223
     3f6:	80 81       	ld	r24, Z
     3f8:	91 81       	ldd	r25, Z+1	; 0x01
     3fa:	89 2b       	or	r24, r25
     3fc:	09 f5       	brne	.+66     	; 0x440 <udi_cdc_tx_send+0xa0>
     3fe:	80 91 7c 20 	lds	r24, 0x207C
     402:	90 91 7d 20 	lds	r25, 0x207D
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	80 93 7c 20 	sts	0x207C, r24
     40c:	90 93 7d 20 	sts	0x207D, r25
     410:	0e 94 4c 0a 	call	0x1498	; 0x1498 <udd_is_high_speed>
     414:	81 11       	cpse	r24, r1
     416:	07 c0       	rjmp	.+14     	; 0x426 <udi_cdc_tx_send+0x86>
     418:	80 91 7c 20 	lds	r24, 0x207C
     41c:	90 91 7d 20 	lds	r25, 0x207D
     420:	84 36       	cpi	r24, 0x64	; 100
     422:	91 05       	cpc	r25, r1
     424:	58 f0       	brcs	.+22     	; 0x43c <udi_cdc_tx_send+0x9c>
     426:	0e 94 4c 0a 	call	0x1498	; 0x1498 <udd_is_high_speed>
     42a:	88 23       	and	r24, r24
     42c:	49 f0       	breq	.+18     	; 0x440 <udi_cdc_tx_send+0xa0>
     42e:	80 91 7c 20 	lds	r24, 0x207C
     432:	90 91 7d 20 	lds	r25, 0x207D
     436:	80 32       	cpi	r24, 0x20	; 32
     438:	93 40       	sbci	r25, 0x03	; 3
     43a:	10 f4       	brcc	.+4      	; 0x440 <udi_cdc_tx_send+0xa0>
     43c:	df bf       	out	0x3f, r29	; 63
     43e:	55 c0       	rjmp	.+170    	; 0x4ea <udi_cdc_tx_send+0x14a>
     440:	10 92 7c 20 	sts	0x207C, r1
     444:	10 92 7d 20 	sts	0x207D, r1
     448:	80 91 7e 20 	lds	r24, 0x207E
     44c:	81 11       	cpse	r24, r1
     44e:	06 c0       	rjmp	.+12     	; 0x45c <udi_cdc_tx_send+0xbc>
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	c1 11       	cpse	r28, r1
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	80 93 82 20 	sts	0x2082, r24
     45a:	04 c0       	rjmp	.+8      	; 0x464 <udi_cdc_tx_send+0xc4>
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	c1 11       	cpse	r28, r1
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	c8 2f       	mov	r28, r24
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	80 93 7f 20 	sts	0x207F, r24
     46a:	df bf       	out	0x3f, r29	; 63
     46c:	d0 e0       	ldi	r29, 0x00	; 0
     46e:	fe 01       	movw	r30, r28
     470:	ee 0f       	add	r30, r30
     472:	ff 1f       	adc	r31, r31
     474:	ed 57       	subi	r30, 0x7D	; 125
     476:	ff 4d       	sbci	r31, 0xDF	; 223
     478:	ff 24       	eor	r15, r15
     47a:	f3 94       	inc	r15
     47c:	80 81       	ld	r24, Z
     47e:	91 81       	ldd	r25, Z+1	; 0x01
     480:	80 34       	cpi	r24, 0x40	; 64
     482:	91 05       	cpc	r25, r1
     484:	09 f4       	brne	.+2      	; 0x488 <udi_cdc_tx_send+0xe8>
     486:	f1 2c       	mov	r15, r1
     488:	ff 20       	and	r15, r15
     48a:	91 f0       	breq	.+36     	; 0x4b0 <udi_cdc_tx_send+0x110>
     48c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <udd_is_high_speed>
     490:	88 23       	and	r24, r24
     492:	39 f0       	breq	.+14     	; 0x4a2 <udi_cdc_tx_send+0x102>
     494:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <udd_get_micro_frame_number>
     498:	80 93 80 20 	sts	0x2080, r24
     49c:	90 93 81 20 	sts	0x2081, r25
     4a0:	0b c0       	rjmp	.+22     	; 0x4b8 <udi_cdc_tx_send+0x118>
     4a2:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <udd_get_frame_number>
     4a6:	80 93 80 20 	sts	0x2080, r24
     4aa:	90 93 81 20 	sts	0x2081, r25
     4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <udi_cdc_tx_send+0x118>
     4b0:	10 92 80 20 	sts	0x2080, r1
     4b4:	10 92 81 20 	sts	0x2081, r1
     4b8:	fe 01       	movw	r30, r28
     4ba:	ee 0f       	add	r30, r30
     4bc:	ff 1f       	adc	r31, r31
     4be:	ed 57       	subi	r30, 0x7D	; 125
     4c0:	ff 4d       	sbci	r31, 0xDF	; 223
     4c2:	20 81       	ld	r18, Z
     4c4:	31 81       	ldd	r19, Z+1	; 0x01
     4c6:	ae 01       	movw	r20, r28
     4c8:	00 24       	eor	r0, r0
     4ca:	56 95       	lsr	r21
     4cc:	47 95       	ror	r20
     4ce:	07 94       	ror	r0
     4d0:	56 95       	lsr	r21
     4d2:	47 95       	ror	r20
     4d4:	07 94       	ror	r0
     4d6:	54 2f       	mov	r21, r20
     4d8:	40 2d       	mov	r20, r0
     4da:	48 57       	subi	r20, 0x78	; 120
     4dc:	5f 4d       	sbci	r21, 0xDF	; 223
     4de:	0b e7       	ldi	r16, 0x7B	; 123
     4e0:	12 e0       	ldi	r17, 0x02	; 2
     4e2:	6f 2d       	mov	r22, r15
     4e4:	81 e8       	ldi	r24, 0x81	; 129
     4e6:	0e 94 0b 0b 	call	0x1616	; 0x1616 <udd_ep_run>
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	08 95       	ret

000004f6 <udi_cdc_data_sent>:
     4f6:	81 11       	cpse	r24, r1
     4f8:	15 c0       	rjmp	.+42     	; 0x524 <udi_cdc_data_sent+0x2e>
     4fa:	20 91 82 20 	lds	r18, 0x2082
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	22 23       	and	r18, r18
     504:	11 f0       	breq	.+4      	; 0x50a <udi_cdc_data_sent+0x14>
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	fc 01       	movw	r30, r24
     50c:	ee 0f       	add	r30, r30
     50e:	ff 1f       	adc	r31, r31
     510:	ed 57       	subi	r30, 0x7D	; 125
     512:	ff 4d       	sbci	r31, 0xDF	; 223
     514:	10 82       	st	Z, r1
     516:	11 82       	std	Z+1, r1	; 0x01
     518:	10 92 7e 20 	sts	0x207E, r1
     51c:	10 92 7f 20 	sts	0x207F, r1
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	3e cf       	rjmp	.-388    	; 0x3a0 <udi_cdc_tx_send>
     524:	08 95       	ret

00000526 <udi_cdc_data_sof_notify>:
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	3b cf       	rjmp	.-394    	; 0x3a0 <udi_cdc_tx_send>
     52a:	08 95       	ret

0000052c <udi_cdc_multi_get_nb_received_data>:
     52c:	4f b7       	in	r20, 0x3f	; 63
     52e:	f8 94       	cli
     530:	20 91 09 21 	lds	r18, 0x2109
     534:	30 91 0a 21 	lds	r19, 0x210A
     538:	e0 91 0b 21 	lds	r30, 0x210B
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	ee 0f       	add	r30, r30
     540:	ff 1f       	adc	r31, r31
     542:	e4 5f       	subi	r30, 0xF4	; 244
     544:	fe 4d       	sbci	r31, 0xDE	; 222
     546:	80 81       	ld	r24, Z
     548:	91 81       	ldd	r25, Z+1	; 0x01
     54a:	82 1b       	sub	r24, r18
     54c:	93 0b       	sbc	r25, r19
     54e:	4f bf       	out	0x3f, r20	; 63
     550:	08 95       	ret

00000552 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     552:	ec df       	rcall	.-40     	; 0x52c <udi_cdc_multi_get_nb_received_data>
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	89 2b       	or	r24, r25
     558:	09 f4       	brne	.+2      	; 0x55c <udi_cdc_multi_is_rx_ready+0xa>
     55a:	20 e0       	ldi	r18, 0x00	; 0
}
     55c:	82 2f       	mov	r24, r18
     55e:	08 95       	ret

00000560 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     568:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
     56a:	f8 94       	cli
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     56c:	50 91 0b 21 	lds	r21, 0x210B
	if (udi_cdc_rx_trans_ongoing[port] ||
     570:	80 91 08 21 	lds	r24, 0x2108
     574:	81 11       	cpse	r24, r1
     576:	10 c0       	rjmp	.+32     	; 0x598 <udi_cdc_rx_start+0x38>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     578:	20 91 09 21 	lds	r18, 0x2109
     57c:	30 91 0a 21 	lds	r19, 0x210A
     580:	c5 2f       	mov	r28, r21
     582:	d0 e0       	ldi	r29, 0x00	; 0
     584:	fe 01       	movw	r30, r28
     586:	ee 0f       	add	r30, r30
     588:	ff 1f       	adc	r31, r31
     58a:	e4 5f       	subi	r30, 0xF4	; 244
     58c:	fe 4d       	sbci	r31, 0xDE	; 222
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
     58e:	80 81       	ld	r24, Z
     590:	91 81       	ldd	r25, Z+1	; 0x01
     592:	28 17       	cp	r18, r24
     594:	39 07       	cpc	r19, r25
     596:	18 f4       	brcc	.+6      	; 0x59e <udi_cdc_rx_start+0x3e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     598:	4f bf       	out	0x3f, r20	; 63
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	23 c0       	rjmp	.+70     	; 0x5e4 <udi_cdc_rx_start+0x84>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
     59e:	10 92 09 21 	sts	0x2109, r1
     5a2:	10 92 0a 21 	sts	0x210A, r1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	51 11       	cpse	r21, r1
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	80 93 0b 21 	sts	0x210B, r24

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	80 93 08 21 	sts	0x2108, r24
     5b6:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	cb df       	rcall	.-106    	; 0x552 <udi_cdc_multi_is_rx_ready>
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
     5bc:	ae 01       	movw	r20, r28
     5be:	00 24       	eor	r0, r0
     5c0:	56 95       	lsr	r21
     5c2:	47 95       	ror	r20
     5c4:	07 94       	ror	r0
     5c6:	56 95       	lsr	r21
     5c8:	47 95       	ror	r20
     5ca:	07 94       	ror	r0
     5cc:	54 2f       	mov	r21, r20
     5ce:	40 2d       	mov	r20, r0
     5d0:	40 5f       	subi	r20, 0xF0	; 240
     5d2:	5e 4d       	sbci	r21, 0xDE	; 222
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
     5d4:	09 e2       	ldi	r16, 0x29	; 41
     5d6:	13 e0       	ldi	r17, 0x03	; 3
     5d8:	20 e4       	ldi	r18, 0x40	; 64
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	0e 94 0b 0b 	call	0x1616	; 0x1616 <udd_ep_run>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	08 95       	ret

000005ee <udi_cdc_data_enable>:
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
     5ee:	10 92 91 21 	sts	0x2191, r1
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
     5f2:	10 92 7f 20 	sts	0x207F, r1
	udi_cdc_tx_both_buf_to_send[port] = false;
     5f6:	10 92 7e 20 	sts	0x207E, r1
	udi_cdc_tx_buf_sel[port] = 0;
     5fa:	10 92 82 20 	sts	0x2082, r1
	udi_cdc_tx_buf_nb[port][0] = 0;
     5fe:	10 92 83 20 	sts	0x2083, r1
     602:	10 92 84 20 	sts	0x2084, r1
	udi_cdc_tx_buf_nb[port][1] = 0;
     606:	10 92 85 20 	sts	0x2085, r1
     60a:	10 92 86 20 	sts	0x2086, r1
	udi_cdc_tx_sof_num[port] = 0;
     60e:	10 92 80 20 	sts	0x2080, r1
     612:	10 92 81 20 	sts	0x2081, r1
	udi_cdc_tx_send(port);
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	c3 de       	rcall	.-634    	; 0x3a0 <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
     61a:	10 92 08 21 	sts	0x2108, r1
	udi_cdc_rx_buf_sel[port] = 0;
     61e:	10 92 0b 21 	sts	0x210B, r1
	udi_cdc_rx_buf_nb[port][0] = 0;
     622:	10 92 0c 21 	sts	0x210C, r1
     626:	10 92 0d 21 	sts	0x210D, r1
	udi_cdc_rx_pos[port] = 0;
     62a:	10 92 09 21 	sts	0x2109, r1
     62e:	10 92 0a 21 	sts	0x210A, r1
	if (!udi_cdc_rx_start(port)) {
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	95 df       	rcall	.-214    	; 0x560 <udi_cdc_rx_start>
     636:	88 23       	and	r24, r24
     638:	59 f0       	breq	.+22     	; 0x650 <udi_cdc_data_enable+0x62>
		return false;
	}
	udi_cdc_nb_data_enabled++;
     63a:	90 91 91 21 	lds	r25, 0x2191
     63e:	9f 5f       	subi	r25, 0xFF	; 255
     640:	90 93 91 21 	sts	0x2191, r25
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     644:	90 91 91 21 	lds	r25, 0x2191
     648:	91 30       	cpi	r25, 0x01	; 1
     64a:	11 f4       	brne	.+4      	; 0x650 <udi_cdc_data_enable+0x62>
		udi_cdc_data_running = true;
     64c:	90 93 90 21 	sts	0x2190, r25
	}
	return true;
}
     650:	08 95       	ret

00000652 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	94 2f       	mov	r25, r20
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
     658:	81 11       	cpse	r24, r1
     65a:	28 c0       	rjmp	.+80     	; 0x6ac <udi_cdc_data_received+0x5a>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     65c:	80 91 0b 21 	lds	r24, 0x210B
     660:	e1 e0       	ldi	r30, 0x01	; 1
     662:	81 11       	cpse	r24, r1
     664:	e0 e0       	ldi	r30, 0x00	; 0
	if (!n) {
     666:	61 15       	cp	r22, r1
     668:	71 05       	cpc	r23, r1
     66a:	a9 f4       	brne	.+42     	; 0x696 <udi_cdc_data_received+0x44>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	00 24       	eor	r0, r0
     670:	f6 95       	lsr	r31
     672:	e7 95       	ror	r30
     674:	07 94       	ror	r0
     676:	f6 95       	lsr	r31
     678:	e7 95       	ror	r30
     67a:	07 94       	ror	r0
     67c:	fe 2f       	mov	r31, r30
     67e:	e0 2d       	mov	r30, r0
     680:	af 01       	movw	r20, r30
     682:	40 5f       	subi	r20, 0xF0	; 240
     684:	5e 4d       	sbci	r21, 0xDE	; 222
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
     686:	09 e2       	ldi	r16, 0x29	; 41
     688:	13 e0       	ldi	r17, 0x03	; 3
     68a:	20 e4       	ldi	r18, 0x40	; 64
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	89 2f       	mov	r24, r25
     692:	c1 d7       	rcall	.+3970   	; 0x1616 <udd_ep_run>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
     694:	0b c0       	rjmp	.+22     	; 0x6ac <udi_cdc_data_received+0x5a>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	ee 0f       	add	r30, r30
     69a:	ff 1f       	adc	r31, r31
     69c:	e4 5f       	subi	r30, 0xF4	; 244
     69e:	fe 4d       	sbci	r31, 0xDE	; 222
     6a0:	60 83       	st	Z, r22
     6a2:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
     6a4:	10 92 08 21 	sts	0x2108, r1
	udi_cdc_rx_start(port);
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	5a df       	rcall	.-332    	; 0x560 <udi_cdc_rx_start>
}
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	08 95       	ret

000006b2 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     6b2:	e0 91 ac 21 	lds	r30, 0x21AC
     6b6:	f0 91 ad 21 	lds	r31, 0x21AD
     6ba:	01 90       	ld	r0, Z+
     6bc:	f0 81       	ld	r31, Z
     6be:	e0 2d       	mov	r30, r0
     6c0:	22 81       	ldd	r18, Z+2	; 0x02
     6c2:	33 81       	ldd	r19, Z+3	; 0x03
     6c4:	2e 0f       	add	r18, r30
     6c6:	3f 1f       	adc	r19, r31
     6c8:	fc 01       	movw	r30, r24
     6ca:	40 81       	ld	r20, Z
     6cc:	e4 0f       	add	r30, r20
     6ce:	f1 1d       	adc	r31, r1
     6d0:	e2 17       	cp	r30, r18
     6d2:	f3 07       	cpc	r31, r19
     6d4:	a0 f4       	brcc	.+40     	; 0x6fe <udc_next_desc_in_iface+0x4c>
     6d6:	81 81       	ldd	r24, Z+1	; 0x01
     6d8:	84 30       	cpi	r24, 0x04	; 4
     6da:	a1 f0       	breq	.+40     	; 0x704 <udc_next_desc_in_iface+0x52>
     6dc:	86 13       	cpse	r24, r22
     6de:	06 c0       	rjmp	.+12     	; 0x6ec <udc_next_desc_in_iface+0x3a>
     6e0:	14 c0       	rjmp	.+40     	; 0x70a <udc_next_desc_in_iface+0x58>
     6e2:	81 81       	ldd	r24, Z+1	; 0x01
     6e4:	84 30       	cpi	r24, 0x04	; 4
     6e6:	a1 f0       	breq	.+40     	; 0x710 <udc_next_desc_in_iface+0x5e>
     6e8:	86 17       	cp	r24, r22
     6ea:	a9 f0       	breq	.+42     	; 0x716 <udc_next_desc_in_iface+0x64>
     6ec:	80 81       	ld	r24, Z
     6ee:	e8 0f       	add	r30, r24
     6f0:	f1 1d       	adc	r31, r1
     6f2:	e2 17       	cp	r30, r18
     6f4:	f3 07       	cpc	r31, r19
     6f6:	a8 f3       	brcs	.-22     	; 0x6e2 <udc_next_desc_in_iface+0x30>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	08 95       	ret
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	08 95       	ret
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	08 95       	ret
     70a:	8e 2f       	mov	r24, r30
     70c:	9f 2f       	mov	r25, r31
     70e:	08 95       	ret
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	08 95       	ret
     716:	8e 2f       	mov	r24, r30
     718:	9f 2f       	mov	r25, r31
     71a:	08 95       	ret

0000071c <udc_valid_address>:
     71c:	80 91 ed 22 	lds	r24, 0x22ED
     720:	8f 77       	andi	r24, 0x7F	; 127
     722:	bc c6       	rjmp	.+3448   	; 0x149c <udd_set_address>
     724:	08 95       	ret

00000726 <udc_update_iface_desc>:
     726:	90 91 ae 21 	lds	r25, 0x21AE
     72a:	99 23       	and	r25, r25
     72c:	81 f1       	breq	.+96     	; 0x78e <udc_update_iface_desc+0x68>
     72e:	e0 91 ac 21 	lds	r30, 0x21AC
     732:	f0 91 ad 21 	lds	r31, 0x21AD
     736:	01 90       	ld	r0, Z+
     738:	f0 81       	ld	r31, Z
     73a:	e0 2d       	mov	r30, r0
     73c:	94 81       	ldd	r25, Z+4	; 0x04
     73e:	89 17       	cp	r24, r25
     740:	40 f5       	brcc	.+80     	; 0x792 <udc_update_iface_desc+0x6c>
     742:	e0 93 aa 21 	sts	0x21AA, r30
     746:	f0 93 ab 21 	sts	0x21AB, r31
     74a:	22 81       	ldd	r18, Z+2	; 0x02
     74c:	33 81       	ldd	r19, Z+3	; 0x03
     74e:	2e 0f       	add	r18, r30
     750:	3f 1f       	adc	r19, r31
     752:	e2 17       	cp	r30, r18
     754:	f3 07       	cpc	r31, r19
     756:	f8 f4       	brcc	.+62     	; 0x796 <udc_update_iface_desc+0x70>
     758:	91 81       	ldd	r25, Z+1	; 0x01
     75a:	94 30       	cpi	r25, 0x04	; 4
     75c:	61 f4       	brne	.+24     	; 0x776 <udc_update_iface_desc+0x50>
     75e:	92 81       	ldd	r25, Z+2	; 0x02
     760:	98 13       	cpse	r25, r24
     762:	09 c0       	rjmp	.+18     	; 0x776 <udc_update_iface_desc+0x50>
     764:	93 81       	ldd	r25, Z+3	; 0x03
     766:	96 13       	cpse	r25, r22
     768:	06 c0       	rjmp	.+12     	; 0x776 <udc_update_iface_desc+0x50>
     76a:	e0 93 aa 21 	sts	0x21AA, r30
     76e:	f0 93 ab 21 	sts	0x21AB, r31
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	08 95       	ret
     776:	90 81       	ld	r25, Z
     778:	e9 0f       	add	r30, r25
     77a:	f1 1d       	adc	r31, r1
     77c:	e2 17       	cp	r30, r18
     77e:	f3 07       	cpc	r31, r19
     780:	58 f3       	brcs	.-42     	; 0x758 <udc_update_iface_desc+0x32>
     782:	e0 93 aa 21 	sts	0x21AA, r30
     786:	f0 93 ab 21 	sts	0x21AB, r31
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	08 95       	ret
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	08 95       	ret
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	08 95       	ret
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	08 95       	ret

0000079a <udc_iface_disable>:
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	c8 2f       	mov	r28, r24
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	be df       	rcall	.-132    	; 0x726 <udc_update_iface_desc>
     7aa:	f8 2e       	mov	r15, r24
     7ac:	88 23       	and	r24, r24
     7ae:	79 f1       	breq	.+94     	; 0x80e <udc_iface_disable+0x74>
     7b0:	a0 91 ac 21 	lds	r26, 0x21AC
     7b4:	b0 91 ad 21 	lds	r27, 0x21AD
     7b8:	ec 2f       	mov	r30, r28
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	ee 0f       	add	r30, r30
     7be:	ff 1f       	adc	r31, r31
     7c0:	12 96       	adiw	r26, 0x02	; 2
     7c2:	2d 91       	ld	r18, X+
     7c4:	3c 91       	ld	r19, X
     7c6:	13 97       	sbiw	r26, 0x03	; 3
     7c8:	e2 0f       	add	r30, r18
     7ca:	f3 1f       	adc	r31, r19
     7cc:	00 81       	ld	r16, Z
     7ce:	11 81       	ldd	r17, Z+1	; 0x01
     7d0:	d8 01       	movw	r26, r16
     7d2:	16 96       	adiw	r26, 0x06	; 6
     7d4:	ed 91       	ld	r30, X+
     7d6:	fc 91       	ld	r31, X
     7d8:	17 97       	sbiw	r26, 0x07	; 7
     7da:	09 95       	icall
     7dc:	68 2f       	mov	r22, r24
     7de:	8c 2f       	mov	r24, r28
     7e0:	a2 df       	rcall	.-188    	; 0x726 <udc_update_iface_desc>
     7e2:	f8 2e       	mov	r15, r24
     7e4:	88 23       	and	r24, r24
     7e6:	99 f0       	breq	.+38     	; 0x80e <udc_iface_disable+0x74>
     7e8:	c0 91 aa 21 	lds	r28, 0x21AA
     7ec:	d0 91 ab 21 	lds	r29, 0x21AB
     7f0:	65 e0       	ldi	r22, 0x05	; 5
     7f2:	ce 01       	movw	r24, r28
     7f4:	5e df       	rcall	.-324    	; 0x6b2 <udc_next_desc_in_iface>
     7f6:	ec 01       	movw	r28, r24
     7f8:	00 97       	sbiw	r24, 0x00	; 0
     7fa:	19 f0       	breq	.+6      	; 0x802 <udc_iface_disable+0x68>
     7fc:	8a 81       	ldd	r24, Y+2	; 0x02
     7fe:	cb d7       	rcall	.+3990   	; 0x1796 <udd_ep_free>
     800:	f7 cf       	rjmp	.-18     	; 0x7f0 <udc_iface_disable+0x56>
     802:	d8 01       	movw	r26, r16
     804:	12 96       	adiw	r26, 0x02	; 2
     806:	ed 91       	ld	r30, X+
     808:	fc 91       	ld	r31, X
     80a:	13 97       	sbiw	r26, 0x03	; 3
     80c:	09 95       	icall
     80e:	8f 2d       	mov	r24, r15
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	08 95       	ret

0000081c <udc_iface_enable>:
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	18 2f       	mov	r17, r24
     824:	80 df       	rcall	.-256    	; 0x726 <udc_update_iface_desc>
     826:	88 23       	and	r24, r24
     828:	39 f1       	breq	.+78     	; 0x878 <udc_iface_enable+0x5c>
     82a:	c0 91 aa 21 	lds	r28, 0x21AA
     82e:	d0 91 ab 21 	lds	r29, 0x21AB
     832:	65 e0       	ldi	r22, 0x05	; 5
     834:	ce 01       	movw	r24, r28
     836:	3d df       	rcall	.-390    	; 0x6b2 <udc_next_desc_in_iface>
     838:	ec 01       	movw	r28, r24
     83a:	00 97       	sbiw	r24, 0x00	; 0
     83c:	41 f0       	breq	.+16     	; 0x84e <udc_iface_enable+0x32>
     83e:	4c 81       	ldd	r20, Y+4	; 0x04
     840:	5d 81       	ldd	r21, Y+5	; 0x05
     842:	6b 81       	ldd	r22, Y+3	; 0x03
     844:	8a 81       	ldd	r24, Y+2	; 0x02
     846:	41 d6       	rcall	.+3202   	; 0x14ca <udd_ep_alloc>
     848:	81 11       	cpse	r24, r1
     84a:	f3 cf       	rjmp	.-26     	; 0x832 <udc_iface_enable+0x16>
     84c:	15 c0       	rjmp	.+42     	; 0x878 <udc_iface_enable+0x5c>
     84e:	a0 91 ac 21 	lds	r26, 0x21AC
     852:	b0 91 ad 21 	lds	r27, 0x21AD
     856:	81 2f       	mov	r24, r17
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	88 0f       	add	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	12 96       	adiw	r26, 0x02	; 2
     860:	ed 91       	ld	r30, X+
     862:	fc 91       	ld	r31, X
     864:	13 97       	sbiw	r26, 0x03	; 3
     866:	e8 0f       	add	r30, r24
     868:	f9 1f       	adc	r31, r25
     86a:	01 90       	ld	r0, Z+
     86c:	f0 81       	ld	r31, Z
     86e:	e0 2d       	mov	r30, r0
     870:	01 90       	ld	r0, Z+
     872:	f0 81       	ld	r31, Z
     874:	e0 2d       	mov	r30, r0
     876:	09 95       	icall
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	08 95       	ret

00000880 <udc_reset>:
     880:	cf 93       	push	r28
     882:	80 91 ae 21 	lds	r24, 0x21AE
     886:	88 23       	and	r24, r24
     888:	c1 f0       	breq	.+48     	; 0x8ba <udc_reset+0x3a>
     88a:	e0 91 ac 21 	lds	r30, 0x21AC
     88e:	f0 91 ad 21 	lds	r31, 0x21AD
     892:	01 90       	ld	r0, Z+
     894:	f0 81       	ld	r31, Z
     896:	e0 2d       	mov	r30, r0
     898:	84 81       	ldd	r24, Z+4	; 0x04
     89a:	88 23       	and	r24, r24
     89c:	71 f0       	breq	.+28     	; 0x8ba <udc_reset+0x3a>
     89e:	c0 e0       	ldi	r28, 0x00	; 0
     8a0:	8c 2f       	mov	r24, r28
     8a2:	7b df       	rcall	.-266    	; 0x79a <udc_iface_disable>
     8a4:	cf 5f       	subi	r28, 0xFF	; 255
     8a6:	e0 91 ac 21 	lds	r30, 0x21AC
     8aa:	f0 91 ad 21 	lds	r31, 0x21AD
     8ae:	01 90       	ld	r0, Z+
     8b0:	f0 81       	ld	r31, Z
     8b2:	e0 2d       	mov	r30, r0
     8b4:	84 81       	ldd	r24, Z+4	; 0x04
     8b6:	c8 17       	cp	r28, r24
     8b8:	98 f3       	brcs	.-26     	; 0x8a0 <udc_reset+0x20>
     8ba:	10 92 ae 21 	sts	0x21AE, r1
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	80 93 af 21 	sts	0x21AF, r24
     8c6:	90 93 b0 21 	sts	0x21B0, r25
     8ca:	cf 91       	pop	r28
     8cc:	08 95       	ret

000008ce <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     8ce:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     8d0:	80 91 ae 21 	lds	r24, 0x21AE
     8d4:	88 23       	and	r24, r24
     8d6:	41 f1       	breq	.+80     	; 0x928 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     8d8:	e0 91 ac 21 	lds	r30, 0x21AC
     8dc:	f0 91 ad 21 	lds	r31, 0x21AD
     8e0:	a0 81       	ld	r26, Z
     8e2:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     8e4:	14 96       	adiw	r26, 0x04	; 4
     8e6:	8c 91       	ld	r24, X
     8e8:	88 23       	and	r24, r24
     8ea:	f1 f0       	breq	.+60     	; 0x928 <udc_sof_notify+0x5a>
     8ec:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     8ee:	8c 2f       	mov	r24, r28
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	02 80       	ldd	r0, Z+2	; 0x02
     8f8:	f3 81       	ldd	r31, Z+3	; 0x03
     8fa:	e0 2d       	mov	r30, r0
     8fc:	e8 0f       	add	r30, r24
     8fe:	f9 1f       	adc	r31, r25
     900:	01 90       	ld	r0, Z+
     902:	f0 81       	ld	r31, Z
     904:	e0 2d       	mov	r30, r0
     906:	00 84       	ldd	r0, Z+8	; 0x08
     908:	f1 85       	ldd	r31, Z+9	; 0x09
     90a:	e0 2d       	mov	r30, r0
     90c:	30 97       	sbiw	r30, 0x00	; 0
     90e:	09 f0       	breq	.+2      	; 0x912 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     910:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     912:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     914:	e0 91 ac 21 	lds	r30, 0x21AC
     918:	f0 91 ad 21 	lds	r31, 0x21AD
     91c:	a0 81       	ld	r26, Z
     91e:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     920:	14 96       	adiw	r26, 0x04	; 4
     922:	8c 91       	ld	r24, X
     924:	c8 17       	cp	r28, r24
     926:	18 f3       	brcs	.-58     	; 0x8ee <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     938:	10 92 f5 22 	sts	0x22F5, r1
     93c:	10 92 f6 22 	sts	0x22F6, r1
	udd_g_ctrlreq.callback = NULL;
     940:	10 92 f7 22 	sts	0x22F7, r1
     944:	10 92 f8 22 	sts	0x22F8, r1
	udd_g_ctrlreq.over_under_run = NULL;
     948:	10 92 f9 22 	sts	0x22F9, r1
     94c:	10 92 fa 22 	sts	0x22FA, r1

	if (Udd_setup_is_in()) {
     950:	20 91 eb 22 	lds	r18, 0x22EB
     954:	22 23       	and	r18, r18
     956:	0c f0       	brlt	.+2      	; 0x95a <udc_process_setup+0x2e>
     958:	65 c2       	rjmp	.+1226   	; 0xe24 <udc_process_setup+0x4f8>
		if (udd_g_ctrlreq.req.wLength == 0) {
     95a:	80 91 f1 22 	lds	r24, 0x22F1
     95e:	90 91 f2 22 	lds	r25, 0x22F2
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	09 f0       	breq	.+2      	; 0x968 <udc_process_setup+0x3c>
     966:	63 c2       	rjmp	.+1222   	; 0xe2e <udc_process_setup+0x502>
     968:	59 c2       	rjmp	.+1202   	; 0xe1c <udc_process_setup+0x4f0>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     96a:	2f 71       	andi	r18, 0x1F	; 31
     96c:	09 f0       	breq	.+2      	; 0x970 <udc_process_setup+0x44>
     96e:	8b c0       	rjmp	.+278    	; 0xa86 <udc_process_setup+0x15a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     970:	30 91 ec 22 	lds	r19, 0x22EC
     974:	36 30       	cpi	r19, 0x06	; 6
     976:	81 f0       	breq	.+32     	; 0x998 <udc_process_setup+0x6c>
     978:	38 30       	cpi	r19, 0x08	; 8
     97a:	09 f4       	brne	.+2      	; 0x97e <udc_process_setup+0x52>
     97c:	79 c0       	rjmp	.+242    	; 0xa70 <udc_process_setup+0x144>
     97e:	31 11       	cpse	r19, r1
     980:	82 c0       	rjmp	.+260    	; 0xa86 <udc_process_setup+0x15a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     982:	02 97       	sbiw	r24, 0x02	; 2
     984:	39 f4       	brne	.+14     	; 0x994 <udc_process_setup+0x68>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     986:	62 e0       	ldi	r22, 0x02	; 2
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	8f ea       	ldi	r24, 0xAF	; 175
     98c:	91 e2       	ldi	r25, 0x21	; 33
     98e:	94 d5       	rcall	.+2856   	; 0x14b8 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     990:	01 e0       	ldi	r16, 0x01	; 1
     992:	c7 c1       	rjmp	.+910    	; 0xd22 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     994:	00 e0       	ldi	r16, 0x00	; 0
     996:	c5 c1       	rjmp	.+906    	; 0xd22 <udc_process_setup+0x3f6>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     998:	20 91 ed 22 	lds	r18, 0x22ED
     99c:	30 91 ee 22 	lds	r19, 0x22EE

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     9a0:	83 2f       	mov	r24, r19
     9a2:	99 27       	eor	r25, r25
     9a4:	82 30       	cpi	r24, 0x02	; 2
     9a6:	91 05       	cpc	r25, r1
     9a8:	99 f0       	breq	.+38     	; 0x9d0 <udc_process_setup+0xa4>
     9aa:	1c f4       	brge	.+6      	; 0x9b2 <udc_process_setup+0x86>
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	39 f0       	breq	.+14     	; 0x9be <udc_process_setup+0x92>
     9b0:	55 c0       	rjmp	.+170    	; 0xa5c <udc_process_setup+0x130>
     9b2:	83 30       	cpi	r24, 0x03	; 3
     9b4:	91 05       	cpc	r25, r1
     9b6:	d1 f1       	breq	.+116    	; 0xa2c <udc_process_setup+0x100>
     9b8:	0f 97       	sbiw	r24, 0x0f	; 15
     9ba:	59 f1       	breq	.+86     	; 0xa12 <udc_process_setup+0xe6>
     9bc:	4f c0       	rjmp	.+158    	; 0xa5c <udc_process_setup+0x130>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     9be:	80 91 14 20 	lds	r24, 0x2014
     9c2:	90 91 15 20 	lds	r25, 0x2015
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     9c6:	dc 01       	movw	r26, r24
     9c8:	6c 91       	ld	r22, X
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	75 d5       	rcall	.+2794   	; 0x14b8 <udd_set_setup_payload>
     9ce:	35 c0       	rjmp	.+106    	; 0xa3a <udc_process_setup+0x10e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     9d0:	e0 91 14 20 	lds	r30, 0x2014
     9d4:	f0 91 15 20 	lds	r31, 0x2015
     9d8:	81 89       	ldd	r24, Z+17	; 0x11
     9da:	28 17       	cp	r18, r24
     9dc:	08 f0       	brcs	.+2      	; 0x9e0 <udc_process_setup+0xb4>
     9de:	40 c0       	rjmp	.+128    	; 0xa60 <udc_process_setup+0x134>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     9e0:	c9 01       	movw	r24, r18
     9e2:	99 27       	eor	r25, r25
     9e4:	88 0f       	add	r24, r24
     9e6:	99 1f       	adc	r25, r25
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	e0 91 16 20 	lds	r30, 0x2016
     9f0:	f0 91 17 20 	lds	r31, 0x2017
     9f4:	e8 0f       	add	r30, r24
     9f6:	f9 1f       	adc	r31, r25
     9f8:	80 81       	ld	r24, Z
     9fa:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     9fc:	fc 01       	movw	r30, r24
     9fe:	62 81       	ldd	r22, Z+2	; 0x02
     a00:	73 81       	ldd	r23, Z+3	; 0x03
     a02:	5a d5       	rcall	.+2740   	; 0x14b8 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     a04:	e0 91 f3 22 	lds	r30, 0x22F3
     a08:	f0 91 f4 22 	lds	r31, 0x22F4
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	81 83       	std	Z+1, r24	; 0x01
     a10:	14 c0       	rjmp	.+40     	; 0xa3a <udc_process_setup+0x10e>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     a12:	80 91 18 20 	lds	r24, 0x2018
     a16:	90 91 19 20 	lds	r25, 0x2019
     a1a:	00 97       	sbiw	r24, 0x00	; 0
     a1c:	19 f1       	breq	.+70     	; 0xa64 <udc_process_setup+0x138>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     a1e:	dc 01       	movw	r26, r24
     a20:	12 96       	adiw	r26, 0x02	; 2
     a22:	6d 91       	ld	r22, X+
     a24:	7c 91       	ld	r23, X
     a26:	13 97       	sbiw	r26, 0x03	; 3
     a28:	47 d5       	rcall	.+2702   	; 0x14b8 <udd_set_setup_payload>
     a2a:	07 c0       	rjmp	.+14     	; 0xa3a <udc_process_setup+0x10e>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     a2c:	21 11       	cpse	r18, r1
     a2e:	1c c0       	rjmp	.+56     	; 0xa68 <udc_process_setup+0x13c>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     a30:	64 e0       	ldi	r22, 0x04	; 4
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	88 e7       	ldi	r24, 0x78	; 120
     a36:	90 e2       	ldi	r25, 0x20	; 32
     a38:	3f d5       	rcall	.+2686   	; 0x14b8 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     a3a:	80 91 f1 22 	lds	r24, 0x22F1
     a3e:	90 91 f2 22 	lds	r25, 0x22F2
     a42:	20 91 f5 22 	lds	r18, 0x22F5
     a46:	30 91 f6 22 	lds	r19, 0x22F6
     a4a:	82 17       	cp	r24, r18
     a4c:	93 07       	cpc	r25, r19
     a4e:	70 f4       	brcc	.+28     	; 0xa6c <udc_process_setup+0x140>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     a50:	80 93 f5 22 	sts	0x22F5, r24
     a54:	90 93 f6 22 	sts	0x22F6, r25
	}
	return true;
     a58:	01 e0       	ldi	r16, 0x01	; 1
     a5a:	63 c1       	rjmp	.+710    	; 0xd22 <udc_process_setup+0x3f6>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     a5c:	00 e0       	ldi	r16, 0x00	; 0
     a5e:	61 c1       	rjmp	.+706    	; 0xd22 <udc_process_setup+0x3f6>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     a60:	00 e0       	ldi	r16, 0x00	; 0
     a62:	5f c1       	rjmp	.+702    	; 0xd22 <udc_process_setup+0x3f6>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     a64:	00 e0       	ldi	r16, 0x00	; 0
     a66:	5d c1       	rjmp	.+698    	; 0xd22 <udc_process_setup+0x3f6>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     a68:	00 e0       	ldi	r16, 0x00	; 0
     a6a:	5b c1       	rjmp	.+694    	; 0xd22 <udc_process_setup+0x3f6>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     a6c:	01 e0       	ldi	r16, 0x01	; 1
     a6e:	59 c1       	rjmp	.+690    	; 0xd22 <udc_process_setup+0x3f6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	39 f4       	brne	.+14     	; 0xa82 <udc_process_setup+0x156>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	8e ea       	ldi	r24, 0xAE	; 174
     a7a:	91 e2       	ldi	r25, 0x21	; 33
     a7c:	1d d5       	rcall	.+2618   	; 0x14b8 <udd_set_setup_payload>
	return true;
     a7e:	01 e0       	ldi	r16, 0x01	; 1
     a80:	50 c1       	rjmp	.+672    	; 0xd22 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     a82:	00 e0       	ldi	r16, 0x00	; 0
     a84:	4e c1       	rjmp	.+668    	; 0xd22 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     a86:	21 30       	cpi	r18, 0x01	; 1
     a88:	09 f0       	breq	.+2      	; 0xa8c <udc_process_setup+0x160>
     a8a:	3f c0       	rjmp	.+126    	; 0xb0a <udc_process_setup+0x1de>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     a8c:	30 91 ec 22 	lds	r19, 0x22EC
     a90:	3a 30       	cpi	r19, 0x0A	; 10
     a92:	d9 f5       	brne	.+118    	; 0xb0a <udc_process_setup+0x1de>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	99 f5       	brne	.+102    	; 0xafe <udc_process_setup+0x1d2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     a98:	80 91 ae 21 	lds	r24, 0x21AE
     a9c:	88 23       	and	r24, r24
     a9e:	89 f1       	breq	.+98     	; 0xb02 <udc_process_setup+0x1d6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     aa0:	c0 91 ef 22 	lds	r28, 0x22EF
     aa4:	d0 91 f0 22 	lds	r29, 0x22F0
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     aa8:	e0 90 ac 21 	lds	r14, 0x21AC
     aac:	f0 90 ad 21 	lds	r15, 0x21AD
     ab0:	d7 01       	movw	r26, r14
     ab2:	ed 91       	ld	r30, X+
     ab4:	fc 91       	ld	r31, X
     ab6:	84 81       	ldd	r24, Z+4	; 0x04
     ab8:	c8 17       	cp	r28, r24
     aba:	28 f5       	brcc	.+74     	; 0xb06 <udc_process_setup+0x1da>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	8c 2f       	mov	r24, r28
     ac0:	32 de       	rcall	.-924    	; 0x726 <udc_update_iface_desc>
     ac2:	08 2f       	mov	r16, r24
     ac4:	88 23       	and	r24, r24
     ac6:	09 f4       	brne	.+2      	; 0xaca <udc_process_setup+0x19e>
     ac8:	2c c1       	rjmp	.+600    	; 0xd22 <udc_process_setup+0x3f6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     aca:	ce 01       	movw	r24, r28
     acc:	99 27       	eor	r25, r25
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	d7 01       	movw	r26, r14
     ad4:	12 96       	adiw	r26, 0x02	; 2
     ad6:	ed 91       	ld	r30, X+
     ad8:	fc 91       	ld	r31, X
     ada:	13 97       	sbiw	r26, 0x03	; 3
     adc:	e8 0f       	add	r30, r24
     ade:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     ae0:	01 90       	ld	r0, Z+
     ae2:	f0 81       	ld	r31, Z
     ae4:	e0 2d       	mov	r30, r0
     ae6:	06 80       	ldd	r0, Z+6	; 0x06
     ae8:	f7 81       	ldd	r31, Z+7	; 0x07
     aea:	e0 2d       	mov	r30, r0
     aec:	09 95       	icall
     aee:	80 93 a9 21 	sts	0x21A9, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	89 ea       	ldi	r24, 0xA9	; 169
     af8:	91 e2       	ldi	r25, 0x21	; 33
     afa:	de d4       	rcall	.+2492   	; 0x14b8 <udd_set_setup_payload>
     afc:	12 c1       	rjmp	.+548    	; 0xd22 <udc_process_setup+0x3f6>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     afe:	00 e0       	ldi	r16, 0x00	; 0
     b00:	10 c1       	rjmp	.+544    	; 0xd22 <udc_process_setup+0x3f6>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     b02:	00 e0       	ldi	r16, 0x00	; 0
     b04:	0e c1       	rjmp	.+540    	; 0xd22 <udc_process_setup+0x3f6>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     b06:	00 e0       	ldi	r16, 0x00	; 0
     b08:	0c c1       	rjmp	.+536    	; 0xd22 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     b0a:	22 30       	cpi	r18, 0x02	; 2
     b0c:	09 f0       	breq	.+2      	; 0xb10 <udc_process_setup+0x1e4>
     b0e:	0b c1       	rjmp	.+534    	; 0xd26 <udc_process_setup+0x3fa>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     b10:	20 91 ec 22 	lds	r18, 0x22EC
     b14:	21 11       	cpse	r18, r1
     b16:	00 c1       	rjmp	.+512    	; 0xd18 <udc_process_setup+0x3ec>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     b18:	02 97       	sbiw	r24, 0x02	; 2
     b1a:	79 f4       	brne	.+30     	; 0xb3a <udc_process_setup+0x20e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     b1c:	80 91 ef 22 	lds	r24, 0x22EF
     b20:	35 d5       	rcall	.+2666   	; 0x158c <udd_ep_is_halted>
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	80 93 a7 21 	sts	0x21A7, r24
     b28:	90 93 a8 21 	sts	0x21A8, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     b2c:	62 e0       	ldi	r22, 0x02	; 2
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	87 ea       	ldi	r24, 0xA7	; 167
     b32:	91 e2       	ldi	r25, 0x21	; 33
     b34:	c1 d4       	rcall	.+2434   	; 0x14b8 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     b36:	01 e0       	ldi	r16, 0x01	; 1
     b38:	f4 c0       	rjmp	.+488    	; 0xd22 <udc_process_setup+0x3f6>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     b3a:	00 e0       	ldi	r16, 0x00	; 0
     b3c:	f2 c0       	rjmp	.+484    	; 0xd22 <udc_process_setup+0x3f6>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     b3e:	2f 71       	andi	r18, 0x1F	; 31
     b40:	09 f0       	breq	.+2      	; 0xb44 <udc_process_setup+0x218>
     b42:	90 c0       	rjmp	.+288    	; 0xc64 <udc_process_setup+0x338>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     b44:	80 91 ec 22 	lds	r24, 0x22EC
     b48:	83 30       	cpi	r24, 0x03	; 3
     b4a:	09 f4       	brne	.+2      	; 0xb4e <udc_process_setup+0x222>
     b4c:	e7 c0       	rjmp	.+462    	; 0xd1c <udc_process_setup+0x3f0>
     b4e:	18 f4       	brcc	.+6      	; 0xb56 <udc_process_setup+0x22a>
     b50:	81 30       	cpi	r24, 0x01	; 1
     b52:	b1 f0       	breq	.+44     	; 0xb80 <udc_process_setup+0x254>
     b54:	87 c0       	rjmp	.+270    	; 0xc64 <udc_process_setup+0x338>
     b56:	85 30       	cpi	r24, 0x05	; 5
     b58:	19 f0       	breq	.+6      	; 0xb60 <udc_process_setup+0x234>
     b5a:	89 30       	cpi	r24, 0x09	; 9
     b5c:	61 f1       	breq	.+88     	; 0xbb6 <udc_process_setup+0x28a>
     b5e:	82 c0       	rjmp	.+260    	; 0xc64 <udc_process_setup+0x338>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     b60:	80 91 f1 22 	lds	r24, 0x22F1
     b64:	90 91 f2 22 	lds	r25, 0x22F2
     b68:	89 2b       	or	r24, r25
     b6a:	41 f4       	brne	.+16     	; 0xb7c <udc_process_setup+0x250>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     b6c:	8e e8       	ldi	r24, 0x8E	; 142
     b6e:	93 e0       	ldi	r25, 0x03	; 3
     b70:	80 93 f7 22 	sts	0x22F7, r24
     b74:	90 93 f8 22 	sts	0x22F8, r25
	return true;
     b78:	01 e0       	ldi	r16, 0x01	; 1
     b7a:	d3 c0       	rjmp	.+422    	; 0xd22 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     b7c:	00 e0       	ldi	r16, 0x00	; 0
     b7e:	d1 c0       	rjmp	.+418    	; 0xd22 <udc_process_setup+0x3f6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     b80:	80 91 f1 22 	lds	r24, 0x22F1
     b84:	90 91 f2 22 	lds	r25, 0x22F2
     b88:	89 2b       	or	r24, r25
     b8a:	89 f4       	brne	.+34     	; 0xbae <udc_process_setup+0x282>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     b8c:	80 91 ed 22 	lds	r24, 0x22ED
     b90:	90 91 ee 22 	lds	r25, 0x22EE
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	69 f4       	brne	.+26     	; 0xbb2 <udc_process_setup+0x286>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     b98:	80 91 af 21 	lds	r24, 0x21AF
     b9c:	90 91 b0 21 	lds	r25, 0x21B0
     ba0:	8d 7f       	andi	r24, 0xFD	; 253
     ba2:	80 93 af 21 	sts	0x21AF, r24
     ba6:	90 93 b0 21 	sts	0x21B0, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     baa:	01 e0       	ldi	r16, 0x01	; 1
     bac:	ba c0       	rjmp	.+372    	; 0xd22 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     bae:	00 e0       	ldi	r16, 0x00	; 0
     bb0:	b8 c0       	rjmp	.+368    	; 0xd22 <udc_process_setup+0x3f6>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     bb2:	00 e0       	ldi	r16, 0x00	; 0
     bb4:	b6 c0       	rjmp	.+364    	; 0xd22 <udc_process_setup+0x3f6>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     bb6:	80 91 f1 22 	lds	r24, 0x22F1
     bba:	90 91 f2 22 	lds	r25, 0x22F2
     bbe:	89 2b       	or	r24, r25
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <udc_process_setup+0x298>
     bc2:	46 c0       	rjmp	.+140    	; 0xc50 <udc_process_setup+0x324>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     bc4:	6e d4       	rcall	.+2268   	; 0x14a2 <udd_getaddress>
     bc6:	88 23       	and	r24, r24
     bc8:	09 f4       	brne	.+2      	; 0xbcc <udc_process_setup+0x2a0>
     bca:	44 c0       	rjmp	.+136    	; 0xc54 <udc_process_setup+0x328>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     bcc:	20 91 ed 22 	lds	r18, 0x22ED
     bd0:	30 91 ee 22 	lds	r19, 0x22EE
     bd4:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     bd6:	e0 91 14 20 	lds	r30, 0x2014
     bda:	f0 91 15 20 	lds	r31, 0x2015
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     bde:	81 89       	ldd	r24, Z+17	; 0x11
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	82 17       	cp	r24, r18
     be4:	93 07       	cpc	r25, r19
     be6:	c0 f1       	brcs	.+112    	; 0xc58 <udc_process_setup+0x32c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     be8:	4b de       	rcall	.-874    	; 0x880 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     bea:	80 91 ed 22 	lds	r24, 0x22ED
     bee:	90 91 ee 22 	lds	r25, 0x22EE
     bf2:	80 93 ae 21 	sts	0x21AE, r24
	if (udc_num_configuration == 0) {
     bf6:	88 23       	and	r24, r24
     bf8:	89 f1       	breq	.+98     	; 0xc5c <udc_process_setup+0x330>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     bfa:	99 27       	eor	r25, r25
     bfc:	81 50       	subi	r24, 0x01	; 1
     bfe:	90 4c       	sbci	r25, 0xC0	; 192
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	e0 91 16 20 	lds	r30, 0x2016
     c0c:	f0 91 17 20 	lds	r31, 0x2017
     c10:	e8 0f       	add	r30, r24
     c12:	f9 1f       	adc	r31, r25
     c14:	e0 93 ac 21 	sts	0x21AC, r30
     c18:	f0 93 ad 21 	sts	0x21AD, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c1c:	01 90       	ld	r0, Z+
     c1e:	f0 81       	ld	r31, Z
     c20:	e0 2d       	mov	r30, r0
     c22:	84 81       	ldd	r24, Z+4	; 0x04
     c24:	88 23       	and	r24, r24
     c26:	e1 f0       	breq	.+56     	; 0xc60 <udc_process_setup+0x334>
     c28:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	8c 2f       	mov	r24, r28
     c2e:	f6 dd       	rcall	.-1044   	; 0x81c <udc_iface_enable>
     c30:	08 2f       	mov	r16, r24
     c32:	88 23       	and	r24, r24
     c34:	09 f4       	brne	.+2      	; 0xc38 <udc_process_setup+0x30c>
     c36:	75 c0       	rjmp	.+234    	; 0xd22 <udc_process_setup+0x3f6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     c38:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c3a:	e0 91 ac 21 	lds	r30, 0x21AC
     c3e:	f0 91 ad 21 	lds	r31, 0x21AD
     c42:	01 90       	ld	r0, Z+
     c44:	f0 81       	ld	r31, Z
     c46:	e0 2d       	mov	r30, r0
     c48:	84 81       	ldd	r24, Z+4	; 0x04
     c4a:	c8 17       	cp	r28, r24
     c4c:	70 f3       	brcs	.-36     	; 0xc2a <udc_process_setup+0x2fe>
     c4e:	69 c0       	rjmp	.+210    	; 0xd22 <udc_process_setup+0x3f6>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     c50:	00 e0       	ldi	r16, 0x00	; 0
     c52:	67 c0       	rjmp	.+206    	; 0xd22 <udc_process_setup+0x3f6>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     c54:	00 e0       	ldi	r16, 0x00	; 0
     c56:	65 c0       	rjmp	.+202    	; 0xd22 <udc_process_setup+0x3f6>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     c58:	00 e0       	ldi	r16, 0x00	; 0
     c5a:	63 c0       	rjmp	.+198    	; 0xd22 <udc_process_setup+0x3f6>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     c5c:	01 e0       	ldi	r16, 0x01	; 1
     c5e:	61 c0       	rjmp	.+194    	; 0xd22 <udc_process_setup+0x3f6>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     c60:	01 e0       	ldi	r16, 0x01	; 1
     c62:	5f c0       	rjmp	.+190    	; 0xd22 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     c64:	21 30       	cpi	r18, 0x01	; 1
     c66:	09 f5       	brne	.+66     	; 0xcaa <udc_process_setup+0x37e>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     c68:	80 91 ec 22 	lds	r24, 0x22EC
     c6c:	8b 30       	cpi	r24, 0x0B	; 11
     c6e:	e9 f4       	brne	.+58     	; 0xcaa <udc_process_setup+0x37e>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     c70:	80 91 f1 22 	lds	r24, 0x22F1
     c74:	90 91 f2 22 	lds	r25, 0x22F2
     c78:	89 2b       	or	r24, r25
     c7a:	99 f4       	brne	.+38     	; 0xca2 <udc_process_setup+0x376>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     c7c:	80 91 ae 21 	lds	r24, 0x21AE
     c80:	88 23       	and	r24, r24
     c82:	89 f0       	breq	.+34     	; 0xca6 <udc_process_setup+0x37a>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     c84:	c0 91 ef 22 	lds	r28, 0x22EF
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     c88:	d0 91 ed 22 	lds	r29, 0x22ED

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     c8c:	8c 2f       	mov	r24, r28
     c8e:	85 dd       	rcall	.-1270   	; 0x79a <udc_iface_disable>
     c90:	08 2f       	mov	r16, r24
     c92:	88 23       	and	r24, r24
     c94:	09 f4       	brne	.+2      	; 0xc98 <udc_process_setup+0x36c>
     c96:	45 c0       	rjmp	.+138    	; 0xd22 <udc_process_setup+0x3f6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     c98:	6d 2f       	mov	r22, r29
     c9a:	8c 2f       	mov	r24, r28
     c9c:	bf dd       	rcall	.-1154   	; 0x81c <udc_iface_enable>
     c9e:	08 2f       	mov	r16, r24
     ca0:	40 c0       	rjmp	.+128    	; 0xd22 <udc_process_setup+0x3f6>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     ca2:	00 e0       	ldi	r16, 0x00	; 0
     ca4:	3e c0       	rjmp	.+124    	; 0xd22 <udc_process_setup+0x3f6>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     ca6:	00 e0       	ldi	r16, 0x00	; 0
     ca8:	3c c0       	rjmp	.+120    	; 0xd22 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     caa:	22 30       	cpi	r18, 0x02	; 2
     cac:	09 f0       	breq	.+2      	; 0xcb0 <udc_process_setup+0x384>
     cae:	3b c0       	rjmp	.+118    	; 0xd26 <udc_process_setup+0x3fa>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     cb0:	80 91 ec 22 	lds	r24, 0x22EC
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	19 f0       	breq	.+6      	; 0xcbe <udc_process_setup+0x392>
     cb8:	83 30       	cpi	r24, 0x03	; 3
     cba:	b1 f0       	breq	.+44     	; 0xce8 <udc_process_setup+0x3bc>
     cbc:	31 c0       	rjmp	.+98     	; 0xd20 <udc_process_setup+0x3f4>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     cbe:	80 91 f1 22 	lds	r24, 0x22F1
     cc2:	90 91 f2 22 	lds	r25, 0x22F2
     cc6:	89 2b       	or	r24, r25
     cc8:	59 f4       	brne	.+22     	; 0xce0 <udc_process_setup+0x3b4>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     cca:	80 91 ed 22 	lds	r24, 0x22ED
     cce:	90 91 ee 22 	lds	r25, 0x22EE
     cd2:	89 2b       	or	r24, r25
     cd4:	39 f4       	brne	.+14     	; 0xce4 <udc_process_setup+0x3b8>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     cd6:	80 91 ef 22 	lds	r24, 0x22EF
     cda:	73 d4       	rcall	.+2278   	; 0x15c2 <udd_ep_clear_halt>
     cdc:	08 2f       	mov	r16, r24
     cde:	21 c0       	rjmp	.+66     	; 0xd22 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     ce0:	00 e0       	ldi	r16, 0x00	; 0
     ce2:	1f c0       	rjmp	.+62     	; 0xd22 <udc_process_setup+0x3f6>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     ce4:	00 e0       	ldi	r16, 0x00	; 0
     ce6:	1d c0       	rjmp	.+58     	; 0xd22 <udc_process_setup+0x3f6>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     ce8:	80 91 f1 22 	lds	r24, 0x22F1
     cec:	90 91 f2 22 	lds	r25, 0x22F2
     cf0:	89 2b       	or	r24, r25
     cf2:	71 f4       	brne	.+28     	; 0xd10 <udc_process_setup+0x3e4>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     cf4:	80 91 ed 22 	lds	r24, 0x22ED
     cf8:	90 91 ee 22 	lds	r25, 0x22EE
     cfc:	89 2b       	or	r24, r25
     cfe:	51 f4       	brne	.+20     	; 0xd14 <udc_process_setup+0x3e8>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     d00:	cf ee       	ldi	r28, 0xEF	; 239
     d02:	d2 e2       	ldi	r29, 0x22	; 34
     d04:	88 81       	ld	r24, Y
     d06:	0e d5       	rcall	.+2588   	; 0x1724 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     d08:	88 81       	ld	r24, Y
     d0a:	62 d5       	rcall	.+2756   	; 0x17d0 <udd_ep_set_halt>
     d0c:	08 2f       	mov	r16, r24
     d0e:	09 c0       	rjmp	.+18     	; 0xd22 <udc_process_setup+0x3f6>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     d10:	00 e0       	ldi	r16, 0x00	; 0
     d12:	07 c0       	rjmp	.+14     	; 0xd22 <udc_process_setup+0x3f6>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     d14:	00 e0       	ldi	r16, 0x00	; 0
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <udc_process_setup+0x3f6>
				break;
			}
		}
#endif
	}
	return false;
     d18:	00 e0       	ldi	r16, 0x00	; 0
     d1a:	03 c0       	rjmp	.+6      	; 0xd22 <udc_process_setup+0x3f6>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     d1c:	00 e0       	ldi	r16, 0x00	; 0
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <udc_process_setup+0x3f6>
				break;
			}
		}
#endif
	}
	return false;
     d20:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     d22:	01 11       	cpse	r16, r1
     d24:	89 c0       	rjmp	.+274    	; 0xe38 <udc_process_setup+0x50c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     d26:	80 91 eb 22 	lds	r24, 0x22EB
     d2a:	8f 71       	andi	r24, 0x1F	; 31
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	c1 f5       	brne	.+112    	; 0xda0 <udc_process_setup+0x474>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     d30:	80 91 ae 21 	lds	r24, 0x21AE
     d34:	88 23       	and	r24, r24
     d36:	a1 f1       	breq	.+104    	; 0xda0 <udc_process_setup+0x474>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     d38:	c0 91 ef 22 	lds	r28, 0x22EF
     d3c:	d0 91 f0 22 	lds	r29, 0x22F0
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     d40:	00 91 ac 21 	lds	r16, 0x21AC
     d44:	10 91 ad 21 	lds	r17, 0x21AD
     d48:	d8 01       	movw	r26, r16
     d4a:	ed 91       	ld	r30, X+
     d4c:	fc 91       	ld	r31, X
     d4e:	84 81       	ldd	r24, Z+4	; 0x04
     d50:	c8 17       	cp	r28, r24
     d52:	30 f5       	brcc	.+76     	; 0xda0 <udc_process_setup+0x474>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	8c 2f       	mov	r24, r28
     d58:	e6 dc       	rcall	.-1588   	; 0x726 <udc_update_iface_desc>
     d5a:	88 23       	and	r24, r24
     d5c:	09 f1       	breq	.+66     	; 0xda0 <udc_process_setup+0x474>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     d5e:	ce 01       	movw	r24, r28
     d60:	99 27       	eor	r25, r25
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	d8 01       	movw	r26, r16
     d68:	12 96       	adiw	r26, 0x02	; 2
     d6a:	ed 91       	ld	r30, X+
     d6c:	fc 91       	ld	r31, X
     d6e:	13 97       	sbiw	r26, 0x03	; 3
     d70:	e8 0f       	add	r30, r24
     d72:	f9 1f       	adc	r31, r25
     d74:	00 81       	ld	r16, Z
     d76:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     d78:	d8 01       	movw	r26, r16
     d7a:	16 96       	adiw	r26, 0x06	; 6
     d7c:	ed 91       	ld	r30, X+
     d7e:	fc 91       	ld	r31, X
     d80:	17 97       	sbiw	r26, 0x07	; 7
     d82:	09 95       	icall
     d84:	68 2f       	mov	r22, r24
     d86:	8c 2f       	mov	r24, r28
     d88:	ce dc       	rcall	.-1636   	; 0x726 <udc_update_iface_desc>
     d8a:	88 23       	and	r24, r24
     d8c:	49 f0       	breq	.+18     	; 0xda0 <udc_process_setup+0x474>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     d8e:	d8 01       	movw	r26, r16
     d90:	14 96       	adiw	r26, 0x04	; 4
     d92:	ed 91       	ld	r30, X+
     d94:	fc 91       	ld	r31, X
     d96:	15 97       	sbiw	r26, 0x05	; 5
     d98:	09 95       	icall
     d9a:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     d9c:	81 11       	cpse	r24, r1
     d9e:	4c c0       	rjmp	.+152    	; 0xe38 <udc_process_setup+0x50c>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     da0:	80 91 eb 22 	lds	r24, 0x22EB
     da4:	8f 71       	andi	r24, 0x1F	; 31
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	d9 f5       	brne	.+118    	; 0xe20 <udc_process_setup+0x4f4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     daa:	80 91 ae 21 	lds	r24, 0x21AE
     dae:	88 23       	and	r24, r24
     db0:	89 f1       	breq	.+98     	; 0xe14 <udc_process_setup+0x4e8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     db2:	e0 91 ac 21 	lds	r30, 0x21AC
     db6:	f0 91 ad 21 	lds	r31, 0x21AD
     dba:	a0 81       	ld	r26, Z
     dbc:	b1 81       	ldd	r27, Z+1	; 0x01
     dbe:	14 96       	adiw	r26, 0x04	; 4
     dc0:	8c 91       	ld	r24, X
     dc2:	88 23       	and	r24, r24
     dc4:	49 f1       	breq	.+82     	; 0xe18 <udc_process_setup+0x4ec>
     dc6:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     dc8:	21 2f       	mov	r18, r17
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	22 0f       	add	r18, r18
     dce:	33 1f       	adc	r19, r19
     dd0:	02 80       	ldd	r0, Z+2	; 0x02
     dd2:	f3 81       	ldd	r31, Z+3	; 0x03
     dd4:	e0 2d       	mov	r30, r0
     dd6:	e2 0f       	add	r30, r18
     dd8:	f3 1f       	adc	r31, r19
     dda:	c0 81       	ld	r28, Z
     ddc:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     dde:	ee 81       	ldd	r30, Y+6	; 0x06
     de0:	ff 81       	ldd	r31, Y+7	; 0x07
     de2:	09 95       	icall
     de4:	68 2f       	mov	r22, r24
     de6:	81 2f       	mov	r24, r17
     de8:	9e dc       	rcall	.-1732   	; 0x726 <udc_update_iface_desc>
     dea:	08 2f       	mov	r16, r24
     dec:	88 23       	and	r24, r24
     dee:	21 f1       	breq	.+72     	; 0xe38 <udc_process_setup+0x50c>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     df0:	ec 81       	ldd	r30, Y+4	; 0x04
     df2:	fd 81       	ldd	r31, Y+5	; 0x05
     df4:	09 95       	icall
     df6:	08 2f       	mov	r16, r24
     df8:	81 11       	cpse	r24, r1
     dfa:	1e c0       	rjmp	.+60     	; 0xe38 <udc_process_setup+0x50c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     dfc:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     dfe:	e0 91 ac 21 	lds	r30, 0x21AC
     e02:	f0 91 ad 21 	lds	r31, 0x21AD
     e06:	a0 81       	ld	r26, Z
     e08:	b1 81       	ldd	r27, Z+1	; 0x01
     e0a:	14 96       	adiw	r26, 0x04	; 4
     e0c:	8c 91       	ld	r24, X
     e0e:	18 17       	cp	r17, r24
     e10:	d8 f2       	brcs	.-74     	; 0xdc8 <udc_process_setup+0x49c>
     e12:	12 c0       	rjmp	.+36     	; 0xe38 <udc_process_setup+0x50c>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     e14:	00 e0       	ldi	r16, 0x00	; 0
     e16:	10 c0       	rjmp	.+32     	; 0xe38 <udc_process_setup+0x50c>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     e18:	00 e0       	ldi	r16, 0x00	; 0
     e1a:	0e c0       	rjmp	.+28     	; 0xe38 <udc_process_setup+0x50c>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
     e1c:	00 e0       	ldi	r16, 0x00	; 0
     e1e:	0c c0       	rjmp	.+24     	; 0xe38 <udc_process_setup+0x50c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     e20:	00 e0       	ldi	r16, 0x00	; 0
     e22:	0a c0       	rjmp	.+20     	; 0xe38 <udc_process_setup+0x50c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     e24:	82 2f       	mov	r24, r18
     e26:	80 76       	andi	r24, 0x60	; 96
     e28:	09 f0       	breq	.+2      	; 0xe2c <udc_process_setup+0x500>
     e2a:	7d cf       	rjmp	.-262    	; 0xd26 <udc_process_setup+0x3fa>
     e2c:	88 ce       	rjmp	.-752    	; 0xb3e <udc_process_setup+0x212>
     e2e:	32 2f       	mov	r19, r18
     e30:	30 76       	andi	r19, 0x60	; 96
     e32:	09 f0       	breq	.+2      	; 0xe36 <udc_process_setup+0x50a>
     e34:	78 cf       	rjmp	.-272    	; 0xd26 <udc_process_setup+0x3fa>
     e36:	99 cd       	rjmp	.-1230   	; 0x96a <udc_process_setup+0x3e>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     e38:	80 2f       	mov	r24, r16
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	08 95       	ret

00000e48 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     e48:	1f 92       	push	r1
     e4a:	0f 92       	push	r0
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	0f 92       	push	r0
     e50:	11 24       	eor	r1, r1
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	ef 93       	push	r30
     e58:	ff 93       	push	r31
	rtc_data.counter_high++;
     e5a:	e3 ee       	ldi	r30, 0xE3	; 227
     e5c:	f2 e2       	ldi	r31, 0x22	; 34
     e5e:	80 81       	ld	r24, Z
     e60:	91 81       	ldd	r25, Z+1	; 0x01
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	80 83       	st	Z, r24
     e66:	91 83       	std	Z+1, r25	; 0x01
}
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	9f 91       	pop	r25
     e6e:	8f 91       	pop	r24
     e70:	0f 90       	pop	r0
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	0f 90       	pop	r0
     e76:	1f 90       	pop	r1
     e78:	18 95       	reti

00000e7a <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     e7a:	1f 92       	push	r1
     e7c:	0f 92       	push	r0
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	0f 92       	push	r0
     e82:	11 24       	eor	r1, r1
     e84:	cf 92       	push	r12
     e86:	df 92       	push	r13
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	2f 93       	push	r18
     e92:	3f 93       	push	r19
     e94:	4f 93       	push	r20
     e96:	5f 93       	push	r21
     e98:	6f 93       	push	r22
     e9a:	7f 93       	push	r23
     e9c:	8f 93       	push	r24
     e9e:	9f 93       	push	r25
     ea0:	af 93       	push	r26
     ea2:	bf 93       	push	r27
     ea4:	ef 93       	push	r30
     ea6:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     ea8:	40 91 e3 22 	lds	r20, 0x22E3
     eac:	50 91 e4 22 	lds	r21, 0x22E4
     eb0:	80 91 e5 22 	lds	r24, 0x22E5
     eb4:	90 91 e6 22 	lds	r25, 0x22E6
     eb8:	48 17       	cp	r20, r24
     eba:	59 07       	cpc	r21, r25
     ebc:	f0 f1       	brcs	.+124    	; 0xf3a <__vector_11+0xc0>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	e0 e0       	ldi	r30, 0x00	; 0
     ec2:	f4 e0       	ldi	r31, 0x04	; 4
     ec4:	82 83       	std	Z+2, r24	; 0x02
		if (rtc_data.callback) {
     ec6:	e0 91 e9 22 	lds	r30, 0x22E9
     eca:	f0 91 ea 22 	lds	r31, 0x22EA
     ece:	30 97       	sbiw	r30, 0x00	; 0
     ed0:	a1 f1       	breq	.+104    	; 0xf3a <__vector_11+0xc0>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     ed2:	a0 e0       	ldi	r26, 0x00	; 0
     ed4:	b4 e0       	ldi	r27, 0x04	; 4
     ed6:	18 96       	adiw	r26, 0x08	; 8
     ed8:	8d 91       	ld	r24, X+
     eda:	9c 91       	ld	r25, X
     edc:	19 97       	sbiw	r26, 0x09	; 9
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	ba 01       	movw	r22, r20
     ee4:	55 27       	eor	r21, r21
     ee6:	44 27       	eor	r20, r20
					| RTC.CNT;
     ee8:	a0 e0       	ldi	r26, 0x00	; 0
     eea:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     eec:	8a 01       	movw	r16, r20
     eee:	9b 01       	movw	r18, r22
     ef0:	08 2b       	or	r16, r24
     ef2:	19 2b       	or	r17, r25
     ef4:	2a 2b       	or	r18, r26
     ef6:	3b 2b       	or	r19, r27
     ef8:	c9 01       	movw	r24, r18
     efa:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     efc:	00 91 e5 22 	lds	r16, 0x22E5
     f00:	10 91 e6 22 	lds	r17, 0x22E6
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	98 01       	movw	r18, r16
     f0a:	11 27       	eor	r17, r17
     f0c:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     f0e:	c0 90 e7 22 	lds	r12, 0x22E7
     f12:	d0 90 e8 22 	lds	r13, 0x22E8
     f16:	e1 2c       	mov	r14, r1
     f18:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     f1a:	0c 29       	or	r16, r12
     f1c:	1d 29       	or	r17, r13
     f1e:	2e 29       	or	r18, r14
     f20:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     f22:	06 17       	cp	r16, r22
     f24:	17 07       	cpc	r17, r23
     f26:	28 07       	cpc	r18, r24
     f28:	39 07       	cpc	r19, r25
     f2a:	30 f0       	brcs	.+12     	; 0xf38 <__vector_11+0xbe>
				count = alarm + 1;
     f2c:	c9 01       	movw	r24, r18
     f2e:	b8 01       	movw	r22, r16
     f30:	6f 5f       	subi	r22, 0xFF	; 255
     f32:	7f 4f       	sbci	r23, 0xFF	; 255
     f34:	8f 4f       	sbci	r24, 0xFF	; 255
     f36:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     f38:	09 95       	icall
		}
	}
}
     f3a:	ff 91       	pop	r31
     f3c:	ef 91       	pop	r30
     f3e:	bf 91       	pop	r27
     f40:	af 91       	pop	r26
     f42:	9f 91       	pop	r25
     f44:	8f 91       	pop	r24
     f46:	7f 91       	pop	r23
     f48:	6f 91       	pop	r22
     f4a:	5f 91       	pop	r21
     f4c:	4f 91       	pop	r20
     f4e:	3f 91       	pop	r19
     f50:	2f 91       	pop	r18
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	df 90       	pop	r13
     f5c:	cf 90       	pop	r12
     f5e:	0f 90       	pop	r0
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	0f 90       	pop	r0
     f64:	1f 90       	pop	r1
     f66:	18 95       	reti

00000f68 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
     f68:	81 11       	cpse	r24, r1
     f6a:	18 c0       	rjmp	.+48     	; 0xf9c <udd_sleep_mode+0x34>
     f6c:	90 91 dc 22 	lds	r25, 0x22DC
     f70:	99 23       	and	r25, r25
     f72:	89 f0       	breq	.+34     	; 0xf96 <udd_sleep_mode+0x2e>
     f74:	9f b7       	in	r25, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	ee ed       	ldi	r30, 0xDE	; 222
     f7a:	f2 e2       	ldi	r31, 0x22	; 34
     f7c:	20 81       	ld	r18, Z
     f7e:	21 50       	subi	r18, 0x01	; 1
     f80:	20 83       	st	Z, r18
     f82:	9f bf       	out	0x3f, r25	; 63
     f84:	08 c0       	rjmp	.+16     	; 0xf96 <udd_sleep_mode+0x2e>
     f86:	9f b7       	in	r25, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	ee ed       	ldi	r30, 0xDE	; 222
     f8c:	f2 e2       	ldi	r31, 0x22	; 34
     f8e:	20 81       	ld	r18, Z
     f90:	2f 5f       	subi	r18, 0xFF	; 255
     f92:	20 83       	st	Z, r18
     f94:	9f bf       	out	0x3f, r25	; 63
     f96:	80 93 dc 22 	sts	0x22DC, r24
     f9a:	08 95       	ret
     f9c:	90 91 dc 22 	lds	r25, 0x22DC
     fa0:	99 23       	and	r25, r25
     fa2:	89 f3       	breq	.-30     	; 0xf86 <udd_sleep_mode+0x1e>
     fa4:	f8 cf       	rjmp	.-16     	; 0xf96 <udd_sleep_mode+0x2e>

00000fa6 <udd_ctrl_init>:
     fa6:	0f 93       	push	r16
     fa8:	e8 ec       	ldi	r30, 0xC8	; 200
     faa:	f4 e0       	ldi	r31, 0x04	; 4
     fac:	80 81       	ld	r24, Z
     fae:	8f 7d       	andi	r24, 0xDF	; 223
     fb0:	80 83       	st	Z, r24
     fb2:	80 81       	ld	r24, Z
     fb4:	8f 7d       	andi	r24, 0xDF	; 223
     fb6:	80 83       	st	Z, r24
     fb8:	e0 eb       	ldi	r30, 0xB0	; 176
     fba:	f2 e2       	ldi	r31, 0x22	; 34
     fbc:	02 e0       	ldi	r16, 0x02	; 2
     fbe:	05 93       	las	Z, r16
     fc0:	10 92 b2 22 	sts	0x22B2, r1
     fc4:	10 92 b3 22 	sts	0x22B3, r1
     fc8:	00 e2       	ldi	r16, 0x20	; 32
     fca:	06 93       	lac	Z, r16
     fcc:	00 e4       	ldi	r16, 0x40	; 64
     fce:	06 93       	lac	Z, r16
     fd0:	e8 ea       	ldi	r30, 0xA8	; 168
     fd2:	f2 e2       	ldi	r31, 0x22	; 34
     fd4:	00 e2       	ldi	r16, 0x20	; 32
     fd6:	06 93       	lac	Z, r16
     fd8:	00 e4       	ldi	r16, 0x40	; 64
     fda:	06 93       	lac	Z, r16
     fdc:	10 92 f7 22 	sts	0x22F7, r1
     fe0:	10 92 f8 22 	sts	0x22F8, r1
     fe4:	10 92 f9 22 	sts	0x22F9, r1
     fe8:	10 92 fa 22 	sts	0x22FA, r1
     fec:	10 92 f5 22 	sts	0x22F5, r1
     ff0:	10 92 f6 22 	sts	0x22F6, r1
     ff4:	10 92 9a 22 	sts	0x229A, r1
     ff8:	0f 91       	pop	r16
     ffa:	08 95       	ret

00000ffc <udd_ctrl_stall_data>:
     ffc:	0f 93       	push	r16
     ffe:	85 e0       	ldi	r24, 0x05	; 5
    1000:	80 93 9a 22 	sts	0x229A, r24
    1004:	e1 eb       	ldi	r30, 0xB1	; 177
    1006:	f2 e2       	ldi	r31, 0x22	; 34
    1008:	04 e0       	ldi	r16, 0x04	; 4
    100a:	05 93       	las	Z, r16
    100c:	e9 ea       	ldi	r30, 0xA9	; 169
    100e:	f2 e2       	ldi	r31, 0x22	; 34
    1010:	04 e0       	ldi	r16, 0x04	; 4
    1012:	05 93       	las	Z, r16
    1014:	0f 91       	pop	r16
    1016:	08 95       	ret

00001018 <udd_ctrl_send_zlp_in>:
    1018:	0f 93       	push	r16
    101a:	83 e0       	ldi	r24, 0x03	; 3
    101c:	80 93 9a 22 	sts	0x229A, r24
    1020:	10 92 b2 22 	sts	0x22B2, r1
    1024:	10 92 b3 22 	sts	0x22B3, r1
    1028:	e0 eb       	ldi	r30, 0xB0	; 176
    102a:	f2 e2       	ldi	r31, 0x22	; 34
    102c:	02 e0       	ldi	r16, 0x02	; 2
    102e:	06 93       	lac	Z, r16
    1030:	0f 91       	pop	r16
    1032:	08 95       	ret

00001034 <udd_ctrl_endofrequest>:
    1034:	e0 91 f7 22 	lds	r30, 0x22F7
    1038:	f0 91 f8 22 	lds	r31, 0x22F8
    103c:	30 97       	sbiw	r30, 0x00	; 0
    103e:	09 f0       	breq	.+2      	; 0x1042 <udd_ctrl_endofrequest+0xe>
    1040:	09 95       	icall
    1042:	08 95       	ret

00001044 <udd_ctrl_in_sent>:
    1044:	0f 93       	push	r16
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	80 91 9a 22 	lds	r24, 0x229A
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	19 f4       	brne	.+6      	; 0x1058 <udd_ctrl_in_sent+0x14>
    1052:	f0 df       	rcall	.-32     	; 0x1034 <udd_ctrl_endofrequest>
    1054:	a8 df       	rcall	.-176    	; 0xfa6 <udd_ctrl_init>
    1056:	60 c0       	rjmp	.+192    	; 0x1118 <udd_ctrl_in_sent+0xd4>
    1058:	80 91 96 22 	lds	r24, 0x2296
    105c:	90 91 97 22 	lds	r25, 0x2297
    1060:	c0 91 f5 22 	lds	r28, 0x22F5
    1064:	d0 91 f6 22 	lds	r29, 0x22F6
    1068:	c8 1b       	sub	r28, r24
    106a:	d9 0b       	sbc	r29, r25
    106c:	71 f5       	brne	.+92     	; 0x10ca <udd_ctrl_in_sent+0x86>
    106e:	20 91 98 22 	lds	r18, 0x2298
    1072:	30 91 99 22 	lds	r19, 0x2299
    1076:	82 0f       	add	r24, r18
    1078:	93 1f       	adc	r25, r19
    107a:	80 93 98 22 	sts	0x2298, r24
    107e:	90 93 99 22 	sts	0x2299, r25
    1082:	20 91 f1 22 	lds	r18, 0x22F1
    1086:	30 91 f2 22 	lds	r19, 0x22F2
    108a:	82 17       	cp	r24, r18
    108c:	93 07       	cpc	r25, r19
    108e:	21 f0       	breq	.+8      	; 0x1098 <udd_ctrl_in_sent+0x54>
    1090:	80 91 b1 21 	lds	r24, 0x21B1
    1094:	88 23       	and	r24, r24
    1096:	41 f0       	breq	.+16     	; 0x10a8 <udd_ctrl_in_sent+0x64>
    1098:	84 e0       	ldi	r24, 0x04	; 4
    109a:	80 93 9a 22 	sts	0x229A, r24
    109e:	e8 ea       	ldi	r30, 0xA8	; 168
    10a0:	f2 e2       	ldi	r31, 0x22	; 34
    10a2:	02 e0       	ldi	r16, 0x02	; 2
    10a4:	06 93       	lac	Z, r16
    10a6:	38 c0       	rjmp	.+112    	; 0x1118 <udd_ctrl_in_sent+0xd4>
    10a8:	e0 91 f9 22 	lds	r30, 0x22F9
    10ac:	f0 91 fa 22 	lds	r31, 0x22FA
    10b0:	30 97       	sbiw	r30, 0x00	; 0
    10b2:	99 f0       	breq	.+38     	; 0x10da <udd_ctrl_in_sent+0x96>
    10b4:	09 95       	icall
    10b6:	88 23       	and	r24, r24
    10b8:	81 f0       	breq	.+32     	; 0x10da <udd_ctrl_in_sent+0x96>
    10ba:	10 92 96 22 	sts	0x2296, r1
    10be:	10 92 97 22 	sts	0x2297, r1
    10c2:	c0 91 f5 22 	lds	r28, 0x22F5
    10c6:	d0 91 f6 22 	lds	r29, 0x22F6
    10ca:	c0 34       	cpi	r28, 0x40	; 64
    10cc:	d1 05       	cpc	r29, r1
    10ce:	28 f0       	brcs	.+10     	; 0x10da <udd_ctrl_in_sent+0x96>
    10d0:	10 92 b1 21 	sts	0x21B1, r1
    10d4:	c0 e4       	ldi	r28, 0x40	; 64
    10d6:	d0 e0       	ldi	r29, 0x00	; 0
    10d8:	03 c0       	rjmp	.+6      	; 0x10e0 <udd_ctrl_in_sent+0x9c>
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	80 93 b1 21 	sts	0x21B1, r24
    10e0:	c0 93 b2 22 	sts	0x22B2, r28
    10e4:	d0 93 b3 22 	sts	0x22B3, r29
    10e8:	80 91 96 22 	lds	r24, 0x2296
    10ec:	90 91 97 22 	lds	r25, 0x2297
    10f0:	20 91 f3 22 	lds	r18, 0x22F3
    10f4:	30 91 f4 22 	lds	r19, 0x22F4
    10f8:	28 0f       	add	r18, r24
    10fa:	39 1f       	adc	r19, r25
    10fc:	20 93 b4 22 	sts	0x22B4, r18
    1100:	30 93 b5 22 	sts	0x22B5, r19
    1104:	c8 0f       	add	r28, r24
    1106:	d9 1f       	adc	r29, r25
    1108:	c0 93 96 22 	sts	0x2296, r28
    110c:	d0 93 97 22 	sts	0x2297, r29
    1110:	e0 eb       	ldi	r30, 0xB0	; 176
    1112:	f2 e2       	ldi	r31, 0x22	; 34
    1114:	02 e0       	ldi	r16, 0x02	; 2
    1116:	06 93       	lac	Z, r16
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	0f 91       	pop	r16
    111e:	08 95       	ret

00001120 <udd_ep_get_size>:
    1120:	fc 01       	movw	r30, r24
    1122:	81 81       	ldd	r24, Z+1	; 0x01
    1124:	87 70       	andi	r24, 0x07	; 7
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	fc 01       	movw	r30, r24
    112a:	31 97       	sbiw	r30, 0x01	; 1
    112c:	e7 30       	cpi	r30, 0x07	; 7
    112e:	f1 05       	cpc	r31, r1
    1130:	18 f4       	brcc	.+6      	; 0x1138 <udd_ep_get_size+0x18>
    1132:	e2 50       	subi	r30, 0x02	; 2
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	82 c5       	rjmp	.+2820   	; 0x1c3c <__tablejump2__>
    1138:	88 e0       	ldi	r24, 0x08	; 8
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	08 95       	ret
    113e:	80 e2       	ldi	r24, 0x20	; 32
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	08 95       	ret
    1144:	80 e4       	ldi	r24, 0x40	; 64
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	08 95       	ret
    114a:	80 e8       	ldi	r24, 0x80	; 128
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	08 95       	ret
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	08 95       	ret
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	92 e0       	ldi	r25, 0x02	; 2
    115a:	08 95       	ret
    115c:	8f ef       	ldi	r24, 0xFF	; 255
    115e:	93 e0       	ldi	r25, 0x03	; 3
    1160:	08 95       	ret
    1162:	80 e1       	ldi	r24, 0x10	; 16
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	08 95       	ret

00001168 <udd_ep_get_job>:
    1168:	28 2f       	mov	r18, r24
    116a:	2f 70       	andi	r18, 0x0F	; 15
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	22 0f       	add	r18, r18
    1170:	33 1f       	adc	r19, r19
    1172:	99 27       	eor	r25, r25
    1174:	87 fd       	sbrc	r24, 7
    1176:	90 95       	com	r25
    1178:	88 27       	eor	r24, r24
    117a:	99 0f       	add	r25, r25
    117c:	88 1f       	adc	r24, r24
    117e:	99 27       	eor	r25, r25
    1180:	82 0f       	add	r24, r18
    1182:	93 1f       	adc	r25, r19
    1184:	02 97       	sbiw	r24, 0x02	; 2
    1186:	9c 01       	movw	r18, r24
    1188:	22 0f       	add	r18, r18
    118a:	33 1f       	adc	r19, r19
    118c:	22 0f       	add	r18, r18
    118e:	33 1f       	adc	r19, r19
    1190:	22 0f       	add	r18, r18
    1192:	33 1f       	adc	r19, r19
    1194:	82 0f       	add	r24, r18
    1196:	93 1f       	adc	r25, r19
    1198:	8e 5c       	subi	r24, 0xCE	; 206
    119a:	9d 4d       	sbci	r25, 0xDD	; 221
    119c:	08 95       	ret

0000119e <udd_ctrl_interrupt_tc_setup>:
    119e:	0f 93       	push	r16
    11a0:	cf 93       	push	r28
    11a2:	80 91 cc 04 	lds	r24, 0x04CC
    11a6:	80 ff       	sbrs	r24, 0
    11a8:	62 c0       	rjmp	.+196    	; 0x126e <udd_ctrl_interrupt_tc_setup+0xd0>
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	80 93 cc 04 	sts	0x04CC, r24
    11b0:	e8 ea       	ldi	r30, 0xA8	; 168
    11b2:	f2 e2       	ldi	r31, 0x22	; 34
    11b4:	00 e8       	ldi	r16, 0x80	; 128
    11b6:	06 93       	lac	Z, r16
    11b8:	e0 eb       	ldi	r30, 0xB0	; 176
    11ba:	f2 e2       	ldi	r31, 0x22	; 34
    11bc:	00 e8       	ldi	r16, 0x80	; 128
    11be:	06 93       	lac	Z, r16
    11c0:	80 93 ca 04 	sts	0x04CA, r24
    11c4:	e8 ea       	ldi	r30, 0xA8	; 168
    11c6:	f2 e2       	ldi	r31, 0x22	; 34
    11c8:	00 e1       	ldi	r16, 0x10	; 16
    11ca:	06 93       	lac	Z, r16
    11cc:	80 91 9a 22 	lds	r24, 0x229A
    11d0:	88 23       	and	r24, r24
    11d2:	29 f0       	breq	.+10     	; 0x11de <udd_ctrl_interrupt_tc_setup+0x40>
    11d4:	83 50       	subi	r24, 0x03	; 3
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	08 f4       	brcc	.+2      	; 0x11dc <udd_ctrl_interrupt_tc_setup+0x3e>
    11da:	2c df       	rcall	.-424    	; 0x1034 <udd_ctrl_endofrequest>
    11dc:	e4 de       	rcall	.-568    	; 0xfa6 <udd_ctrl_init>
    11de:	80 91 aa 22 	lds	r24, 0x22AA
    11e2:	90 91 ab 22 	lds	r25, 0x22AB
    11e6:	08 97       	sbiw	r24, 0x08	; 8
    11e8:	09 f0       	breq	.+2      	; 0x11ec <udd_ctrl_interrupt_tc_setup+0x4e>
    11ea:	43 c0       	rjmp	.+134    	; 0x1272 <udd_ctrl_interrupt_tc_setup+0xd4>
    11ec:	88 e0       	ldi	r24, 0x08	; 8
    11ee:	e6 e5       	ldi	r30, 0x56	; 86
    11f0:	f2 e2       	ldi	r31, 0x22	; 34
    11f2:	ab ee       	ldi	r26, 0xEB	; 235
    11f4:	b2 e2       	ldi	r27, 0x22	; 34
    11f6:	01 90       	ld	r0, Z+
    11f8:	0d 92       	st	X+, r0
    11fa:	8a 95       	dec	r24
    11fc:	e1 f7       	brne	.-8      	; 0x11f6 <udd_ctrl_interrupt_tc_setup+0x58>
    11fe:	e8 ec       	ldi	r30, 0xC8	; 200
    1200:	f4 e0       	ldi	r31, 0x04	; 4
    1202:	80 81       	ld	r24, Z
    1204:	80 62       	ori	r24, 0x20	; 32
    1206:	80 83       	st	Z, r24
    1208:	80 81       	ld	r24, Z
    120a:	80 62       	ori	r24, 0x20	; 32
    120c:	80 83       	st	Z, r24
    120e:	8e db       	rcall	.-2276   	; 0x92c <udc_process_setup>
    1210:	c8 2f       	mov	r28, r24
    1212:	81 11       	cpse	r24, r1
    1214:	03 c0       	rjmp	.+6      	; 0x121c <udd_ctrl_interrupt_tc_setup+0x7e>
    1216:	f2 de       	rcall	.-540    	; 0xffc <udd_ctrl_stall_data>
    1218:	c1 e0       	ldi	r28, 0x01	; 1
    121a:	2c c0       	rjmp	.+88     	; 0x1274 <udd_ctrl_interrupt_tc_setup+0xd6>
    121c:	80 91 eb 22 	lds	r24, 0x22EB
    1220:	88 23       	and	r24, r24
    1222:	6c f4       	brge	.+26     	; 0x123e <udd_ctrl_interrupt_tc_setup+0xa0>
    1224:	10 92 98 22 	sts	0x2298, r1
    1228:	10 92 99 22 	sts	0x2299, r1
    122c:	10 92 96 22 	sts	0x2296, r1
    1230:	10 92 97 22 	sts	0x2297, r1
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	80 93 9a 22 	sts	0x229A, r24
    123a:	04 df       	rcall	.-504    	; 0x1044 <udd_ctrl_in_sent>
    123c:	1b c0       	rjmp	.+54     	; 0x1274 <udd_ctrl_interrupt_tc_setup+0xd6>
    123e:	20 91 f1 22 	lds	r18, 0x22F1
    1242:	30 91 f2 22 	lds	r19, 0x22F2
    1246:	23 2b       	or	r18, r19
    1248:	11 f4       	brne	.+4      	; 0x124e <udd_ctrl_interrupt_tc_setup+0xb0>
    124a:	e6 de       	rcall	.-564    	; 0x1018 <udd_ctrl_send_zlp_in>
    124c:	13 c0       	rjmp	.+38     	; 0x1274 <udd_ctrl_interrupt_tc_setup+0xd6>
    124e:	10 92 98 22 	sts	0x2298, r1
    1252:	10 92 99 22 	sts	0x2299, r1
    1256:	10 92 96 22 	sts	0x2296, r1
    125a:	10 92 97 22 	sts	0x2297, r1
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	80 93 9a 22 	sts	0x229A, r24
    1264:	e8 ea       	ldi	r30, 0xA8	; 168
    1266:	f2 e2       	ldi	r31, 0x22	; 34
    1268:	02 e0       	ldi	r16, 0x02	; 2
    126a:	06 93       	lac	Z, r16
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <udd_ctrl_interrupt_tc_setup+0xd6>
    126e:	c0 e0       	ldi	r28, 0x00	; 0
    1270:	01 c0       	rjmp	.+2      	; 0x1274 <udd_ctrl_interrupt_tc_setup+0xd6>
    1272:	c1 e0       	ldi	r28, 0x01	; 1
    1274:	8c 2f       	mov	r24, r28
    1276:	cf 91       	pop	r28
    1278:	0f 91       	pop	r16
    127a:	08 95       	ret

0000127c <udd_ep_trans_complet>:
    127c:	bf 92       	push	r11
    127e:	cf 92       	push	r12
    1280:	df 92       	push	r13
    1282:	ef 92       	push	r14
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	b8 2e       	mov	r11, r24
    1290:	6b df       	rcall	.-298    	; 0x1168 <udd_ep_get_job>
    1292:	ec 01       	movw	r28, r24
    1294:	1b 2d       	mov	r17, r11
    1296:	11 1f       	adc	r17, r17
    1298:	11 27       	eor	r17, r17
    129a:	11 1f       	adc	r17, r17
    129c:	8b 2d       	mov	r24, r11
    129e:	8f 70       	andi	r24, 0x0F	; 15
    12a0:	e8 2e       	mov	r14, r24
    12a2:	f1 2c       	mov	r15, r1
    12a4:	ee 0c       	add	r14, r14
    12a6:	ff 1c       	adc	r15, r15
    12a8:	e1 0e       	add	r14, r17
    12aa:	f1 1c       	adc	r15, r1
    12ac:	c7 01       	movw	r24, r14
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	9c 01       	movw	r18, r24
    12bc:	28 55       	subi	r18, 0x58	; 88
    12be:	3d 4d       	sbci	r19, 0xDD	; 221
    12c0:	79 01       	movw	r14, r18
    12c2:	c9 01       	movw	r24, r18
    12c4:	2d df       	rcall	.-422    	; 0x1120 <udd_ep_get_size>
    12c6:	6c 01       	movw	r12, r24
    12c8:	11 23       	and	r17, r17
    12ca:	09 f4       	brne	.+2      	; 0x12ce <udd_ep_trans_complet+0x52>
    12cc:	59 c0       	rjmp	.+178    	; 0x1380 <udd_ep_trans_complet+0x104>
    12ce:	d7 01       	movw	r26, r14
    12d0:	16 96       	adiw	r26, 0x06	; 6
    12d2:	2d 91       	ld	r18, X+
    12d4:	3c 91       	ld	r19, X
    12d6:	17 97       	sbiw	r26, 0x07	; 7
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	9e 81       	ldd	r25, Y+6	; 0x06
    12dc:	28 0f       	add	r18, r24
    12de:	39 1f       	adc	r19, r25
    12e0:	2d 83       	std	Y+5, r18	; 0x05
    12e2:	3e 83       	std	Y+6, r19	; 0x06
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	28 17       	cp	r18, r24
    12ea:	39 07       	cpc	r19, r25
    12ec:	b9 f1       	breq	.+110    	; 0x135c <udd_ep_trans_complet+0xe0>
    12ee:	fc 01       	movw	r30, r24
    12f0:	e2 1b       	sub	r30, r18
    12f2:	f3 0b       	sbc	r31, r19
    12f4:	9f 01       	movw	r18, r30
    12f6:	21 15       	cp	r18, r1
    12f8:	f4 e0       	ldi	r31, 0x04	; 4
    12fa:	3f 07       	cpc	r19, r31
    12fc:	38 f0       	brcs	.+14     	; 0x130c <udd_ep_trans_complet+0x90>
    12fe:	2f ef       	ldi	r18, 0xFF	; 255
    1300:	33 e0       	ldi	r19, 0x03	; 3
    1302:	c9 01       	movw	r24, r18
    1304:	b6 01       	movw	r22, r12
    1306:	86 d4       	rcall	.+2316   	; 0x1c14 <__udivmodhi4>
    1308:	28 1b       	sub	r18, r24
    130a:	39 0b       	sbc	r19, r25
    130c:	88 81       	ld	r24, Y
    130e:	81 ff       	sbrs	r24, 1
    1310:	09 c0       	rjmp	.+18     	; 0x1324 <udd_ep_trans_complet+0xa8>
    1312:	c9 01       	movw	r24, r18
    1314:	b6 01       	movw	r22, r12
    1316:	7e d4       	rcall	.+2300   	; 0x1c14 <__udivmodhi4>
    1318:	41 e0       	ldi	r20, 0x01	; 1
    131a:	89 2b       	or	r24, r25
    131c:	09 f0       	breq	.+2      	; 0x1320 <udd_ep_trans_complet+0xa4>
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	94 2f       	mov	r25, r20
    1322:	01 c0       	rjmp	.+2      	; 0x1326 <udd_ep_trans_complet+0xaa>
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	88 81       	ld	r24, Y
    1328:	90 fb       	bst	r25, 0
    132a:	81 f9       	bld	r24, 1
    132c:	88 83       	st	Y, r24
    132e:	d7 01       	movw	r26, r14
    1330:	16 96       	adiw	r26, 0x06	; 6
    1332:	1d 92       	st	X+, r1
    1334:	1c 92       	st	X, r1
    1336:	17 97       	sbiw	r26, 0x07	; 7
    1338:	12 96       	adiw	r26, 0x02	; 2
    133a:	2d 93       	st	X+, r18
    133c:	3c 93       	st	X, r19
    133e:	13 97       	sbiw	r26, 0x03	; 3
    1340:	29 81       	ldd	r18, Y+1	; 0x01
    1342:	3a 81       	ldd	r19, Y+2	; 0x02
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	82 0f       	add	r24, r18
    134a:	93 1f       	adc	r25, r19
    134c:	14 96       	adiw	r26, 0x04	; 4
    134e:	8d 93       	st	X+, r24
    1350:	9c 93       	st	X, r25
    1352:	15 97       	sbiw	r26, 0x05	; 5
    1354:	f7 01       	movw	r30, r14
    1356:	02 e0       	ldi	r16, 0x02	; 2
    1358:	06 93       	lac	Z, r16
    135a:	94 c0       	rjmp	.+296    	; 0x1484 <udd_ep_trans_complet+0x208>
    135c:	88 81       	ld	r24, Y
    135e:	81 ff       	sbrs	r24, 1
    1360:	83 c0       	rjmp	.+262    	; 0x1468 <udd_ep_trans_complet+0x1ec>
    1362:	8d 7f       	andi	r24, 0xFD	; 253
    1364:	88 83       	st	Y, r24
    1366:	d7 01       	movw	r26, r14
    1368:	16 96       	adiw	r26, 0x06	; 6
    136a:	1d 92       	st	X+, r1
    136c:	1c 92       	st	X, r1
    136e:	17 97       	sbiw	r26, 0x07	; 7
    1370:	12 96       	adiw	r26, 0x02	; 2
    1372:	1d 92       	st	X+, r1
    1374:	1c 92       	st	X, r1
    1376:	13 97       	sbiw	r26, 0x03	; 3
    1378:	f7 01       	movw	r30, r14
    137a:	02 e0       	ldi	r16, 0x02	; 2
    137c:	06 93       	lac	Z, r16
    137e:	82 c0       	rjmp	.+260    	; 0x1484 <udd_ep_trans_complet+0x208>
    1380:	d7 01       	movw	r26, r14
    1382:	12 96       	adiw	r26, 0x02	; 2
    1384:	0d 91       	ld	r16, X+
    1386:	1c 91       	ld	r17, X
    1388:	13 97       	sbiw	r26, 0x03	; 3
    138a:	88 81       	ld	r24, Y
    138c:	82 ff       	sbrs	r24, 2
    138e:	13 c0       	rjmp	.+38     	; 0x13b6 <udd_ep_trans_complet+0x13a>
    1390:	e9 81       	ldd	r30, Y+1	; 0x01
    1392:	fa 81       	ldd	r31, Y+2	; 0x02
    1394:	2d 81       	ldd	r18, Y+5	; 0x05
    1396:	3e 81       	ldd	r19, Y+6	; 0x06
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	b6 01       	movw	r22, r12
    139e:	3a d4       	rcall	.+2164   	; 0x1c14 <__udivmodhi4>
    13a0:	b0 e4       	ldi	r27, 0x40	; 64
    13a2:	bb 9e       	mul	r11, r27
    13a4:	b0 01       	movw	r22, r0
    13a6:	11 24       	eor	r1, r1
    13a8:	6e 58       	subi	r22, 0x8E	; 142
    13aa:	7e 4d       	sbci	r23, 0xDE	; 222
    13ac:	ac 01       	movw	r20, r24
    13ae:	cf 01       	movw	r24, r30
    13b0:	82 0f       	add	r24, r18
    13b2:	93 1f       	adc	r25, r19
    13b4:	49 d4       	rcall	.+2194   	; 0x1c48 <memcpy>
    13b6:	2d 81       	ldd	r18, Y+5	; 0x05
    13b8:	3e 81       	ldd	r19, Y+6	; 0x06
    13ba:	20 0f       	add	r18, r16
    13bc:	31 1f       	adc	r19, r17
    13be:	2d 83       	std	Y+5, r18	; 0x05
    13c0:	3e 83       	std	Y+6, r19	; 0x06
    13c2:	eb 81       	ldd	r30, Y+3	; 0x03
    13c4:	fc 81       	ldd	r31, Y+4	; 0x04
    13c6:	e2 17       	cp	r30, r18
    13c8:	f3 07       	cpc	r31, r19
    13ca:	10 f4       	brcc	.+4      	; 0x13d0 <udd_ep_trans_complet+0x154>
    13cc:	ed 83       	std	Y+5, r30	; 0x05
    13ce:	fe 83       	std	Y+6, r31	; 0x06
    13d0:	d7 01       	movw	r26, r14
    13d2:	16 96       	adiw	r26, 0x06	; 6
    13d4:	8d 91       	ld	r24, X+
    13d6:	9c 91       	ld	r25, X
    13d8:	17 97       	sbiw	r26, 0x07	; 7
    13da:	80 17       	cp	r24, r16
    13dc:	91 07       	cpc	r25, r17
    13de:	09 f0       	breq	.+2      	; 0x13e2 <udd_ep_trans_complet+0x166>
    13e0:	43 c0       	rjmp	.+134    	; 0x1468 <udd_ep_trans_complet+0x1ec>
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	e8 17       	cp	r30, r24
    13e8:	f9 07       	cpc	r31, r25
    13ea:	09 f4       	brne	.+2      	; 0x13ee <udd_ep_trans_complet+0x172>
    13ec:	3d c0       	rjmp	.+122    	; 0x1468 <udd_ep_trans_complet+0x1ec>
    13ee:	e8 1b       	sub	r30, r24
    13f0:	f9 0b       	sbc	r31, r25
    13f2:	e1 15       	cp	r30, r1
    13f4:	b4 e0       	ldi	r27, 0x04	; 4
    13f6:	fb 07       	cpc	r31, r27
    13f8:	40 f0       	brcs	.+16     	; 0x140a <udd_ep_trans_complet+0x18e>
    13fa:	ef ef       	ldi	r30, 0xFF	; 255
    13fc:	f3 e0       	ldi	r31, 0x03	; 3
    13fe:	cf 01       	movw	r24, r30
    1400:	b6 01       	movw	r22, r12
    1402:	08 d4       	rcall	.+2064   	; 0x1c14 <__udivmodhi4>
    1404:	e8 1b       	sub	r30, r24
    1406:	f9 0b       	sbc	r31, r25
    1408:	05 c0       	rjmp	.+10     	; 0x1414 <udd_ep_trans_complet+0x198>
    140a:	cf 01       	movw	r24, r30
    140c:	b6 01       	movw	r22, r12
    140e:	02 d4       	rcall	.+2052   	; 0x1c14 <__udivmodhi4>
    1410:	e8 1b       	sub	r30, r24
    1412:	f9 0b       	sbc	r31, r25
    1414:	d7 01       	movw	r26, r14
    1416:	12 96       	adiw	r26, 0x02	; 2
    1418:	1d 92       	st	X+, r1
    141a:	1c 92       	st	X, r1
    141c:	13 97       	sbiw	r26, 0x03	; 3
    141e:	ec 15       	cp	r30, r12
    1420:	fd 05       	cpc	r31, r13
    1422:	78 f4       	brcc	.+30     	; 0x1442 <udd_ep_trans_complet+0x1c6>
    1424:	88 81       	ld	r24, Y
    1426:	84 60       	ori	r24, 0x04	; 4
    1428:	88 83       	st	Y, r24
    142a:	b0 e4       	ldi	r27, 0x40	; 64
    142c:	bb 9e       	mul	r11, r27
    142e:	c0 01       	movw	r24, r0
    1430:	11 24       	eor	r1, r1
    1432:	8e 58       	subi	r24, 0x8E	; 142
    1434:	9e 4d       	sbci	r25, 0xDE	; 222
    1436:	f7 01       	movw	r30, r14
    1438:	84 83       	std	Z+4, r24	; 0x04
    143a:	95 83       	std	Z+5, r25	; 0x05
    143c:	c6 82       	std	Z+6, r12	; 0x06
    143e:	d7 82       	std	Z+7, r13	; 0x07
    1440:	0f c0       	rjmp	.+30     	; 0x1460 <udd_ep_trans_complet+0x1e4>
    1442:	29 81       	ldd	r18, Y+1	; 0x01
    1444:	3a 81       	ldd	r19, Y+2	; 0x02
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	82 0f       	add	r24, r18
    144c:	93 1f       	adc	r25, r19
    144e:	d7 01       	movw	r26, r14
    1450:	14 96       	adiw	r26, 0x04	; 4
    1452:	8d 93       	st	X+, r24
    1454:	9c 93       	st	X, r25
    1456:	15 97       	sbiw	r26, 0x05	; 5
    1458:	16 96       	adiw	r26, 0x06	; 6
    145a:	ed 93       	st	X+, r30
    145c:	fc 93       	st	X, r31
    145e:	17 97       	sbiw	r26, 0x07	; 7
    1460:	f7 01       	movw	r30, r14
    1462:	02 e0       	ldi	r16, 0x02	; 2
    1464:	06 93       	lac	Z, r16
    1466:	0e c0       	rjmp	.+28     	; 0x1484 <udd_ep_trans_complet+0x208>
    1468:	88 81       	ld	r24, Y
    146a:	80 ff       	sbrs	r24, 0
    146c:	0b c0       	rjmp	.+22     	; 0x1484 <udd_ep_trans_complet+0x208>
    146e:	8e 7f       	andi	r24, 0xFE	; 254
    1470:	88 83       	st	Y, r24
    1472:	ef 81       	ldd	r30, Y+7	; 0x07
    1474:	f8 85       	ldd	r31, Y+8	; 0x08
    1476:	30 97       	sbiw	r30, 0x00	; 0
    1478:	29 f0       	breq	.+10     	; 0x1484 <udd_ep_trans_complet+0x208>
    147a:	6d 81       	ldd	r22, Y+5	; 0x05
    147c:	7e 81       	ldd	r23, Y+6	; 0x06
    147e:	4b 2d       	mov	r20, r11
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	09 95       	icall
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	ff 90       	pop	r15
    148e:	ef 90       	pop	r14
    1490:	df 90       	pop	r13
    1492:	cf 90       	pop	r12
    1494:	bf 90       	pop	r11
    1496:	08 95       	ret

00001498 <udd_is_high_speed>:
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	08 95       	ret

0000149c <udd_set_address>:
    149c:	80 93 c3 04 	sts	0x04C3, r24
    14a0:	08 95       	ret

000014a2 <udd_getaddress>:
    14a2:	80 91 c3 04 	lds	r24, 0x04C3
    14a6:	08 95       	ret

000014a8 <udd_get_frame_number>:
    14a8:	80 91 d8 22 	lds	r24, 0x22D8
    14ac:	90 91 d9 22 	lds	r25, 0x22D9
    14b0:	08 95       	ret

000014b2 <udd_get_micro_frame_number>:
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	08 95       	ret

000014b8 <udd_set_setup_payload>:
    14b8:	80 93 f3 22 	sts	0x22F3, r24
    14bc:	90 93 f4 22 	sts	0x22F4, r25
    14c0:	60 93 f5 22 	sts	0x22F5, r22
    14c4:	70 93 f6 22 	sts	0x22F6, r23
    14c8:	08 95       	ret

000014ca <udd_ep_alloc>:
    14ca:	e8 2f       	mov	r30, r24
    14cc:	ef 70       	andi	r30, 0x0F	; 15
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	ee 0f       	add	r30, r30
    14d2:	ff 1f       	adc	r31, r31
    14d4:	99 27       	eor	r25, r25
    14d6:	87 fd       	sbrc	r24, 7
    14d8:	90 95       	com	r25
    14da:	88 27       	eor	r24, r24
    14dc:	99 0f       	add	r25, r25
    14de:	88 1f       	adc	r24, r24
    14e0:	99 27       	eor	r25, r25
    14e2:	e8 0f       	add	r30, r24
    14e4:	f9 1f       	adc	r31, r25
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	ee 0f       	add	r30, r30
    14ec:	ff 1f       	adc	r31, r31
    14ee:	ee 0f       	add	r30, r30
    14f0:	ff 1f       	adc	r31, r31
    14f2:	e8 55       	subi	r30, 0x58	; 88
    14f4:	fd 4d       	sbci	r31, 0xDD	; 221
    14f6:	81 81       	ldd	r24, Z+1	; 0x01
    14f8:	80 7c       	andi	r24, 0xC0	; 192
    14fa:	09 f0       	breq	.+2      	; 0x14fe <udd_ep_alloc+0x34>
    14fc:	43 c0       	rjmp	.+134    	; 0x1584 <udd_ep_alloc+0xba>
    14fe:	63 70       	andi	r22, 0x03	; 3
    1500:	61 30       	cpi	r22, 0x01	; 1
    1502:	29 f0       	breq	.+10     	; 0x150e <udd_ep_alloc+0x44>
    1504:	10 f4       	brcc	.+4      	; 0x150a <udd_ep_alloc+0x40>
    1506:	80 e4       	ldi	r24, 0x40	; 64
    1508:	03 c0       	rjmp	.+6      	; 0x1510 <udd_ep_alloc+0x46>
    150a:	80 e8       	ldi	r24, 0x80	; 128
    150c:	01 c0       	rjmp	.+2      	; 0x1510 <udd_ep_alloc+0x46>
    150e:	80 ec       	ldi	r24, 0xC0	; 192
    1510:	40 38       	cpi	r20, 0x80	; 128
    1512:	51 05       	cpc	r21, r1
    1514:	e1 f0       	breq	.+56     	; 0x154e <udd_ep_alloc+0x84>
    1516:	50 f4       	brcc	.+20     	; 0x152c <udd_ep_alloc+0x62>
    1518:	40 32       	cpi	r20, 0x20	; 32
    151a:	51 05       	cpc	r21, r1
    151c:	a1 f0       	breq	.+40     	; 0x1546 <udd_ep_alloc+0x7c>
    151e:	40 34       	cpi	r20, 0x40	; 64
    1520:	51 05       	cpc	r21, r1
    1522:	99 f0       	breq	.+38     	; 0x154a <udd_ep_alloc+0x80>
    1524:	40 31       	cpi	r20, 0x10	; 16
    1526:	51 05       	cpc	r21, r1
    1528:	61 f4       	brne	.+24     	; 0x1542 <udd_ep_alloc+0x78>
    152a:	19 c0       	rjmp	.+50     	; 0x155e <udd_ep_alloc+0x94>
    152c:	41 15       	cp	r20, r1
    152e:	92 e0       	ldi	r25, 0x02	; 2
    1530:	59 07       	cpc	r21, r25
    1532:	89 f0       	breq	.+34     	; 0x1556 <udd_ep_alloc+0x8c>
    1534:	4f 3f       	cpi	r20, 0xFF	; 255
    1536:	93 e0       	ldi	r25, 0x03	; 3
    1538:	59 07       	cpc	r21, r25
    153a:	79 f0       	breq	.+30     	; 0x155a <udd_ep_alloc+0x90>
    153c:	41 15       	cp	r20, r1
    153e:	51 40       	sbci	r21, 0x01	; 1
    1540:	41 f0       	breq	.+16     	; 0x1552 <udd_ep_alloc+0x88>
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	0d c0       	rjmp	.+26     	; 0x1560 <udd_ep_alloc+0x96>
    1546:	22 e0       	ldi	r18, 0x02	; 2
    1548:	0b c0       	rjmp	.+22     	; 0x1560 <udd_ep_alloc+0x96>
    154a:	23 e0       	ldi	r18, 0x03	; 3
    154c:	09 c0       	rjmp	.+18     	; 0x1560 <udd_ep_alloc+0x96>
    154e:	24 e0       	ldi	r18, 0x04	; 4
    1550:	07 c0       	rjmp	.+14     	; 0x1560 <udd_ep_alloc+0x96>
    1552:	25 e0       	ldi	r18, 0x05	; 5
    1554:	05 c0       	rjmp	.+10     	; 0x1560 <udd_ep_alloc+0x96>
    1556:	26 e0       	ldi	r18, 0x06	; 6
    1558:	03 c0       	rjmp	.+6      	; 0x1560 <udd_ep_alloc+0x96>
    155a:	27 e0       	ldi	r18, 0x07	; 7
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <udd_ep_alloc+0x96>
    155e:	21 e0       	ldi	r18, 0x01	; 1
    1560:	11 82       	std	Z+1, r1	; 0x01
    1562:	96 e0       	ldi	r25, 0x06	; 6
    1564:	90 83       	st	Z, r25
    1566:	82 2b       	or	r24, r18
    1568:	81 83       	std	Z+1, r24	; 0x01
    156a:	81 81       	ldd	r24, Z+1	; 0x01
    156c:	80 7c       	andi	r24, 0xC0	; 192
    156e:	80 3c       	cpi	r24, 0xC0	; 192
    1570:	21 f4       	brne	.+8      	; 0x157a <udd_ep_alloc+0xb0>
    1572:	81 81       	ldd	r24, Z+1	; 0x01
    1574:	87 70       	andi	r24, 0x07	; 7
    1576:	87 30       	cpi	r24, 0x07	; 7
    1578:	39 f0       	breq	.+14     	; 0x1588 <udd_ep_alloc+0xbe>
    157a:	81 81       	ldd	r24, Z+1	; 0x01
    157c:	80 62       	ori	r24, 0x20	; 32
    157e:	81 83       	std	Z+1, r24	; 0x01
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	08 95       	ret
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	08 95       	ret
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	08 95       	ret

0000158c <udd_ep_is_halted>:
    158c:	e8 2f       	mov	r30, r24
    158e:	ef 70       	andi	r30, 0x0F	; 15
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	ee 0f       	add	r30, r30
    1594:	ff 1f       	adc	r31, r31
    1596:	99 27       	eor	r25, r25
    1598:	87 fd       	sbrc	r24, 7
    159a:	90 95       	com	r25
    159c:	88 27       	eor	r24, r24
    159e:	99 0f       	add	r25, r25
    15a0:	88 1f       	adc	r24, r24
    15a2:	99 27       	eor	r25, r25
    15a4:	e8 0f       	add	r30, r24
    15a6:	f9 1f       	adc	r31, r25
    15a8:	ee 0f       	add	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	ee 0f       	add	r30, r30
    15ae:	ff 1f       	adc	r31, r31
    15b0:	ee 0f       	add	r30, r30
    15b2:	ff 1f       	adc	r31, r31
    15b4:	e8 55       	subi	r30, 0x58	; 88
    15b6:	fd 4d       	sbci	r31, 0xDD	; 221
    15b8:	81 81       	ldd	r24, Z+1	; 0x01
    15ba:	82 fb       	bst	r24, 2
    15bc:	88 27       	eor	r24, r24
    15be:	80 f9       	bld	r24, 0
    15c0:	08 95       	ret

000015c2 <udd_ep_clear_halt>:
    15c2:	e8 2f       	mov	r30, r24
    15c4:	ef 70       	andi	r30, 0x0F	; 15
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	ee 0f       	add	r30, r30
    15ca:	ff 1f       	adc	r31, r31
    15cc:	28 2f       	mov	r18, r24
    15ce:	33 27       	eor	r19, r19
    15d0:	27 fd       	sbrc	r18, 7
    15d2:	30 95       	com	r19
    15d4:	22 27       	eor	r18, r18
    15d6:	33 0f       	add	r19, r19
    15d8:	22 1f       	adc	r18, r18
    15da:	33 27       	eor	r19, r19
    15dc:	e2 0f       	add	r30, r18
    15de:	f3 1f       	adc	r31, r19
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	ee 0f       	add	r30, r30
    15e6:	ff 1f       	adc	r31, r31
    15e8:	ee 0f       	add	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	e8 55       	subi	r30, 0x58	; 88
    15ee:	fd 4d       	sbci	r31, 0xDD	; 221
    15f0:	91 81       	ldd	r25, Z+1	; 0x01
    15f2:	92 ff       	sbrs	r25, 2
    15f4:	0e c0       	rjmp	.+28     	; 0x1612 <udd_ep_clear_halt+0x50>
    15f6:	91 81       	ldd	r25, Z+1	; 0x01
    15f8:	9b 7f       	andi	r25, 0xFB	; 251
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	b5 dd       	rcall	.-1174   	; 0x1168 <udd_ep_get_job>
    15fe:	fc 01       	movw	r30, r24
    1600:	80 81       	ld	r24, Z
    1602:	80 ff       	sbrs	r24, 0
    1604:	06 c0       	rjmp	.+12     	; 0x1612 <udd_ep_clear_halt+0x50>
    1606:	8e 7f       	andi	r24, 0xFE	; 254
    1608:	80 83       	st	Z, r24
    160a:	07 80       	ldd	r0, Z+7	; 0x07
    160c:	f0 85       	ldd	r31, Z+8	; 0x08
    160e:	e0 2d       	mov	r30, r0
    1610:	09 95       	icall
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	08 95       	ret

00001616 <udd_ep_run>:
    1616:	7f 92       	push	r7
    1618:	8f 92       	push	r8
    161a:	9f 92       	push	r9
    161c:	af 92       	push	r10
    161e:	bf 92       	push	r11
    1620:	cf 92       	push	r12
    1622:	df 92       	push	r13
    1624:	ef 92       	push	r14
    1626:	ff 92       	push	r15
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	98 2e       	mov	r9, r24
    1632:	86 2e       	mov	r8, r22
    1634:	5a 01       	movw	r10, r20
    1636:	69 01       	movw	r12, r18
    1638:	97 dd       	rcall	.-1234   	; 0x1168 <udd_ep_get_job>
    163a:	7c 01       	movw	r14, r24
    163c:	79 2c       	mov	r7, r9
    163e:	77 1c       	adc	r7, r7
    1640:	77 24       	eor	r7, r7
    1642:	77 1c       	adc	r7, r7
    1644:	c9 2d       	mov	r28, r9
    1646:	cf 70       	andi	r28, 0x0F	; 15
    1648:	d0 e0       	ldi	r29, 0x00	; 0
    164a:	cc 0f       	add	r28, r28
    164c:	dd 1f       	adc	r29, r29
    164e:	c7 0d       	add	r28, r7
    1650:	d1 1d       	adc	r29, r1
    1652:	cc 0f       	add	r28, r28
    1654:	dd 1f       	adc	r29, r29
    1656:	cc 0f       	add	r28, r28
    1658:	dd 1f       	adc	r29, r29
    165a:	cc 0f       	add	r28, r28
    165c:	dd 1f       	adc	r29, r29
    165e:	c8 55       	subi	r28, 0x58	; 88
    1660:	dd 4d       	sbci	r29, 0xDD	; 221
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	80 7c       	andi	r24, 0xC0	; 192
    1666:	09 f4       	brne	.+2      	; 0x166a <udd_ep_run+0x54>
    1668:	4b c0       	rjmp	.+150    	; 0x1700 <udd_ep_run+0xea>
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	80 7c       	andi	r24, 0xC0	; 192
    166e:	80 3c       	cpi	r24, 0xC0	; 192
    1670:	19 f0       	breq	.+6      	; 0x1678 <udd_ep_run+0x62>
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	82 fd       	sbrc	r24, 2
    1676:	46 c0       	rjmp	.+140    	; 0x1704 <udd_ep_run+0xee>
    1678:	8f b7       	in	r24, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	f7 01       	movw	r30, r14
    167e:	90 81       	ld	r25, Z
    1680:	90 ff       	sbrs	r25, 0
    1682:	03 c0       	rjmp	.+6      	; 0x168a <udd_ep_run+0x74>
    1684:	8f bf       	out	0x3f, r24	; 63
    1686:	71 2c       	mov	r7, r1
    1688:	3e c0       	rjmp	.+124    	; 0x1706 <udd_ep_run+0xf0>
    168a:	f7 01       	movw	r30, r14
    168c:	90 81       	ld	r25, Z
    168e:	91 60       	ori	r25, 0x01	; 1
    1690:	90 83       	st	Z, r25
    1692:	8f bf       	out	0x3f, r24	; 63
    1694:	f7 01       	movw	r30, r14
    1696:	a1 82       	std	Z+1, r10	; 0x01
    1698:	b2 82       	std	Z+2, r11	; 0x02
    169a:	c3 82       	std	Z+3, r12	; 0x03
    169c:	d4 82       	std	Z+4, r13	; 0x04
    169e:	15 82       	std	Z+5, r1	; 0x05
    16a0:	16 82       	std	Z+6, r1	; 0x06
    16a2:	07 83       	std	Z+7, r16	; 0x07
    16a4:	10 87       	std	Z+8, r17	; 0x08
    16a6:	81 10       	cpse	r8, r1
    16a8:	06 c0       	rjmp	.+12     	; 0x16b6 <udd_ep_run+0xa0>
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	c1 14       	cp	r12, r1
    16ae:	d1 04       	cpc	r13, r1
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <udd_ep_run+0xa2>
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <udd_ep_run+0xa2>
    16b6:	91 e0       	ldi	r25, 0x01	; 1
    16b8:	f7 01       	movw	r30, r14
    16ba:	80 81       	ld	r24, Z
    16bc:	90 fb       	bst	r25, 0
    16be:	81 f9       	bld	r24, 1
    16c0:	8b 7f       	andi	r24, 0xFB	; 251
    16c2:	80 83       	st	Z, r24
    16c4:	77 20       	and	r7, r7
    16c6:	19 f0       	breq	.+6      	; 0x16ce <udd_ep_run+0xb8>
    16c8:	1e 82       	std	Y+6, r1	; 0x06
    16ca:	1f 82       	std	Y+7, r1	; 0x07
    16cc:	14 c0       	rjmp	.+40     	; 0x16f6 <udd_ep_run+0xe0>
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	80 7c       	andi	r24, 0xC0	; 192
    16d2:	80 3c       	cpi	r24, 0xC0	; 192
    16d4:	61 f4       	brne	.+24     	; 0x16ee <udd_ep_run+0xd8>
    16d6:	ce 01       	movw	r24, r28
    16d8:	23 dd       	rcall	.-1466   	; 0x1120 <udd_ep_get_size>
    16da:	bc 01       	movw	r22, r24
    16dc:	c6 01       	movw	r24, r12
    16de:	9a d2       	rcall	.+1332   	; 0x1c14 <__udivmodhi4>
    16e0:	89 2b       	or	r24, r25
    16e2:	29 f0       	breq	.+10     	; 0x16ee <udd_ep_run+0xd8>
    16e4:	f7 01       	movw	r30, r14
    16e6:	80 81       	ld	r24, Z
    16e8:	8e 7f       	andi	r24, 0xFE	; 254
    16ea:	80 83       	st	Z, r24
    16ec:	0c c0       	rjmp	.+24     	; 0x1706 <udd_ep_run+0xf0>
    16ee:	1a 82       	std	Y+2, r1	; 0x02
    16f0:	1b 82       	std	Y+3, r1	; 0x03
    16f2:	1e 82       	std	Y+6, r1	; 0x06
    16f4:	1f 82       	std	Y+7, r1	; 0x07
    16f6:	89 2d       	mov	r24, r9
    16f8:	c1 dd       	rcall	.-1150   	; 0x127c <udd_ep_trans_complet>
    16fa:	77 24       	eor	r7, r7
    16fc:	73 94       	inc	r7
    16fe:	03 c0       	rjmp	.+6      	; 0x1706 <udd_ep_run+0xf0>
    1700:	71 2c       	mov	r7, r1
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <udd_ep_run+0xf0>
    1704:	71 2c       	mov	r7, r1
    1706:	87 2d       	mov	r24, r7
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	ef 90       	pop	r14
    1714:	df 90       	pop	r13
    1716:	cf 90       	pop	r12
    1718:	bf 90       	pop	r11
    171a:	af 90       	pop	r10
    171c:	9f 90       	pop	r9
    171e:	8f 90       	pop	r8
    1720:	7f 90       	pop	r7
    1722:	08 95       	ret

00001724 <udd_ep_abort>:
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	18 2f       	mov	r17, r24
    1730:	f8 2e       	mov	r15, r24
    1732:	ff 1c       	adc	r15, r15
    1734:	ff 24       	eor	r15, r15
    1736:	ff 1c       	adc	r15, r15
    1738:	c8 2f       	mov	r28, r24
    173a:	cf 70       	andi	r28, 0x0F	; 15
    173c:	d0 e0       	ldi	r29, 0x00	; 0
    173e:	cc 0f       	add	r28, r28
    1740:	dd 1f       	adc	r29, r29
    1742:	cf 0d       	add	r28, r15
    1744:	d1 1d       	adc	r29, r1
    1746:	cc 0f       	add	r28, r28
    1748:	dd 1f       	adc	r29, r29
    174a:	cc 0f       	add	r28, r28
    174c:	dd 1f       	adc	r29, r29
    174e:	cc 0f       	add	r28, r28
    1750:	dd 1f       	adc	r29, r29
    1752:	c8 55       	subi	r28, 0x58	; 88
    1754:	dd 4d       	sbci	r29, 0xDD	; 221
    1756:	08 dd       	rcall	.-1520   	; 0x1168 <udd_ep_get_job>
    1758:	dc 01       	movw	r26, r24
    175a:	fe 01       	movw	r30, r28
    175c:	02 e0       	ldi	r16, 0x02	; 2
    175e:	05 93       	las	Z, r16
    1760:	8c 91       	ld	r24, X
    1762:	80 ff       	sbrs	r24, 0
    1764:	12 c0       	rjmp	.+36     	; 0x178a <udd_ep_abort+0x66>
    1766:	8e 7f       	andi	r24, 0xFE	; 254
    1768:	8c 93       	st	X, r24
    176a:	17 96       	adiw	r26, 0x07	; 7
    176c:	ed 91       	ld	r30, X+
    176e:	fc 91       	ld	r31, X
    1770:	18 97       	sbiw	r26, 0x08	; 8
    1772:	30 97       	sbiw	r30, 0x00	; 0
    1774:	51 f0       	breq	.+20     	; 0x178a <udd_ep_abort+0x66>
    1776:	ff 20       	and	r15, r15
    1778:	19 f0       	breq	.+6      	; 0x1780 <udd_ep_abort+0x5c>
    177a:	6e 81       	ldd	r22, Y+6	; 0x06
    177c:	7f 81       	ldd	r23, Y+7	; 0x07
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <udd_ep_abort+0x60>
    1780:	6a 81       	ldd	r22, Y+2	; 0x02
    1782:	7b 81       	ldd	r23, Y+3	; 0x03
    1784:	41 2f       	mov	r20, r17
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	09 95       	icall
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	ff 90       	pop	r15
    1794:	08 95       	ret

00001796 <udd_ep_free>:
    1796:	cf 93       	push	r28
    1798:	c8 2f       	mov	r28, r24
    179a:	c4 df       	rcall	.-120    	; 0x1724 <udd_ep_abort>
    179c:	ec 2f       	mov	r30, r28
    179e:	ef 70       	andi	r30, 0x0F	; 15
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	ee 0f       	add	r30, r30
    17a4:	ff 1f       	adc	r31, r31
    17a6:	8c 2f       	mov	r24, r28
    17a8:	99 27       	eor	r25, r25
    17aa:	87 fd       	sbrc	r24, 7
    17ac:	90 95       	com	r25
    17ae:	88 27       	eor	r24, r24
    17b0:	99 0f       	add	r25, r25
    17b2:	88 1f       	adc	r24, r24
    17b4:	99 27       	eor	r25, r25
    17b6:	e8 0f       	add	r30, r24
    17b8:	f9 1f       	adc	r31, r25
    17ba:	ee 0f       	add	r30, r30
    17bc:	ff 1f       	adc	r31, r31
    17be:	ee 0f       	add	r30, r30
    17c0:	ff 1f       	adc	r31, r31
    17c2:	ee 0f       	add	r30, r30
    17c4:	ff 1f       	adc	r31, r31
    17c6:	e8 55       	subi	r30, 0x58	; 88
    17c8:	fd 4d       	sbci	r31, 0xDD	; 221
    17ca:	11 82       	std	Z+1, r1	; 0x01
    17cc:	cf 91       	pop	r28
    17ce:	08 95       	ret

000017d0 <udd_ep_set_halt>:
    17d0:	0f 93       	push	r16
    17d2:	e8 2f       	mov	r30, r24
    17d4:	ef 70       	andi	r30, 0x0F	; 15
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	ee 0f       	add	r30, r30
    17da:	ff 1f       	adc	r31, r31
    17dc:	28 2f       	mov	r18, r24
    17de:	33 27       	eor	r19, r19
    17e0:	27 fd       	sbrc	r18, 7
    17e2:	30 95       	com	r19
    17e4:	22 27       	eor	r18, r18
    17e6:	33 0f       	add	r19, r19
    17e8:	22 1f       	adc	r18, r18
    17ea:	33 27       	eor	r19, r19
    17ec:	e2 0f       	add	r30, r18
    17ee:	f3 1f       	adc	r31, r19
    17f0:	ee 0f       	add	r30, r30
    17f2:	ff 1f       	adc	r31, r31
    17f4:	ee 0f       	add	r30, r30
    17f6:	ff 1f       	adc	r31, r31
    17f8:	ee 0f       	add	r30, r30
    17fa:	ff 1f       	adc	r31, r31
    17fc:	e8 55       	subi	r30, 0x58	; 88
    17fe:	fd 4d       	sbci	r31, 0xDD	; 221
    1800:	91 81       	ldd	r25, Z+1	; 0x01
    1802:	94 60       	ori	r25, 0x04	; 4
    1804:	91 83       	std	Z+1, r25	; 0x01
    1806:	01 e0       	ldi	r16, 0x01	; 1
    1808:	06 93       	lac	Z, r16
    180a:	8c df       	rcall	.-232    	; 0x1724 <udd_ep_abort>
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	0f 91       	pop	r16
    1810:	08 95       	ret

00001812 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1812:	1f 92       	push	r1
    1814:	0f 92       	push	r0
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	0f 92       	push	r0
    181a:	11 24       	eor	r1, r1
    181c:	0f 93       	push	r16
    181e:	2f 93       	push	r18
    1820:	3f 93       	push	r19
    1822:	4f 93       	push	r20
    1824:	5f 93       	push	r21
    1826:	6f 93       	push	r22
    1828:	7f 93       	push	r23
    182a:	8f 93       	push	r24
    182c:	9f 93       	push	r25
    182e:	af 93       	push	r26
    1830:	bf 93       	push	r27
    1832:	ef 93       	push	r30
    1834:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1836:	80 91 cb 04 	lds	r24, 0x04CB
    183a:	88 23       	and	r24, r24
    183c:	2c f4       	brge	.+10     	; 0x1848 <__vector_125+0x36>
		udd_ack_start_of_frame_event();
    183e:	80 e8       	ldi	r24, 0x80	; 128
    1840:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    1844:	44 d8       	rcall	.-3960   	; 0x8ce <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1846:	88 c0       	rjmp	.+272    	; 0x1958 <__vector_125+0x146>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1848:	80 91 cb 04 	lds	r24, 0x04CB
    184c:	82 ff       	sbrs	r24, 2
    184e:	20 c0       	rjmp	.+64     	; 0x1890 <__vector_125+0x7e>
		udd_ack_underflow_event();
    1850:	84 e0       	ldi	r24, 0x04	; 4
    1852:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    1856:	80 91 b0 22 	lds	r24, 0x22B0
    185a:	86 ff       	sbrs	r24, 6
    185c:	7d c0       	rjmp	.+250    	; 0x1958 <__vector_125+0x146>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    185e:	80 91 cc 04 	lds	r24, 0x04CC
    1862:	81 fd       	sbrc	r24, 1
    1864:	79 c0       	rjmp	.+242    	; 0x1958 <__vector_125+0x146>
    1866:	9b dc       	rcall	.-1738   	; 0x119e <udd_ctrl_interrupt_tc_setup>
    1868:	81 11       	cpse	r24, r1
    186a:	76 c0       	rjmp	.+236    	; 0x1958 <__vector_125+0x146>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    186c:	80 91 9a 22 	lds	r24, 0x229A
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	11 f4       	brne	.+4      	; 0x1878 <__vector_125+0x66>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1874:	d1 db       	rcall	.-2142   	; 0x1018 <udd_ctrl_send_zlp_in>
    1876:	70 c0       	rjmp	.+224    	; 0x1958 <__vector_125+0x146>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1878:	84 30       	cpi	r24, 0x04	; 4
    187a:	09 f0       	breq	.+2      	; 0x187e <__vector_125+0x6c>
    187c:	6d c0       	rjmp	.+218    	; 0x1958 <__vector_125+0x146>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    187e:	e1 eb       	ldi	r30, 0xB1	; 177
    1880:	f2 e2       	ldi	r31, 0x22	; 34
    1882:	04 e0       	ldi	r16, 0x04	; 4
    1884:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1886:	e9 ea       	ldi	r30, 0xA9	; 169
    1888:	f2 e2       	ldi	r31, 0x22	; 34
    188a:	04 e0       	ldi	r16, 0x04	; 4
    188c:	05 93       	las	Z, r16
    188e:	64 c0       	rjmp	.+200    	; 0x1958 <__vector_125+0x146>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1890:	80 91 cb 04 	lds	r24, 0x04CB
    1894:	81 ff       	sbrs	r24, 1
    1896:	5b c0       	rjmp	.+182    	; 0x194e <__vector_125+0x13c>
		udd_ack_overflow_event();
    1898:	82 e0       	ldi	r24, 0x02	; 2
    189a:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    189e:	80 91 a8 22 	lds	r24, 0x22A8
    18a2:	86 ff       	sbrs	r24, 6
    18a4:	59 c0       	rjmp	.+178    	; 0x1958 <__vector_125+0x146>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    18a6:	80 91 cc 04 	lds	r24, 0x04CC
    18aa:	81 fd       	sbrc	r24, 1
    18ac:	55 c0       	rjmp	.+170    	; 0x1958 <__vector_125+0x146>
    18ae:	77 dc       	rcall	.-1810   	; 0x119e <udd_ctrl_interrupt_tc_setup>
    18b0:	81 11       	cpse	r24, r1
    18b2:	52 c0       	rjmp	.+164    	; 0x1958 <__vector_125+0x146>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    18b4:	80 91 9a 22 	lds	r24, 0x229A
    18b8:	82 30       	cpi	r24, 0x02	; 2
    18ba:	41 f4       	brne	.+16     	; 0x18cc <__vector_125+0xba>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    18bc:	84 e0       	ldi	r24, 0x04	; 4
    18be:	80 93 9a 22 	sts	0x229A, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    18c2:	e8 ea       	ldi	r30, 0xA8	; 168
    18c4:	f2 e2       	ldi	r31, 0x22	; 34
    18c6:	02 e0       	ldi	r16, 0x02	; 2
    18c8:	06 93       	lac	Z, r16
    18ca:	46 c0       	rjmp	.+140    	; 0x1958 <__vector_125+0x146>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    18cc:	83 30       	cpi	r24, 0x03	; 3
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <__vector_125+0xc0>
    18d0:	43 c0       	rjmp	.+134    	; 0x1958 <__vector_125+0x146>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    18d2:	e1 eb       	ldi	r30, 0xB1	; 177
    18d4:	f2 e2       	ldi	r31, 0x22	; 34
    18d6:	04 e0       	ldi	r16, 0x04	; 4
    18d8:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    18da:	e9 ea       	ldi	r30, 0xA9	; 169
    18dc:	f2 e2       	ldi	r31, 0x22	; 34
    18de:	04 e0       	ldi	r16, 0x04	; 4
    18e0:	05 93       	las	Z, r16
    18e2:	3a c0       	rjmp	.+116    	; 0x1958 <__vector_125+0x146>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    18e4:	80 e1       	ldi	r24, 0x10	; 16
    18e6:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	1b df       	rcall	.-458    	; 0x1724 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    18ee:	81 e8       	ldi	r24, 0x81	; 129
    18f0:	19 df       	rcall	.-462    	; 0x1724 <udd_ep_abort>
		}
#endif
		udc_reset();
    18f2:	0e 94 40 04 	call	0x880	; 0x880 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    18f6:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    18fa:	e9 ea       	ldi	r30, 0xA9	; 169
    18fc:	f2 e2       	ldi	r31, 0x22	; 34
    18fe:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1900:	96 e0       	ldi	r25, 0x06	; 6
    1902:	90 93 a8 22 	sts	0x22A8, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1906:	83 e4       	ldi	r24, 0x43	; 67
    1908:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    190a:	e1 eb       	ldi	r30, 0xB1	; 177
    190c:	f2 e2       	ldi	r31, 0x22	; 34
    190e:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1910:	90 93 b0 22 	sts	0x22B0, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1914:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    1916:	86 e5       	ldi	r24, 0x56	; 86
    1918:	92 e2       	ldi	r25, 0x22	; 34
    191a:	80 93 ac 22 	sts	0x22AC, r24
    191e:	90 93 ad 22 	sts	0x22AD, r25
		// Reset endpoint control management
		udd_ctrl_init();
    1922:	41 db       	rcall	.-2430   	; 0xfa6 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    1924:	19 c0       	rjmp	.+50     	; 0x1958 <__vector_125+0x146>
	}

	if (udd_is_suspend_event()) {
    1926:	80 91 cb 04 	lds	r24, 0x04CB
    192a:	86 ff       	sbrs	r24, 6
    192c:	06 c0       	rjmp	.+12     	; 0x193a <__vector_125+0x128>
		udd_ack_suspend_event();
    192e:	80 e4       	ldi	r24, 0x40	; 64
    1930:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	18 db       	rcall	.-2512   	; 0xf68 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1938:	0f c0       	rjmp	.+30     	; 0x1958 <__vector_125+0x146>
	}

	if (udd_is_resume_event()) {
    193a:	80 91 cb 04 	lds	r24, 0x04CB
    193e:	85 ff       	sbrs	r24, 5
    1940:	0b c0       	rjmp	.+22     	; 0x1958 <__vector_125+0x146>
		udd_ack_resume_event();
    1942:	80 e2       	ldi	r24, 0x20	; 32
    1944:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	0e db       	rcall	.-2532   	; 0xf68 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    194c:	05 c0       	rjmp	.+10     	; 0x1958 <__vector_125+0x146>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    194e:	80 91 cb 04 	lds	r24, 0x04CB
    1952:	84 ff       	sbrs	r24, 4
    1954:	e8 cf       	rjmp	.-48     	; 0x1926 <__vector_125+0x114>
    1956:	c6 cf       	rjmp	.-116    	; 0x18e4 <__vector_125+0xd2>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    1958:	ff 91       	pop	r31
    195a:	ef 91       	pop	r30
    195c:	bf 91       	pop	r27
    195e:	af 91       	pop	r26
    1960:	9f 91       	pop	r25
    1962:	8f 91       	pop	r24
    1964:	7f 91       	pop	r23
    1966:	6f 91       	pop	r22
    1968:	5f 91       	pop	r21
    196a:	4f 91       	pop	r20
    196c:	3f 91       	pop	r19
    196e:	2f 91       	pop	r18
    1970:	0f 91       	pop	r16
    1972:	0f 90       	pop	r0
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	0f 90       	pop	r0
    1978:	1f 90       	pop	r1
    197a:	18 95       	reti

0000197c <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    197c:	1f 92       	push	r1
    197e:	0f 92       	push	r0
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	0f 92       	push	r0
    1984:	11 24       	eor	r1, r1
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	2f 93       	push	r18
    198c:	3f 93       	push	r19
    198e:	4f 93       	push	r20
    1990:	5f 93       	push	r21
    1992:	6f 93       	push	r22
    1994:	7f 93       	push	r23
    1996:	8f 93       	push	r24
    1998:	9f 93       	push	r25
    199a:	af 93       	push	r26
    199c:	bf 93       	push	r27
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	ef 93       	push	r30
    19a4:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    19a6:	80 91 cc 04 	lds	r24, 0x04CC
    19aa:	81 fd       	sbrc	r24, 1
    19ac:	03 c0       	rjmp	.+6      	; 0x19b4 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    19ae:	f7 db       	rcall	.-2066   	; 0x119e <udd_ctrl_interrupt_tc_setup>
    19b0:	81 11       	cpse	r24, r1
    19b2:	b8 c0       	rjmp	.+368    	; 0x1b24 <__vector_126+0x1a8>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    19ba:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    19be:	81 95       	neg	r24
    19c0:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    19c2:	e8 ea       	ldi	r30, 0xA8	; 168
    19c4:	f2 e2       	ldi	r31, 0x22	; 34
    19c6:	e8 1b       	sub	r30, r24
    19c8:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    19ca:	20 81       	ld	r18, Z
    19cc:	31 81       	ldd	r19, Z+1	; 0x01
    19ce:	28 5a       	subi	r18, 0xA8	; 168
    19d0:	32 42       	sbci	r19, 0x22	; 34
    19d2:	36 95       	lsr	r19
    19d4:	27 95       	ror	r18
    19d6:	36 95       	lsr	r19
    19d8:	27 95       	ror	r18
    19da:	36 95       	lsr	r19
    19dc:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    19de:	82 2f       	mov	r24, r18
    19e0:	86 95       	lsr	r24
    19e2:	20 ff       	sbrs	r18, 0
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <__vector_126+0x6e>
    19e6:	90 e8       	ldi	r25, 0x80	; 128
    19e8:	01 c0       	rjmp	.+2      	; 0x19ec <__vector_126+0x70>
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    19ee:	e8 2f       	mov	r30, r24
    19f0:	ef 70       	andi	r30, 0x0F	; 15
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	ee 0f       	add	r30, r30
    19f6:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    19f8:	28 2f       	mov	r18, r24
    19fa:	33 27       	eor	r19, r19
    19fc:	27 fd       	sbrc	r18, 7
    19fe:	30 95       	com	r19
    1a00:	22 27       	eor	r18, r18
    1a02:	33 0f       	add	r19, r19
    1a04:	22 1f       	adc	r18, r18
    1a06:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1a08:	e2 0f       	add	r30, r18
    1a0a:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    1a0c:	ee 0f       	add	r30, r30
    1a0e:	ff 1f       	adc	r31, r31
    1a10:	ee 0f       	add	r30, r30
    1a12:	ff 1f       	adc	r31, r31
    1a14:	ee 0f       	add	r30, r30
    1a16:	ff 1f       	adc	r31, r31
    1a18:	e8 55       	subi	r30, 0x58	; 88
    1a1a:	fd 4d       	sbci	r31, 0xDD	; 221
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1a1c:	90 81       	ld	r25, Z
    1a1e:	95 ff       	sbrs	r25, 5
    1a20:	81 c0       	rjmp	.+258    	; 0x1b24 <__vector_126+0x1a8>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1a22:	00 e2       	ldi	r16, 0x20	; 32
    1a24:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    1a26:	81 11       	cpse	r24, r1
    1a28:	78 c0       	rjmp	.+240    	; 0x1b1a <__vector_126+0x19e>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1a2a:	80 91 9a 22 	lds	r24, 0x229A
    1a2e:	84 30       	cpi	r24, 0x04	; 4
    1a30:	19 f4       	brne	.+6      	; 0x1a38 <__vector_126+0xbc>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    1a32:	00 db       	rcall	.-2560   	; 0x1034 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1a34:	b8 da       	rcall	.-2704   	; 0xfa6 <udd_ctrl_init>
    1a36:	76 c0       	rjmp	.+236    	; 0x1b24 <__vector_126+0x1a8>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1a38:	c0 91 aa 22 	lds	r28, 0x22AA
    1a3c:	d0 91 ab 22 	lds	r29, 0x22AB

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1a40:	80 91 f5 22 	lds	r24, 0x22F5
    1a44:	90 91 f6 22 	lds	r25, 0x22F6
    1a48:	00 91 96 22 	lds	r16, 0x2296
    1a4c:	10 91 97 22 	lds	r17, 0x2297
    1a50:	98 01       	movw	r18, r16
    1a52:	2c 0f       	add	r18, r28
    1a54:	3d 1f       	adc	r19, r29
    1a56:	82 17       	cp	r24, r18
    1a58:	93 07       	cpc	r25, r19
    1a5a:	18 f4       	brcc	.+6      	; 0x1a62 <__vector_126+0xe6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1a5c:	ec 01       	movw	r28, r24
    1a5e:	c0 1b       	sub	r28, r16
    1a60:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    1a62:	80 91 f3 22 	lds	r24, 0x22F3
    1a66:	90 91 f4 22 	lds	r25, 0x22F4
    1a6a:	ae 01       	movw	r20, r28
    1a6c:	66 e5       	ldi	r22, 0x56	; 86
    1a6e:	72 e2       	ldi	r23, 0x22	; 34
    1a70:	80 0f       	add	r24, r16
    1a72:	91 1f       	adc	r25, r17
    1a74:	e9 d0       	rcall	.+466    	; 0x1c48 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1a76:	0c 0f       	add	r16, r28
    1a78:	1d 1f       	adc	r17, r29
    1a7a:	00 93 96 22 	sts	0x2296, r16
    1a7e:	10 93 97 22 	sts	0x2297, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1a82:	c0 34       	cpi	r28, 0x40	; 64
    1a84:	d1 05       	cpc	r29, r1
    1a86:	69 f4       	brne	.+26     	; 0x1aa2 <__vector_126+0x126>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1a88:	80 91 98 22 	lds	r24, 0x2298
    1a8c:	90 91 99 22 	lds	r25, 0x2299
    1a90:	80 0f       	add	r24, r16
    1a92:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1a94:	20 91 f1 22 	lds	r18, 0x22F1
    1a98:	30 91 f2 22 	lds	r19, 0x22F2
    1a9c:	82 17       	cp	r24, r18
    1a9e:	93 07       	cpc	r25, r19
    1aa0:	88 f0       	brcs	.+34     	; 0x1ac4 <__vector_126+0x148>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1aa2:	00 93 f5 22 	sts	0x22F5, r16
    1aa6:	10 93 f6 22 	sts	0x22F6, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1aaa:	e0 91 f9 22 	lds	r30, 0x22F9
    1aae:	f0 91 fa 22 	lds	r31, 0x22FA
    1ab2:	30 97       	sbiw	r30, 0x00	; 0
    1ab4:	29 f0       	breq	.+10     	; 0x1ac0 <__vector_126+0x144>
			if (!udd_g_ctrlreq.over_under_run()) {
    1ab6:	09 95       	icall
    1ab8:	81 11       	cpse	r24, r1
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <__vector_126+0x144>
				// Stall ZLP
				udd_ctrl_stall_data();
    1abc:	9f da       	rcall	.-2754   	; 0xffc <udd_ctrl_stall_data>
    1abe:	32 c0       	rjmp	.+100    	; 0x1b24 <__vector_126+0x1a8>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    1ac0:	ab da       	rcall	.-2730   	; 0x1018 <udd_ctrl_send_zlp_in>
    1ac2:	30 c0       	rjmp	.+96     	; 0x1b24 <__vector_126+0x1a8>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1ac4:	80 91 f5 22 	lds	r24, 0x22F5
    1ac8:	90 91 f6 22 	lds	r25, 0x22F6
    1acc:	08 17       	cp	r16, r24
    1ace:	19 07       	cpc	r17, r25
    1ad0:	f9 f4       	brne	.+62     	; 0x1b10 <__vector_126+0x194>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1ad2:	e0 91 f9 22 	lds	r30, 0x22F9
    1ad6:	f0 91 fa 22 	lds	r31, 0x22FA
    1ada:	30 97       	sbiw	r30, 0x00	; 0
    1adc:	11 f4       	brne	.+4      	; 0x1ae2 <__vector_126+0x166>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    1ade:	8e da       	rcall	.-2788   	; 0xffc <udd_ctrl_stall_data>
    1ae0:	21 c0       	rjmp	.+66     	; 0x1b24 <__vector_126+0x1a8>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1ae2:	09 95       	icall
    1ae4:	81 11       	cpse	r24, r1
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <__vector_126+0x170>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1ae8:	89 da       	rcall	.-2798   	; 0xffc <udd_ctrl_stall_data>
    1aea:	1c c0       	rjmp	.+56     	; 0x1b24 <__vector_126+0x1a8>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1aec:	20 91 98 22 	lds	r18, 0x2298
    1af0:	30 91 99 22 	lds	r19, 0x2299
    1af4:	80 91 96 22 	lds	r24, 0x2296
    1af8:	90 91 97 22 	lds	r25, 0x2297
    1afc:	82 0f       	add	r24, r18
    1afe:	93 1f       	adc	r25, r19
    1b00:	80 93 98 22 	sts	0x2298, r24
    1b04:	90 93 99 22 	sts	0x2299, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1b08:	10 92 96 22 	sts	0x2296, r1
    1b0c:	10 92 97 22 	sts	0x2297, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1b10:	e8 ea       	ldi	r30, 0xA8	; 168
    1b12:	f2 e2       	ldi	r31, 0x22	; 34
    1b14:	02 e0       	ldi	r16, 0x02	; 2
    1b16:	06 93       	lac	Z, r16
    1b18:	05 c0       	rjmp	.+10     	; 0x1b24 <__vector_126+0x1a8>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1b1a:	80 38       	cpi	r24, 0x80	; 128
    1b1c:	11 f4       	brne	.+4      	; 0x1b22 <__vector_126+0x1a6>
		udd_ctrl_in_sent();
    1b1e:	92 da       	rcall	.-2780   	; 0x1044 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <__vector_126+0x1a8>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1b22:	ac db       	rcall	.-2216   	; 0x127c <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    1b24:	ff 91       	pop	r31
    1b26:	ef 91       	pop	r30
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	bf 91       	pop	r27
    1b2e:	af 91       	pop	r26
    1b30:	9f 91       	pop	r25
    1b32:	8f 91       	pop	r24
    1b34:	7f 91       	pop	r23
    1b36:	6f 91       	pop	r22
    1b38:	5f 91       	pop	r21
    1b3a:	4f 91       	pop	r20
    1b3c:	3f 91       	pop	r19
    1b3e:	2f 91       	pop	r18
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	0f 90       	pop	r0
    1b4a:	1f 90       	pop	r1
    1b4c:	18 95       	reti

00001b4e <init_DSD_PLC>:
 */ 

#include "../DSD_PLC.h"

void init_DSD_PLC(void)
{
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
	sysclk_init();
    1b52:	0e 94 23 01 	call	0x246	; 0x246 <sysclk_init>
	ioport_init();
	switch_init();
    1b56:	38 d0       	rcall	.+112    	; 0x1bc8 <switch_init>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    1b58:	e0 ee       	ldi	r30, 0xE0	; 224
    1b5a:	f7 e0       	ldi	r31, 0x07	; 7
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	82 83       	std	Z+2, r24	; 0x02
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	92 83       	std	Z+2, r25	; 0x02
    1b64:	e0 e8       	ldi	r30, 0x80	; 128
    1b66:	f6 e0       	ldi	r31, 0x06	; 6
    1b68:	38 e0       	ldi	r19, 0x08	; 8
    1b6a:	32 83       	std	Z+2, r19	; 0x02
    1b6c:	24 e0       	ldi	r18, 0x04	; 4
    1b6e:	22 83       	std	Z+2, r18	; 0x02
    1b70:	82 83       	std	Z+2, r24	; 0x02
    1b72:	92 83       	std	Z+2, r25	; 0x02
    1b74:	e0 e6       	ldi	r30, 0x60	; 96
    1b76:	f6 e0       	ldi	r31, 0x06	; 6
    1b78:	40 e2       	ldi	r20, 0x20	; 32
    1b7a:	42 83       	std	Z+2, r20	; 0x02
    1b7c:	50 e1       	ldi	r21, 0x10	; 16
    1b7e:	52 83       	std	Z+2, r21	; 0x02
    1b80:	e0 e4       	ldi	r30, 0x40	; 64
    1b82:	f6 e0       	ldi	r31, 0x06	; 6
    1b84:	60 e8       	ldi	r22, 0x80	; 128
    1b86:	62 83       	std	Z+2, r22	; 0x02
    1b88:	70 e4       	ldi	r23, 0x40	; 64
    1b8a:	72 83       	std	Z+2, r23	; 0x02
    1b8c:	42 83       	std	Z+2, r20	; 0x02
    1b8e:	52 83       	std	Z+2, r21	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1b90:	a0 e0       	ldi	r26, 0x00	; 0
    1b92:	b6 e0       	ldi	r27, 0x06	; 6
    1b94:	11 96       	adiw	r26, 0x01	; 1
    1b96:	5c 93       	st	X, r21
    1b98:	11 97       	sbiw	r26, 0x01	; 1
    1b9a:	11 96       	adiw	r26, 0x01	; 1
    1b9c:	3c 93       	st	X, r19
    1b9e:	11 97       	sbiw	r26, 0x01	; 1
    1ba0:	11 96       	adiw	r26, 0x01	; 1
    1ba2:	7c 93       	st	X, r23
    1ba4:	11 97       	sbiw	r26, 0x01	; 1
    1ba6:	11 96       	adiw	r26, 0x01	; 1
    1ba8:	4c 93       	st	X, r20
    1baa:	11 97       	sbiw	r26, 0x01	; 1
    1bac:	c0 e2       	ldi	r28, 0x20	; 32
    1bae:	d6 e0       	ldi	r29, 0x06	; 6
    1bb0:	99 83       	std	Y+1, r25	; 0x01
    1bb2:	11 96       	adiw	r26, 0x01	; 1
    1bb4:	6c 93       	st	X, r22
    1bb6:	29 83       	std	Y+1, r18	; 0x01
    1bb8:	89 83       	std	Y+1, r24	; 0x01
    1bba:	91 83       	std	Z+1, r25	; 0x01
    1bbc:	39 83       	std	Y+1, r19	; 0x01
    1bbe:	21 83       	std	Z+1, r18	; 0x01
    1bc0:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_dir(Y10,IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(Y11,IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(Y12,IOPORT_DIR_OUTPUT);
	
	
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	08 95       	ret

00001bc8 <switch_init>:
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    1bc8:	88 e0       	ldi	r24, 0x08	; 8
    1bca:	e0 e4       	ldi	r30, 0x40	; 64
    1bcc:	f6 e0       	ldi	r31, 0x06	; 6
    1bce:	82 83       	std	Z+2, r24	; 0x02
    1bd0:	08 95       	ret

00001bd2 <main>:

int main (void)
{
	// Insert system clock initialization code here (sysclk_init()).

	init_DSD_PLC();
    1bd2:	bd df       	rcall	.-134    	; 0x1b4e <init_DSD_PLC>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1bd4:	e0 e0       	ldi	r30, 0x00	; 0
    1bd6:	f6 e0       	ldi	r31, 0x06	; 6
    1bd8:	60 e1       	ldi	r22, 0x10	; 16
    1bda:	55 e1       	ldi	r21, 0x15	; 21
    1bdc:	46 e1       	ldi	r20, 0x16	; 22
    1bde:	35 e0       	ldi	r19, 0x05	; 5
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	65 83       	std	Z+5, r22	; 0x05
    1be4:	85 2f       	mov	r24, r21
    1be6:	94 2f       	mov	r25, r20
    1be8:	a3 2f       	mov	r26, r19
    1bea:	b2 2f       	mov	r27, r18
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	a1 09       	sbc	r26, r1
    1bf0:	b1 09       	sbc	r27, r1
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	a1 05       	cpc	r26, r1
    1bf6:	b1 05       	cpc	r27, r1
    1bf8:	c9 f7       	brne	.-14     	; 0x1bec <main+0x1a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1bfa:	66 83       	std	Z+6, r22	; 0x06
    1bfc:	85 2f       	mov	r24, r21
    1bfe:	94 2f       	mov	r25, r20
    1c00:	a3 2f       	mov	r26, r19
    1c02:	b2 2f       	mov	r27, r18
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	a1 09       	sbc	r26, r1
    1c08:	b1 09       	sbc	r27, r1
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	a1 05       	cpc	r26, r1
    1c0e:	b1 05       	cpc	r27, r1
    1c10:	c9 f7       	brne	.-14     	; 0x1c04 <main+0x32>
    1c12:	e7 cf       	rjmp	.-50     	; 0x1be2 <main+0x10>

00001c14 <__udivmodhi4>:
    1c14:	aa 1b       	sub	r26, r26
    1c16:	bb 1b       	sub	r27, r27
    1c18:	51 e1       	ldi	r21, 0x11	; 17
    1c1a:	07 c0       	rjmp	.+14     	; 0x1c2a <__udivmodhi4_ep>

00001c1c <__udivmodhi4_loop>:
    1c1c:	aa 1f       	adc	r26, r26
    1c1e:	bb 1f       	adc	r27, r27
    1c20:	a6 17       	cp	r26, r22
    1c22:	b7 07       	cpc	r27, r23
    1c24:	10 f0       	brcs	.+4      	; 0x1c2a <__udivmodhi4_ep>
    1c26:	a6 1b       	sub	r26, r22
    1c28:	b7 0b       	sbc	r27, r23

00001c2a <__udivmodhi4_ep>:
    1c2a:	88 1f       	adc	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	5a 95       	dec	r21
    1c30:	a9 f7       	brne	.-22     	; 0x1c1c <__udivmodhi4_loop>
    1c32:	80 95       	com	r24
    1c34:	90 95       	com	r25
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	08 95       	ret

00001c3c <__tablejump2__>:
    1c3c:	ee 0f       	add	r30, r30
    1c3e:	ff 1f       	adc	r31, r31

00001c40 <__tablejump__>:
    1c40:	05 90       	lpm	r0, Z+
    1c42:	f4 91       	lpm	r31, Z
    1c44:	e0 2d       	mov	r30, r0
    1c46:	09 94       	ijmp

00001c48 <memcpy>:
    1c48:	fb 01       	movw	r30, r22
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <memcpy+0xa>
    1c4e:	01 90       	ld	r0, Z+
    1c50:	0d 92       	st	X+, r0
    1c52:	41 50       	subi	r20, 0x01	; 1
    1c54:	50 40       	sbci	r21, 0x00	; 0
    1c56:	d8 f7       	brcc	.-10     	; 0x1c4e <memcpy+0x6>
    1c58:	08 95       	ret

00001c5a <_exit>:
    1c5a:	f8 94       	cli

00001c5c <__stop_program>:
    1c5c:	ff cf       	rjmp	.-2      	; 0x1c5c <__stop_program>
